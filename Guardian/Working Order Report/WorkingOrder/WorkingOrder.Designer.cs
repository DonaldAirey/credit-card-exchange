//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-fluidtrade-com:guardian:working-order", "FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder")]

namespace FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder
{
	
	
	/// <summary>
	/// This class provides the SavingsBalance data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SavingsBalance : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object balance;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SavingsBalance()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance.SelectFromSelf);
		}
		
		/// <summary>
		/// Balance
		/// </summary>
		public object Balance
		{
			get
			{
				return this.balance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance savingsBalance = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance)(iContent));
			if ((this.isActive != savingsBalance.isActive))
			{
				this.isActive = savingsBalance.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.balance != savingsBalance.balance))
			{
				this.balance = savingsBalance.balance;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Balance"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance savingsBalance)
		{
			return savingsBalance;
		}
	}
	
	/// <summary>
	/// This class provides the Address1 data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Address1 : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Address1()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1 records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1 to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1 address1 = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1)(iContent));
			if ((this.isActive != address1.isActive))
			{
				this.isActive = address1.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != address1.text))
			{
				this.text = address1.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1 SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1 address1)
		{
			return address1;
		}
	}
	
	/// <summary>
	/// This class provides the Address2 data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Address2 : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Address2()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2 records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2 to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2 address2 = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2)(iContent));
			if ((this.isActive != address2.isActive))
			{
				this.isActive = address2.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != address2.text))
			{
				this.text = address2.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2 SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2 address2)
		{
			return address2;
		}
	}
	
	/// <summary>
	/// This class provides the AskPrice data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class AskPrice : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal price;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static AskPrice()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Price
		/// </summary>
		public decimal Price
		{
			get
			{
				return this.price;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice askPrice = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice)(iContent));
			if ((this.isActive != askPrice.isActive))
			{
				this.isActive = askPrice.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.price != askPrice.price))
			{
				this.price = askPrice.price;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Price"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice askPrice)
		{
			return askPrice;
		}
	}
	
	/// <summary>
	/// This class provides the AvailableQuantity data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class AvailableQuantity : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal quantity;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static AvailableQuantity()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Quantity
		/// </summary>
		public decimal Quantity
		{
			get
			{
				return this.quantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity availableQuantity = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity)(iContent));
			if ((this.isActive != availableQuantity.isActive))
			{
				this.isActive = availableQuantity.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.quantity != availableQuantity.quantity))
			{
				this.quantity = availableQuantity.quantity;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Quantity"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity availableQuantity)
		{
			return availableQuantity;
		}
	}
	
	/// <summary>
	/// This class provides the BidPrice data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class BidPrice : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal price;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static BidPrice()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Price
		/// </summary>
		public decimal Price
		{
			get
			{
				return this.price;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice bidPrice = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice)(iContent));
			if ((this.isActive != bidPrice.isActive))
			{
				this.isActive = bidPrice.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.price != bidPrice.price))
			{
				this.price = bidPrice.price;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Price"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice bidPrice)
		{
			return bidPrice;
		}
	}
	
	/// <summary>
	/// This class provides the Blotter data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Blotter : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.Guid blotterId;
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Blotter()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter.SelectFromSelf);
		}
		
		/// <summary>
		/// BlotterId
		/// </summary>
		public System.Guid BlotterId
		{
			get
			{
				return this.blotterId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter blotter = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter)(iContent));
			if ((this.blotterId != blotter.blotterId))
			{
				this.blotterId = blotter.blotterId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("BlotterId"));
				}
			}
			if ((this.name != blotter.name))
			{
				this.name = blotter.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
			if ((this.isActive != blotter.isActive))
			{
				this.isActive = blotter.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter blotter)
		{
			return blotter;
		}
	}
	
	/// <summary>
	/// This class provides the BrokerMatch data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class BrokerMatch : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal bool isMatch;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static BrokerMatch()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsMatch
		/// </summary>
		public bool IsMatch
		{
			get
			{
				return this.isMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch brokerMatch = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch)(iContent));
			if ((this.isActive != brokerMatch.isActive))
			{
				this.isActive = brokerMatch.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.isMatch != brokerMatch.isMatch))
			{
				this.isMatch = brokerMatch.isMatch;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsMatch"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch brokerMatch)
		{
			return brokerMatch;
		}
	}
	
	/// <summary>
	/// This class provides the City data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class City : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static City()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City city = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City)(iContent));
			if ((this.isActive != city.isActive))
			{
				this.isActive = city.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != city.text))
			{
				this.text = city.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City city)
		{
			return city;
		}
	}
	
	/// <summary>
	/// This class provides the CollectionDate data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class CollectionDate : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CollectionDate()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public object Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate collectionDate = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate)(iContent));
			if ((this.isActive != collectionDate.isActive))
			{
				this.isActive = collectionDate.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.date != collectionDate.date))
			{
				this.date = collectionDate.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate collectionDate)
		{
			return collectionDate;
		}
	}
	
	/// <summary>
	/// This class provides the Coupon data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Coupon : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal rate;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Coupon()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Rate
		/// </summary>
		public decimal Rate
		{
			get
			{
				return this.rate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon coupon = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon)(iContent));
			if ((this.isActive != coupon.isActive))
			{
				this.isActive = coupon.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.rate != coupon.rate))
			{
				this.rate = coupon.rate;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Rate"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon coupon)
		{
			return coupon;
		}
	}
	
	/// <summary>
	/// This class provides the CreatedBy data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class CreatedBy : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy> selectSelf;
		
		internal System.Guid userId;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CreatedBy()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy.selectSelf;
			}
		}
		
		/// <summary>
		/// UserId
		/// </summary>
		public System.Guid UserId
		{
			get
			{
				return this.userId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy createdBy = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy)(iContent));
			if ((this.isActive != createdBy.isActive))
			{
				this.isActive = createdBy.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != createdBy.name))
			{
				this.name = createdBy.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
			if ((this.userId != createdBy.userId))
			{
				this.userId = createdBy.userId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("UserId"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy createdBy)
		{
			return createdBy;
		}
	}
	
	/// <summary>
	/// This class provides the CreatedTime data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class CreatedTime : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime> selectSelf;
		
		internal System.DateTime time;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CreatedTime()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime.selectSelf;
			}
		}
		
		/// <summary>
		/// Time
		/// </summary>
		public System.DateTime Time
		{
			get
			{
				return this.time;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime createdTime = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime)(iContent));
			if ((this.isActive != createdTime.isActive))
			{
				this.isActive = createdTime.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.time != createdTime.time))
			{
				this.time = createdTime.time;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Time"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime createdTime)
		{
			return createdTime;
		}
	}
	
	/// <summary>
	/// This class provides the CreditCardIssuer data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class CreditCardIssuer : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CreditCardIssuer()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer creditCardIssuer = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer)(iContent));
			if ((this.isActive != creditCardIssuer.isActive))
			{
				this.isActive = creditCardIssuer.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != creditCardIssuer.name))
			{
				this.name = creditCardIssuer.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer creditCardIssuer)
		{
			return creditCardIssuer;
		}
	}
	
	/// <summary>
	/// This class provides the OriginalAccountNumber data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class OriginalAccountNumber : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string number;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static OriginalAccountNumber()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Number
		/// </summary>
		public string Number
		{
			get
			{
				return this.number;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber originalAccountNumber = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber)(iContent));
			if ((this.isActive != originalAccountNumber.isActive))
			{
				this.isActive = originalAccountNumber.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.number != originalAccountNumber.number))
			{
				this.number = originalAccountNumber.number;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Number"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber originalAccountNumber)
		{
			return originalAccountNumber;
		}
	}
	
	/// <summary>
	/// This class provides the Crossing data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Crossing : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal bool isCrossing;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Crossing()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsCrossing
		/// </summary>
		public bool IsCrossing
		{
			get
			{
				return this.isCrossing;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing crossing = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing)(iContent));
			if ((this.isActive != crossing.isActive))
			{
				this.isActive = crossing.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.isCrossing != crossing.isCrossing))
			{
				this.isCrossing = crossing.isCrossing;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsCrossing"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing crossing)
		{
			return crossing;
		}
	}
	
	/// <summary>
	/// This class provides the DateOfBirth data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class DateOfBirth : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static DateOfBirth()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public object Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth dateOfBirth = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth)(iContent));
			if ((this.isActive != dateOfBirth.isActive))
			{
				this.isActive = dateOfBirth.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.date != dateOfBirth.date))
			{
				this.date = dateOfBirth.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth dateOfBirth)
		{
			return dateOfBirth;
		}
	}
	
	/// <summary>
	/// This class provides the DateOfDelinquency data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class DateOfDelinquency : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static DateOfDelinquency()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public object Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency dateOfDelinquency = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency)(iContent));
			if ((this.isActive != dateOfDelinquency.isActive))
			{
				this.isActive = dateOfDelinquency.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.date != dateOfDelinquency.date))
			{
				this.date = dateOfDelinquency.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency dateOfDelinquency)
		{
			return dateOfDelinquency;
		}
	}
	
	/// <summary>
	/// This class provides the DestinationOrderQuantity data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class DestinationOrderQuantity : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal quantity;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static DestinationOrderQuantity()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Quantity
		/// </summary>
		public decimal Quantity
		{
			get
			{
				return this.quantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity destinationOrderQuantity = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity)(iContent));
			if ((this.isActive != destinationOrderQuantity.isActive))
			{
				this.isActive = destinationOrderQuantity.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.quantity != destinationOrderQuantity.quantity))
			{
				this.quantity = destinationOrderQuantity.quantity;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Quantity"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity destinationOrderQuantity)
		{
			return destinationOrderQuantity;
		}
	}
	
	/// <summary>
	/// This class provides the ExecutionQuantity data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class ExecutionQuantity : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal quantity;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static ExecutionQuantity()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Quantity
		/// </summary>
		public decimal Quantity
		{
			get
			{
				return this.quantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity executionQuantity = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity)(iContent));
			if ((this.isActive != executionQuantity.isActive))
			{
				this.isActive = executionQuantity.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.quantity != executionQuantity.quantity))
			{
				this.quantity = executionQuantity.quantity;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Quantity"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity executionQuantity)
		{
			return executionQuantity;
		}
	}
	
	/// <summary>
	/// This class provides the FirstName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class FirstName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object name;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static FirstName()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName firstName = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName)(iContent));
			if ((this.isActive != firstName.isActive))
			{
				this.isActive = firstName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != firstName.name))
			{
				this.name = firstName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName firstName)
		{
			return firstName;
		}
	}
	
	/// <summary>
	/// This class provides the HedgeMatch data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class HedgeMatch : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal bool isMatch;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static HedgeMatch()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsMatch
		/// </summary>
		public bool IsMatch
		{
			get
			{
				return this.isMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch hedgeMatch = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch)(iContent));
			if ((this.isActive != hedgeMatch.isActive))
			{
				this.isActive = hedgeMatch.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.isMatch != hedgeMatch.isMatch))
			{
				this.isMatch = hedgeMatch.isMatch;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsMatch"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch hedgeMatch)
		{
			return hedgeMatch;
		}
	}
	
	/// <summary>
	/// This class provides the InstitutionMatch data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class InstitutionMatch : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal bool isMatch;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static InstitutionMatch()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsMatch
		/// </summary>
		public bool IsMatch
		{
			get
			{
				return this.isMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch institutionMatch = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch)(iContent));
			if ((this.isActive != institutionMatch.isActive))
			{
				this.isActive = institutionMatch.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.isMatch != institutionMatch.isMatch))
			{
				this.isMatch = institutionMatch.isMatch;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsMatch"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch institutionMatch)
		{
			return institutionMatch;
		}
	}
	
	/// <summary>
	/// This class provides the IsEmployed data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class IsEmployed : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object employed;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static IsEmployed()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed.SelectFromSelf);
		}
		
		/// <summary>
		/// Employed
		/// </summary>
		public object Employed
		{
			get
			{
				return this.employed;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed isEmployed = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed)(iContent));
			if ((this.isActive != isEmployed.isActive))
			{
				this.isActive = isEmployed.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.employed != isEmployed.employed))
			{
				this.employed = isEmployed.employed;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Employed"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed isEmployed)
		{
			return isEmployed;
		}
	}
	
	/// <summary>
	/// This class provides the LastName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class LastName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object name;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static LastName()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName lastName = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName)(iContent));
			if ((this.isActive != lastName.isActive))
			{
				this.isActive = lastName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != lastName.name))
			{
				this.name = lastName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName lastName)
		{
			return lastName;
		}
	}
	
	/// <summary>
	/// This class provides the LastPrice data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class LastPrice : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal price;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static LastPrice()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Price
		/// </summary>
		public decimal Price
		{
			get
			{
				return this.price;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice lastPrice = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice)(iContent));
			if ((this.isActive != lastPrice.isActive))
			{
				this.isActive = lastPrice.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.price != lastPrice.price))
			{
				this.price = lastPrice.price;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Price"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice lastPrice)
		{
			return lastPrice;
		}
	}
	
	/// <summary>
	/// This class provides the LeavesQuantity data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class LeavesQuantity : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal quantity;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static LeavesQuantity()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Quantity
		/// </summary>
		public decimal Quantity
		{
			get
			{
				return this.quantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity leavesQuantity = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity)(iContent));
			if ((this.isActive != leavesQuantity.isActive))
			{
				this.isActive = leavesQuantity.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.quantity != leavesQuantity.quantity))
			{
				this.quantity = leavesQuantity.quantity;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Quantity"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity leavesQuantity)
		{
			return leavesQuantity;
		}
	}
	
	/// <summary>
	/// This class provides the PostalCode data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class PostalCode : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object code;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static PostalCode()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode.SelectFromSelf);
		}
		
		/// <summary>
		/// Code
		/// </summary>
		public object Code
		{
			get
			{
				return this.code;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode postalCode = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode)(iContent));
			if ((this.isActive != postalCode.isActive))
			{
				this.isActive = postalCode.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.code != postalCode.code))
			{
				this.code = postalCode.code;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Code"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode postalCode)
		{
			return postalCode;
		}
	}
	
	/// <summary>
	/// This class provides the MarketValue data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class MarketValue : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue> selectSelf;
		
		internal decimal value;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static MarketValue()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue.selectSelf;
			}
		}
		
		/// <summary>
		/// Value
		/// </summary>
		public decimal Value
		{
			get
			{
				return this.value;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue marketValue = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue)(iContent));
			if ((this.isActive != marketValue.isActive))
			{
				this.isActive = marketValue.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.value != marketValue.value))
			{
				this.value = marketValue.value;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Value"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue marketValue)
		{
			return marketValue;
		}
	}
	
	/// <summary>
	/// This class provides the MaturityDate data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class MaturityDate : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.DateTime date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static MaturityDate()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public System.DateTime Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate maturityDate = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate)(iContent));
			if ((this.isActive != maturityDate.isActive))
			{
				this.isActive = maturityDate.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.date != maturityDate.date))
			{
				this.date = maturityDate.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate maturityDate)
		{
			return maturityDate;
		}
	}
	
	/// <summary>
	/// This class provides the ModifiedBy data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class ModifiedBy : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy> selectSelf;
		
		internal System.Guid userId;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static ModifiedBy()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy.selectSelf;
			}
		}
		
		/// <summary>
		/// UserId
		/// </summary>
		public System.Guid UserId
		{
			get
			{
				return this.userId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy modifiedBy = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy)(iContent));
			if ((this.isActive != modifiedBy.isActive))
			{
				this.isActive = modifiedBy.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != modifiedBy.name))
			{
				this.name = modifiedBy.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
			if ((this.userId != modifiedBy.userId))
			{
				this.userId = modifiedBy.userId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("UserId"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy modifiedBy)
		{
			return modifiedBy;
		}
	}
	
	/// <summary>
	/// This class provides the ModifiedTime data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class ModifiedTime : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime> selectSelf;
		
		internal System.DateTime time;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static ModifiedTime()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime.selectSelf;
			}
		}
		
		/// <summary>
		/// Time
		/// </summary>
		public System.DateTime Time
		{
			get
			{
				return this.time;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime modifiedTime = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime)(iContent));
			if ((this.isActive != modifiedTime.isActive))
			{
				this.isActive = modifiedTime.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.time != modifiedTime.time))
			{
				this.time = modifiedTime.time;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Time"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime modifiedTime)
		{
			return modifiedTime;
		}
	}
	
	/// <summary>
	/// This class provides the OrderType data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class OrderType : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal limitPrice;
		
		internal string mnemonic;
		
		internal FluidTrade.Core.OrderType orderTypeCode;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType> selectSelf;
		
		internal decimal stopPrice;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static OrderType()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// LimitPrice
		/// </summary>
		public decimal LimitPrice
		{
			get
			{
				return this.limitPrice;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Mnemonic
		/// </summary>
		public string Mnemonic
		{
			get
			{
				return this.mnemonic;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// OrderTypeCode
		/// </summary>
		public FluidTrade.Core.OrderType OrderTypeCode
		{
			get
			{
				return this.orderTypeCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType.selectSelf;
			}
		}
		
		/// <summary>
		/// StopPrice
		/// </summary>
		public decimal StopPrice
		{
			get
			{
				return this.stopPrice;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType orderType = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType)(iContent));
			if ((this.isActive != orderType.isActive))
			{
				this.isActive = orderType.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.limitPrice != orderType.limitPrice))
			{
				this.limitPrice = orderType.limitPrice;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("LimitPrice"));
				}
			}
			if ((this.mnemonic != orderType.mnemonic))
			{
				this.mnemonic = orderType.mnemonic;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Mnemonic"));
				}
			}
			if ((this.orderTypeCode != orderType.orderTypeCode))
			{
				this.orderTypeCode = orderType.orderTypeCode;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("OrderTypeCode"));
				}
			}
			if ((this.stopPrice != orderType.stopPrice))
			{
				this.stopPrice = orderType.stopPrice;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("StopPrice"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType orderType)
		{
			return orderType;
		}
	}
	
	/// <summary>
	/// This class provides the AccountBalance data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class AccountBalance : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object balance;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static AccountBalance()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance.SelectFromSelf);
		}
		
		/// <summary>
		/// Balance
		/// </summary>
		public object Balance
		{
			get
			{
				return this.balance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance accountBalance = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance)(iContent));
			if ((this.isActive != accountBalance.isActive))
			{
				this.isActive = accountBalance.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.balance != accountBalance.balance))
			{
				this.balance = accountBalance.balance;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Balance"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance accountBalance)
		{
			return accountBalance;
		}
	}
	
	/// <summary>
	/// This class provides the Province data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Province : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object abbreviation;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Province()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province.SelectFromSelf);
		}
		
		/// <summary>
		/// Abbreviation
		/// </summary>
		public object Abbreviation
		{
			get
			{
				return this.abbreviation;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province province = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province)(iContent));
			if ((this.isActive != province.isActive))
			{
				this.isActive = province.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.abbreviation != province.abbreviation))
			{
				this.abbreviation = province.abbreviation;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Abbreviation"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province province)
		{
			return province;
		}
	}
	
	/// <summary>
	/// This class provides the SecurityName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SecurityName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SecurityName()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName securityName = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName)(iContent));
			if ((this.isActive != securityName.isActive))
			{
				this.isActive = securityName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != securityName.name))
			{
				this.name = securityName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName securityName)
		{
			return securityName;
		}
	}
	
	/// <summary>
	/// This class provides the SecuritySymbol data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SecuritySymbol : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol> selectSelf;
		
		internal string symbol;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SecuritySymbol()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol.selectSelf;
			}
		}
		
		/// <summary>
		/// Symbol
		/// </summary>
		public string Symbol
		{
			get
			{
				return this.symbol;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol securitySymbol = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol)(iContent));
			if ((this.isActive != securitySymbol.isActive))
			{
				this.isActive = securitySymbol.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.symbol != securitySymbol.symbol))
			{
				this.symbol = securitySymbol.symbol;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Symbol"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol securitySymbol)
		{
			return securitySymbol;
		}
	}
	
	/// <summary>
	/// This class provides the SettlementDate data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SettlementDate : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.DateTime date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SettlementDate()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public System.DateTime Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate settlementDate = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate)(iContent));
			if ((this.date != settlementDate.date))
			{
				this.date = settlementDate.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
			if ((this.isActive != settlementDate.isActive))
			{
				this.isActive = settlementDate.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate settlementDate)
		{
			return settlementDate;
		}
	}
	
	/// <summary>
	/// This class provides the Side data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Side : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal string description;
		
		internal bool isActive;
		
		internal object key;
		
		internal string mnemonic;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side> selectSelf;
		
		internal FluidTrade.Core.Side sideCode;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Side()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side.SelectFromSelf);
		}
		
		/// <summary>
		/// Description
		/// </summary>
		public string Description
		{
			get
			{
				return this.description;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Mnemonic
		/// </summary>
		public string Mnemonic
		{
			get
			{
				return this.mnemonic;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side.selectSelf;
			}
		}
		
		/// <summary>
		/// SideCode
		/// </summary>
		public FluidTrade.Core.Side SideCode
		{
			get
			{
				return this.sideCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side side = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side)(iContent));
			if ((this.isActive != side.isActive))
			{
				this.isActive = side.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.mnemonic != side.mnemonic))
			{
				this.mnemonic = side.mnemonic;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Mnemonic"));
				}
			}
			if ((this.description != side.description))
			{
				this.description = side.description;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Description"));
				}
			}
			if ((this.sideCode != side.sideCode))
			{
				this.sideCode = side.sideCode;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("SideCode"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side side)
		{
			return side;
		}
	}
	
	/// <summary>
	/// This class provides the SocialSecurityNumber data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SocialSecurityNumber : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object number;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SocialSecurityNumber()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Number
		/// </summary>
		public object Number
		{
			get
			{
				return this.number;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber socialSecurityNumber = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber)(iContent));
			if ((this.isActive != socialSecurityNumber.isActive))
			{
				this.isActive = socialSecurityNumber.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.number != socialSecurityNumber.number))
			{
				this.number = socialSecurityNumber.number;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Number"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber socialSecurityNumber)
		{
			return socialSecurityNumber;
		}
	}
	
	/// <summary>
	/// This class provides the SourceOrderQuantity data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SourceOrderQuantity : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal quantity;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SourceOrderQuantity()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Quantity
		/// </summary>
		public decimal Quantity
		{
			get
			{
				return this.quantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity sourceOrderQuantity = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity)(iContent));
			if ((this.isActive != sourceOrderQuantity.isActive))
			{
				this.isActive = sourceOrderQuantity.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.quantity != sourceOrderQuantity.quantity))
			{
				this.quantity = sourceOrderQuantity.quantity;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Quantity"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity sourceOrderQuantity)
		{
			return sourceOrderQuantity;
		}
	}
	
	/// <summary>
	/// This class provides the Status data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Status : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string mnemonic;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status> selectSelf;
		
		internal FluidTrade.Guardian.Status statusCode;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Status()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Mnemonic
		/// </summary>
		public string Mnemonic
		{
			get
			{
				return this.mnemonic;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status.selectSelf;
			}
		}
		
		/// <summary>
		/// StatusCode
		/// </summary>
		public FluidTrade.Guardian.Status StatusCode
		{
			get
			{
				return this.statusCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status status = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status)(iContent));
			if ((this.mnemonic != status.mnemonic))
			{
				this.mnemonic = status.mnemonic;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Mnemonic"));
				}
			}
			if ((this.isActive != status.isActive))
			{
				this.isActive = status.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.statusCode != status.statusCode))
			{
				this.statusCode = status.statusCode;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("StatusCode"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status status)
		{
			return status;
		}
	}
	
	/// <summary>
	/// This class provides the TimeInForce data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class TimeInForce : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce> selectSelf;
		
		internal FluidTrade.Core.TimeInForce timeInForceCode;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static TimeInForce()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce.selectSelf;
			}
		}
		
		/// <summary>
		/// TimeInForceCode
		/// </summary>
		public FluidTrade.Core.TimeInForce TimeInForceCode
		{
			get
			{
				return this.timeInForceCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce timeInForce = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce)(iContent));
			if ((this.isActive != timeInForce.isActive))
			{
				this.isActive = timeInForce.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.timeInForceCode != timeInForce.timeInForceCode))
			{
				this.timeInForceCode = timeInForce.timeInForceCode;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("TimeInForceCode"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce timeInForce)
		{
			return timeInForce;
		}
	}
	
	/// <summary>
	/// This class provides the TradeDate data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class TradeDate : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.DateTime date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static TradeDate()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public System.DateTime Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate tradeDate = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate)(iContent));
			if ((this.date != tradeDate.date))
			{
				this.date = tradeDate.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
			if ((this.isActive != tradeDate.isActive))
			{
				this.isActive = tradeDate.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate tradeDate)
		{
			return tradeDate;
		}
	}
	
	/// <summary>
	/// This class provides the WorkingOrder data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class WorkingOrder : FluidTrade.Core.IContent
	{
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance accountBalance;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1 address1;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2 address2;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice askPrice;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity availableQuantity;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice bidPrice;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter blotter;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch brokerMatch;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City city;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate collectionDate;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon coupon;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy createdBy;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime createdTime;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer creditCardIssuer;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing crossing;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth dateOfBirth;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency dateOfDelinquency;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity destinationOrderQuantity;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity executionQuantity;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName firstName;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch hedgeMatch;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch institutionMatch;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed isEmployed;
		
		internal object key;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName lastName;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice lastPrice;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity leavesQuantity;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue marketValue;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate maturityDate;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy modifiedBy;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime modifiedTime;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType orderType;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber originalAccountNumber;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode postalCode;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province province;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance savingsBalance;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName securityName;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol securitySymbol;
		
		private static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder> selectSelf;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate settlementDate;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side side;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber socialSecurityNumber;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity sourceOrderQuantity;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status status;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce timeInForce;
		
		internal FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate tradeDate;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static WorkingOrder()
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder.selectSelf = new System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder>(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder.SelectFromSelf);
		}
		
		/// <summary>
		/// Creates a FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder.
		/// </summary>
		public WorkingOrder()
		{
			this.address1 = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1();
			this.address2 = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2();
			this.askPrice = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice();
			this.bidPrice = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice();
			this.blotter = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter();
			this.brokerMatch = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch();
			this.savingsBalance = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance();
			this.city = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City();
			this.collectionDate = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate();
			this.coupon = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon();
			this.createdBy = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy();
			this.createdTime = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime();
			this.creditCardIssuer = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer();
			this.originalAccountNumber = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber();
			this.crossing = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing();
			this.dateOfBirth = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth();
			this.dateOfDelinquency = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency();
			this.destinationOrderQuantity = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity();
			this.executionQuantity = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity();
			this.firstName = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName();
			this.hedgeMatch = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch();
			this.institutionMatch = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch();
			this.isEmployed = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed();
			this.lastName = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName();
			this.lastPrice = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice();
			this.postalCode = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode();
			this.maturityDate = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate();
			this.modifiedBy = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy();
			this.modifiedTime = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime();
			this.orderType = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType();
			this.accountBalance = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance();
			this.province = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province();
			this.securityName = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName();
			this.securitySymbol = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol();
			this.settlementDate = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate();
			this.side = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side();
			this.socialSecurityNumber = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber();
			this.sourceOrderQuantity = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity();
			this.status = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status();
			this.timeInForce = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce();
			this.tradeDate = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate();
			this.availableQuantity = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity();
			this.leavesQuantity = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity();
			this.marketValue = new FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue();
		}
		
		/// <summary>
		/// AccountBalance
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AccountBalance AccountBalance
		{
			get
			{
				return this.accountBalance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Address1
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address1 Address1
		{
			get
			{
				return this.address1;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Address2
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Address2 Address2
		{
			get
			{
				return this.address2;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// AskPrice
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AskPrice AskPrice
		{
			get
			{
				return this.askPrice;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// AvailableQuantity
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.AvailableQuantity AvailableQuantity
		{
			get
			{
				return this.availableQuantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// BidPrice
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BidPrice BidPrice
		{
			get
			{
				return this.bidPrice;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Blotter
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Blotter Blotter
		{
			get
			{
				return this.blotter;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// BrokerMatch
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.BrokerMatch BrokerMatch
		{
			get
			{
				return this.brokerMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// City
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.City City
		{
			get
			{
				return this.city;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// CollectionDate
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CollectionDate CollectionDate
		{
			get
			{
				return this.collectionDate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Coupon
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Coupon Coupon
		{
			get
			{
				return this.coupon;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// CreatedBy
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedBy CreatedBy
		{
			get
			{
				return this.createdBy;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// CreatedTime
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreatedTime CreatedTime
		{
			get
			{
				return this.createdTime;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// CreditCardIssuer
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.CreditCardIssuer CreditCardIssuer
		{
			get
			{
				return this.creditCardIssuer;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Crossing
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Crossing Crossing
		{
			get
			{
				return this.crossing;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// DateOfBirth
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfBirth DateOfBirth
		{
			get
			{
				return this.dateOfBirth;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// DateOfDelinquency
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DateOfDelinquency DateOfDelinquency
		{
			get
			{
				return this.dateOfDelinquency;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// DestinationOrderQuantity
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.DestinationOrderQuantity DestinationOrderQuantity
		{
			get
			{
				return this.destinationOrderQuantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// ExecutionQuantity
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ExecutionQuantity ExecutionQuantity
		{
			get
			{
				return this.executionQuantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// FirstName
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.FirstName FirstName
		{
			get
			{
				return this.firstName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// HedgeMatch
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.HedgeMatch HedgeMatch
		{
			get
			{
				return this.hedgeMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// InstitutionMatch
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.InstitutionMatch InstitutionMatch
		{
			get
			{
				return this.institutionMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsEmployed
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.IsEmployed IsEmployed
		{
			get
			{
				return this.isEmployed;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// LastName
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastName LastName
		{
			get
			{
				return this.lastName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// LastPrice
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LastPrice LastPrice
		{
			get
			{
				return this.lastPrice;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// LeavesQuantity
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.LeavesQuantity LeavesQuantity
		{
			get
			{
				return this.leavesQuantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// MarketValue
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MarketValue MarketValue
		{
			get
			{
				return this.marketValue;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// MaturityDate
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.MaturityDate MaturityDate
		{
			get
			{
				return this.maturityDate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// ModifiedBy
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedBy ModifiedBy
		{
			get
			{
				return this.modifiedBy;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// ModifiedTime
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.ModifiedTime ModifiedTime
		{
			get
			{
				return this.modifiedTime;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// OrderType
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OrderType OrderType
		{
			get
			{
				return this.orderType;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// OriginalAccountNumber
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.OriginalAccountNumber OriginalAccountNumber
		{
			get
			{
				return this.originalAccountNumber;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// PostalCode
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.PostalCode PostalCode
		{
			get
			{
				return this.postalCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Province
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Province Province
		{
			get
			{
				return this.province;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SavingsBalance
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SavingsBalance SavingsBalance
		{
			get
			{
				return this.savingsBalance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SecurityName
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecurityName SecurityName
		{
			get
			{
				return this.securityName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SecuritySymbol
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SecuritySymbol SecuritySymbol
		{
			get
			{
				return this.securitySymbol;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder, FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder.selectSelf;
			}
		}
		
		/// <summary>
		/// SettlementDate
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SettlementDate SettlementDate
		{
			get
			{
				return this.settlementDate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Side
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Side Side
		{
			get
			{
				return this.side;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SocialSecurityNumber
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SocialSecurityNumber SocialSecurityNumber
		{
			get
			{
				return this.socialSecurityNumber;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SourceOrderQuantity
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.SourceOrderQuantity SourceOrderQuantity
		{
			get
			{
				return this.sourceOrderQuantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Status
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.Status Status
		{
			get
			{
				return this.status;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// TimeInForce
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TimeInForce TimeInForce
		{
			get
			{
				return this.timeInForce;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// TradeDate
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.TradeDate TradeDate
		{
			get
			{
				return this.tradeDate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder workingOrder = ((FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder)(iContent));
			this.address1.Copy(workingOrder.address1);
			this.address2.Copy(workingOrder.address2);
			this.askPrice.Copy(workingOrder.askPrice);
			this.bidPrice.Copy(workingOrder.bidPrice);
			this.blotter.Copy(workingOrder.blotter);
			this.brokerMatch.Copy(workingOrder.brokerMatch);
			this.savingsBalance.Copy(workingOrder.savingsBalance);
			this.city.Copy(workingOrder.city);
			this.collectionDate.Copy(workingOrder.collectionDate);
			this.coupon.Copy(workingOrder.coupon);
			this.createdBy.Copy(workingOrder.createdBy);
			this.createdTime.Copy(workingOrder.createdTime);
			this.creditCardIssuer.Copy(workingOrder.creditCardIssuer);
			this.originalAccountNumber.Copy(workingOrder.originalAccountNumber);
			this.crossing.Copy(workingOrder.crossing);
			this.dateOfBirth.Copy(workingOrder.dateOfBirth);
			this.dateOfDelinquency.Copy(workingOrder.dateOfDelinquency);
			this.destinationOrderQuantity.Copy(workingOrder.destinationOrderQuantity);
			this.executionQuantity.Copy(workingOrder.executionQuantity);
			this.firstName.Copy(workingOrder.firstName);
			this.hedgeMatch.Copy(workingOrder.hedgeMatch);
			this.institutionMatch.Copy(workingOrder.institutionMatch);
			this.isEmployed.Copy(workingOrder.isEmployed);
			this.lastName.Copy(workingOrder.lastName);
			this.lastPrice.Copy(workingOrder.lastPrice);
			this.postalCode.Copy(workingOrder.postalCode);
			this.maturityDate.Copy(workingOrder.maturityDate);
			this.modifiedBy.Copy(workingOrder.modifiedBy);
			this.modifiedTime.Copy(workingOrder.modifiedTime);
			this.orderType.Copy(workingOrder.orderType);
			this.accountBalance.Copy(workingOrder.accountBalance);
			this.province.Copy(workingOrder.province);
			this.securityName.Copy(workingOrder.securityName);
			this.securitySymbol.Copy(workingOrder.securitySymbol);
			this.settlementDate.Copy(workingOrder.settlementDate);
			this.side.Copy(workingOrder.side);
			this.socialSecurityNumber.Copy(workingOrder.socialSecurityNumber);
			this.sourceOrderQuantity.Copy(workingOrder.sourceOrderQuantity);
			this.status.Copy(workingOrder.status);
			this.timeInForce.Copy(workingOrder.timeInForce);
			this.tradeDate.Copy(workingOrder.tradeDate);
			this.availableQuantity.Copy(workingOrder.availableQuantity);
			this.leavesQuantity.Copy(workingOrder.leavesQuantity);
			this.marketValue.Copy(workingOrder.marketValue);
		}
		
		/// <summary>
		/// Creates a FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder.
		/// </summary>
		public FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder Select(FluidTrade.Guardian.WorkingOrderRow workingOrderRow)
		{
			this.key = workingOrderRow;
PriceRow priceRow = DataModel.Price.PriceKey.Find(workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.SecurityId, workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SettlementId.SecurityId);
;
ConsumerDebtRow consumerDebtRow = DataModel.ConsumerDebt.ConsumerDebtKey.Find(workingOrderRow.SecurityId);
;
ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
;

						ConsumerRow consumerRow = consumerDebtRow != null ? consumerDebtRow.CreditCardRow.ConsumerRow :
						consumerTrustRow != null ? consumerTrustRow.ConsumerRow : null;

					;
decimal priceFactor = workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.PriceFactor;
;
decimal quantityFactor = workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.QuantityFactor;
;
			this.address1.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.address1.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.Address1Column);
			this.address1.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.Address1Column];
			this.address2.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.address2.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.Address2Column);
			this.address2.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.Address2Column];
			this.askPrice.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.askPrice.price = priceRow == null ? 0.0M : priceRow.AskPrice;
			this.bidPrice.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.bidPrice.price = priceRow == null ? 0.0M : priceRow.BidPrice;
			this.blotter.blotterId = workingOrderRow.BlotterId;
			this.blotter.name = workingOrderRow.BlotterRow.EntityRow.Name;
			this.blotter.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.brokerMatch.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.IsBrokerMatchColumn);
			this.brokerMatch.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.brokerMatch.isMatch = workingOrderRow.IsBrokerMatch;
			this.savingsBalance.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.savingsBalance.balance = consumerTrustRow == null ? null : consumerTrustRow[DataModel.ConsumerTrust.SavingsBalanceColumn];
			this.city.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.city.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.CityColumn);
			this.city.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.CityColumn];
			this.collectionDate.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.collectionDate.date = consumerDebtRow == null ? null : consumerDebtRow[DataModel.ConsumerDebt.CollectionDateColumn];
			this.coupon.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

							DebtRow debtRow0 = DataModel.Debt.DebtKey.Find(workingOrderRow.SecurityId);
			this.coupon.rate = 
							debtRow0 == null ? 0.0M : debtRow0.Coupon
						;
			this.createdBy.name = workingOrderRow.UserRow.RightsHolderRow.EntityRow.Name;
			this.createdBy.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.createdBy.userId = workingOrderRow.CreatedUserId;
			this.createdTime.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.createdTime.time = workingOrderRow.CreatedTime.ToLocalTime();
			this.creditCardIssuer.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.creditCardIssuer.name = consumerDebtRow == null ? System.String.Empty : consumerDebtRow.CreditCardRow.DebtHolder;
			this.originalAccountNumber.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.originalAccountNumber.number = consumerDebtRow == null ? System.String.Empty : consumerDebtRow.CreditCardRow.OriginalAccountNumber;
			this.crossing.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.CrossingIdColumn);
			this.crossing.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.crossing.isCrossing = workingOrderRow.CrossingRow.CrossingCode == FluidTrade.Guardian.Crossing.AlwaysMatch;
			this.dateOfBirth.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.dateOfBirth.date = consumerRow == null ? null : consumerRow[DataModel.Consumer.DateOfBirthColumn];
			this.dateOfDelinquency.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.dateOfDelinquency.date = consumerDebtRow == null ? null : consumerDebtRow[DataModel.ConsumerDebt.DateOfDelinquencyColumn];
			this.destinationOrderQuantity.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

							decimal destinationOrderQuantity = 0.0m;

							foreach (DestinationOrderRow destinationOrderRow in workingOrderRow.GetDestinationOrderRows())
							destinationOrderQuantity += destinationOrderRow.OrderedQuantity;
			this.destinationOrderQuantity.quantity = 
							destinationOrderQuantity / quantityFactor
						;
			this.executionQuantity.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

							decimal executionQuantity = 0.0m;

							foreach (DestinationOrderRow destinationOrderRow in workingOrderRow.GetDestinationOrderRows())
							foreach (ExecutionRow executionRow in destinationOrderRow.GetExecutionRows())
							executionQuantity += executionRow.ExecutionQuantity;
			this.executionQuantity.quantity = 
							executionQuantity / quantityFactor
						;
			this.firstName.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.firstName.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.FirstNameColumn);
			this.firstName.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.FirstNameColumn];
			this.hedgeMatch.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.IsHedgeMatchColumn);
			this.hedgeMatch.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.hedgeMatch.isMatch = workingOrderRow.IsHedgeMatch;
			this.institutionMatch.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.IsInstitutionMatchColumn);
			this.institutionMatch.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.institutionMatch.isMatch = workingOrderRow.IsInstitutionMatch;
			this.isEmployed.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.isEmployed.employed = consumerRow == null ? null : consumerRow[DataModel.Consumer.IsEmployedColumn];
			this.lastName.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.lastName.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.LastNameColumn);
			this.lastName.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.LastNameColumn];
			this.lastPrice.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.lastPrice.price = priceRow == null ? 0.0M : priceRow.LastPrice;
			this.postalCode.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.postalCode.code = consumerRow == null ? null : consumerRow[DataModel.Consumer.PostalCodeColumn];
			this.maturityDate.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

							DebtRow debtRow1 = DataModel.Debt.DebtKey.Find(workingOrderRow.SecurityId);
			this.maturityDate.date = 
							debtRow1 == null ? System.DateTime.MinValue : debtRow1.MaturityDate
						;
			this.modifiedBy.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.modifiedBy.name = "";
			this.modifiedBy.userId = workingOrderRow.ModifiedUserId;
			this.modifiedTime.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.modifiedTime.time = workingOrderRow.ModifiedTime.ToLocalTime();
			this.orderType.limitPrice = workingOrderRow.IsLimitPriceNull() ? 0.0M : workingOrderRow.LimitPrice;
			this.orderType.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.orderType.mnemonic = workingOrderRow.OrderTypeRow.Mnemonic;
			this.orderType.orderTypeCode = workingOrderRow.OrderTypeRow.OrderTypeCode;
			this.orderType.stopPrice = workingOrderRow.IsStopPriceNull() ? 0.0M : workingOrderRow.StopPrice;
			this.accountBalance.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.accountBalance.balance = consumerDebtRow == null ? null : consumerDebtRow.CreditCardRow[DataModel.CreditCard.AccountBalanceColumn];
			this.province.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.province.abbreviation = consumerRow != null && consumerRow.ProvinceRow != null ? consumerRow.ProvinceRow[DataModel.Province.AbbreviationColumn] : null;
			this.securityName.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.securityName.name = workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.EntityRow.Name;
			this.securitySymbol.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.securitySymbol.symbol = workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.Symbol;
			this.settlementDate.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.settlementDate.date = workingOrderRow.SettlementDate;
			this.side.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.side.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.SideIdColumn);
			this.side.description = workingOrderRow.SideRow.Description;
			this.side.mnemonic = workingOrderRow.SideRow.Mnemonic;
			this.side.sideCode = workingOrderRow.SideRow.SideCode;
			this.socialSecurityNumber.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.socialSecurityNumber.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.SocialSecurityNumberColumn);
			this.socialSecurityNumber.number = consumerRow == null ? null : consumerRow[DataModel.Consumer.SocialSecurityNumberColumn];
			this.sourceOrderQuantity.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

							decimal sourceOrderQuantity = 0.0m;

							foreach (SourceOrderRow sourceOrderRow in workingOrderRow.GetSourceOrderRows())
							sourceOrderQuantity += sourceOrderRow.OrderedQuantity;
			this.sourceOrderQuantity.quantity = 
							sourceOrderQuantity / quantityFactor
						;
			this.status.mnemonic = workingOrderRow.StatusRow.Mnemonic;
			this.status.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.status.statusCode = workingOrderRow.StatusRow.StatusCode;
			this.timeInForce.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.timeInForce.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.TimeInForceIdColumn);
			this.timeInForce.timeInForceCode = workingOrderRow.TimeInForceRow.TimeInForceCode;
			this.tradeDate.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.tradeDate.date = workingOrderRow.TradeDate;
			this.availableQuantity.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.availableQuantity.quantity = this.SourceOrderQuantity.Quantity - this.DestinationOrderQuantity.Quantity;
			this.leavesQuantity.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.leavesQuantity.quantity = this.DestinationOrderQuantity.Quantity - this.ExecutionQuantity.Quantity;
			this.marketValue.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.marketValue.value = priceRow == null ? 0.0M : this.SourceOrderQuantity.Quantity * quantityFactor * priceRow.LastPrice;
			return this;
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder SelectFromSelf(FluidTrade.Guardian.Schema.ConsumerTrustWorkingOrder.WorkingOrder workingOrder)
		{
			return workingOrder;
		}
	}
}
