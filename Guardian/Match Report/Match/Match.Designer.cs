//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-fluidtrade-com:guardian:match", "FluidTrade.Guardian.Schema.Match")]

namespace FluidTrade.Guardian.Schema.Match
{
	
	
	/// <summary>
	/// This class provides the Address1 data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Address1 : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.Address1, FluidTrade.Guardian.Schema.Match.Address1> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Address1()
		{
			FluidTrade.Guardian.Schema.Match.Address1.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.Address1, FluidTrade.Guardian.Schema.Match.Address1>(FluidTrade.Guardian.Schema.Match.Address1.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.Address1 records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.Address1, FluidTrade.Guardian.Schema.Match.Address1> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.Address1.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.Address1 to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.Address1 address1 = ((FluidTrade.Guardian.Schema.Match.Address1)(iContent));
			if ((this.isActive != address1.isActive))
			{
				this.isActive = address1.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != address1.text))
			{
				this.text = address1.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.Address1 SelectFromSelf(FluidTrade.Guardian.Schema.Match.Address1 address1)
		{
			return address1;
		}
	}
	
	/// <summary>
	/// This class provides the Address2 data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Address2 : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.Address2, FluidTrade.Guardian.Schema.Match.Address2> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Address2()
		{
			FluidTrade.Guardian.Schema.Match.Address2.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.Address2, FluidTrade.Guardian.Schema.Match.Address2>(FluidTrade.Guardian.Schema.Match.Address2.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.Address2 records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.Address2, FluidTrade.Guardian.Schema.Match.Address2> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.Address2.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.Address2 to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.Address2 address2 = ((FluidTrade.Guardian.Schema.Match.Address2)(iContent));
			if ((this.isActive != address2.isActive))
			{
				this.isActive = address2.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != address2.text))
			{
				this.text = address2.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.Address2 SelectFromSelf(FluidTrade.Guardian.Schema.Match.Address2 address2)
		{
			return address2;
		}
	}
	
	/// <summary>
	/// This class provides the Blotter data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Blotter : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.Guid blotterId;
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.Blotter, FluidTrade.Guardian.Schema.Match.Blotter> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Blotter()
		{
			FluidTrade.Guardian.Schema.Match.Blotter.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.Blotter, FluidTrade.Guardian.Schema.Match.Blotter>(FluidTrade.Guardian.Schema.Match.Blotter.SelectFromSelf);
		}
		
		/// <summary>
		/// BlotterId
		/// </summary>
		public System.Guid BlotterId
		{
			get
			{
				return this.blotterId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.Blotter records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.Blotter, FluidTrade.Guardian.Schema.Match.Blotter> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.Blotter.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.Blotter to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.Blotter blotter = ((FluidTrade.Guardian.Schema.Match.Blotter)(iContent));
			if ((this.blotterId != blotter.blotterId))
			{
				this.blotterId = blotter.blotterId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("BlotterId"));
				}
			}
			if ((this.name != blotter.name))
			{
				this.name = blotter.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
			if ((this.isActive != blotter.isActive))
			{
				this.isActive = blotter.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.Blotter SelectFromSelf(FluidTrade.Guardian.Schema.Match.Blotter blotter)
		{
			return blotter;
		}
	}
	
	/// <summary>
	/// This class provides the City data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class City : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.City, FluidTrade.Guardian.Schema.Match.City> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static City()
		{
			FluidTrade.Guardian.Schema.Match.City.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.City, FluidTrade.Guardian.Schema.Match.City>(FluidTrade.Guardian.Schema.Match.City.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.City records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.City, FluidTrade.Guardian.Schema.Match.City> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.City.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.City to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.City city = ((FluidTrade.Guardian.Schema.Match.City)(iContent));
			if ((this.isActive != city.isActive))
			{
				this.isActive = city.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != city.text))
			{
				this.text = city.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.City SelectFromSelf(FluidTrade.Guardian.Schema.Match.City city)
		{
			return city;
		}
	}
	
	/// <summary>
	/// This class provides the CollectionDate data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class CollectionDate : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.CollectionDate, FluidTrade.Guardian.Schema.Match.CollectionDate> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CollectionDate()
		{
			FluidTrade.Guardian.Schema.Match.CollectionDate.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.CollectionDate, FluidTrade.Guardian.Schema.Match.CollectionDate>(FluidTrade.Guardian.Schema.Match.CollectionDate.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public object Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.CollectionDate records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.CollectionDate, FluidTrade.Guardian.Schema.Match.CollectionDate> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.CollectionDate.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.CollectionDate to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.CollectionDate collectionDate = ((FluidTrade.Guardian.Schema.Match.CollectionDate)(iContent));
			if ((this.isActive != collectionDate.isActive))
			{
				this.isActive = collectionDate.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.date != collectionDate.date))
			{
				this.date = collectionDate.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.CollectionDate SelectFromSelf(FluidTrade.Guardian.Schema.Match.CollectionDate collectionDate)
		{
			return collectionDate;
		}
	}
	
	/// <summary>
	/// This class provides the ContraOrder data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class ContraOrder : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.Guid contraOrderId;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.ContraOrder, FluidTrade.Guardian.Schema.Match.ContraOrder> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static ContraOrder()
		{
			FluidTrade.Guardian.Schema.Match.ContraOrder.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.ContraOrder, FluidTrade.Guardian.Schema.Match.ContraOrder>(FluidTrade.Guardian.Schema.Match.ContraOrder.SelectFromSelf);
		}
		
		/// <summary>
		/// ContraOrderId
		/// </summary>
		public System.Guid ContraOrderId
		{
			get
			{
				return this.contraOrderId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.ContraOrder records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.ContraOrder, FluidTrade.Guardian.Schema.Match.ContraOrder> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.ContraOrder.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.ContraOrder to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.ContraOrder contraOrder = ((FluidTrade.Guardian.Schema.Match.ContraOrder)(iContent));
			if ((this.contraOrderId != contraOrder.contraOrderId))
			{
				this.contraOrderId = contraOrder.contraOrderId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("ContraOrderId"));
				}
			}
			if ((this.isActive != contraOrder.isActive))
			{
				this.isActive = contraOrder.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.ContraOrder SelectFromSelf(FluidTrade.Guardian.Schema.Match.ContraOrder contraOrder)
		{
			return contraOrder;
		}
	}
	
	/// <summary>
	/// This class provides the Coupon data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Coupon : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal rate;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.Coupon, FluidTrade.Guardian.Schema.Match.Coupon> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Coupon()
		{
			FluidTrade.Guardian.Schema.Match.Coupon.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.Coupon, FluidTrade.Guardian.Schema.Match.Coupon>(FluidTrade.Guardian.Schema.Match.Coupon.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Rate
		/// </summary>
		public decimal Rate
		{
			get
			{
				return this.rate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.Coupon records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.Coupon, FluidTrade.Guardian.Schema.Match.Coupon> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.Coupon.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.Coupon to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.Coupon coupon = ((FluidTrade.Guardian.Schema.Match.Coupon)(iContent));
			if ((this.isActive != coupon.isActive))
			{
				this.isActive = coupon.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.rate != coupon.rate))
			{
				this.rate = coupon.rate;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Rate"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.Coupon SelectFromSelf(FluidTrade.Guardian.Schema.Match.Coupon coupon)
		{
			return coupon;
		}
	}
	
	/// <summary>
	/// This class provides the CreditCardBalance data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class CreditCardBalance : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object balance;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.CreditCardBalance, FluidTrade.Guardian.Schema.Match.CreditCardBalance> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CreditCardBalance()
		{
			FluidTrade.Guardian.Schema.Match.CreditCardBalance.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.CreditCardBalance, FluidTrade.Guardian.Schema.Match.CreditCardBalance>(FluidTrade.Guardian.Schema.Match.CreditCardBalance.SelectFromSelf);
		}
		
		/// <summary>
		/// Balance
		/// </summary>
		public object Balance
		{
			get
			{
				return this.balance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.CreditCardBalance records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.CreditCardBalance, FluidTrade.Guardian.Schema.Match.CreditCardBalance> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.CreditCardBalance.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.CreditCardBalance to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.CreditCardBalance creditCardBalance = ((FluidTrade.Guardian.Schema.Match.CreditCardBalance)(iContent));
			if ((this.isActive != creditCardBalance.isActive))
			{
				this.isActive = creditCardBalance.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.balance != creditCardBalance.balance))
			{
				this.balance = creditCardBalance.balance;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Balance"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.CreditCardBalance SelectFromSelf(FluidTrade.Guardian.Schema.Match.CreditCardBalance creditCardBalance)
		{
			return creditCardBalance;
		}
	}
	
	/// <summary>
	/// This class provides the MatchedTime data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class MatchedTime : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.MatchedTime, FluidTrade.Guardian.Schema.Match.MatchedTime> selectSelf;
		
		internal System.DateTime time;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static MatchedTime()
		{
			FluidTrade.Guardian.Schema.Match.MatchedTime.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.MatchedTime, FluidTrade.Guardian.Schema.Match.MatchedTime>(FluidTrade.Guardian.Schema.Match.MatchedTime.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.MatchedTime records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.MatchedTime, FluidTrade.Guardian.Schema.Match.MatchedTime> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.MatchedTime.selectSelf;
			}
		}
		
		/// <summary>
		/// Time
		/// </summary>
		public System.DateTime Time
		{
			get
			{
				return this.time;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.MatchedTime to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.MatchedTime matchedTime = ((FluidTrade.Guardian.Schema.Match.MatchedTime)(iContent));
			if ((this.isActive != matchedTime.isActive))
			{
				this.isActive = matchedTime.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.time != matchedTime.time))
			{
				this.time = matchedTime.time;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Time"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.MatchedTime SelectFromSelf(FluidTrade.Guardian.Schema.Match.MatchedTime matchedTime)
		{
			return matchedTime;
		}
	}
	
	/// <summary>
	/// This class provides the CreditCardIssuer data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class CreditCardIssuer : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.CreditCardIssuer, FluidTrade.Guardian.Schema.Match.CreditCardIssuer> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CreditCardIssuer()
		{
			FluidTrade.Guardian.Schema.Match.CreditCardIssuer.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.CreditCardIssuer, FluidTrade.Guardian.Schema.Match.CreditCardIssuer>(FluidTrade.Guardian.Schema.Match.CreditCardIssuer.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.CreditCardIssuer records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.CreditCardIssuer, FluidTrade.Guardian.Schema.Match.CreditCardIssuer> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.CreditCardIssuer.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.CreditCardIssuer to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.CreditCardIssuer creditCardIssuer = ((FluidTrade.Guardian.Schema.Match.CreditCardIssuer)(iContent));
			if ((this.isActive != creditCardIssuer.isActive))
			{
				this.isActive = creditCardIssuer.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != creditCardIssuer.name))
			{
				this.name = creditCardIssuer.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.CreditCardIssuer SelectFromSelf(FluidTrade.Guardian.Schema.Match.CreditCardIssuer creditCardIssuer)
		{
			return creditCardIssuer;
		}
	}
	
	/// <summary>
	/// This class provides the OriginalAccountNumber data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class OriginalAccountNumber : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string number;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.OriginalAccountNumber, FluidTrade.Guardian.Schema.Match.OriginalAccountNumber> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static OriginalAccountNumber()
		{
			FluidTrade.Guardian.Schema.Match.OriginalAccountNumber.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.OriginalAccountNumber, FluidTrade.Guardian.Schema.Match.OriginalAccountNumber>(FluidTrade.Guardian.Schema.Match.OriginalAccountNumber.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Number
		/// </summary>
		public string Number
		{
			get
			{
				return this.number;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.OriginalAccountNumber records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.OriginalAccountNumber, FluidTrade.Guardian.Schema.Match.OriginalAccountNumber> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.OriginalAccountNumber.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.OriginalAccountNumber to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.OriginalAccountNumber originalAccountNumber = ((FluidTrade.Guardian.Schema.Match.OriginalAccountNumber)(iContent));
			if ((this.isActive != originalAccountNumber.isActive))
			{
				this.isActive = originalAccountNumber.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.number != originalAccountNumber.number))
			{
				this.number = originalAccountNumber.number;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Number"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.OriginalAccountNumber SelectFromSelf(FluidTrade.Guardian.Schema.Match.OriginalAccountNumber originalAccountNumber)
		{
			return originalAccountNumber;
		}
	}
	
	/// <summary>
	/// This class provides the DateOfBirth data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class DateOfBirth : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.DateOfBirth, FluidTrade.Guardian.Schema.Match.DateOfBirth> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static DateOfBirth()
		{
			FluidTrade.Guardian.Schema.Match.DateOfBirth.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.DateOfBirth, FluidTrade.Guardian.Schema.Match.DateOfBirth>(FluidTrade.Guardian.Schema.Match.DateOfBirth.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public object Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.DateOfBirth records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.DateOfBirth, FluidTrade.Guardian.Schema.Match.DateOfBirth> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.DateOfBirth.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.DateOfBirth to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.DateOfBirth dateOfBirth = ((FluidTrade.Guardian.Schema.Match.DateOfBirth)(iContent));
			if ((this.isActive != dateOfBirth.isActive))
			{
				this.isActive = dateOfBirth.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.date != dateOfBirth.date))
			{
				this.date = dateOfBirth.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.DateOfBirth SelectFromSelf(FluidTrade.Guardian.Schema.Match.DateOfBirth dateOfBirth)
		{
			return dateOfBirth;
		}
	}
	
	/// <summary>
	/// This class provides the DateOfDelinquency data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class DateOfDelinquency : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.DateOfDelinquency, FluidTrade.Guardian.Schema.Match.DateOfDelinquency> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static DateOfDelinquency()
		{
			FluidTrade.Guardian.Schema.Match.DateOfDelinquency.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.DateOfDelinquency, FluidTrade.Guardian.Schema.Match.DateOfDelinquency>(FluidTrade.Guardian.Schema.Match.DateOfDelinquency.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public object Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.DateOfDelinquency records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.DateOfDelinquency, FluidTrade.Guardian.Schema.Match.DateOfDelinquency> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.DateOfDelinquency.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.DateOfDelinquency to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.DateOfDelinquency dateOfDelinquency = ((FluidTrade.Guardian.Schema.Match.DateOfDelinquency)(iContent));
			if ((this.isActive != dateOfDelinquency.isActive))
			{
				this.isActive = dateOfDelinquency.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.date != dateOfDelinquency.date))
			{
				this.date = dateOfDelinquency.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.DateOfDelinquency SelectFromSelf(FluidTrade.Guardian.Schema.Match.DateOfDelinquency dateOfDelinquency)
		{
			return dateOfDelinquency;
		}
	}
	
	/// <summary>
	/// This class provides the FirstName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class FirstName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object name;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.FirstName, FluidTrade.Guardian.Schema.Match.FirstName> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static FirstName()
		{
			FluidTrade.Guardian.Schema.Match.FirstName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.FirstName, FluidTrade.Guardian.Schema.Match.FirstName>(FluidTrade.Guardian.Schema.Match.FirstName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.FirstName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.FirstName, FluidTrade.Guardian.Schema.Match.FirstName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.FirstName.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.FirstName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.FirstName firstName = ((FluidTrade.Guardian.Schema.Match.FirstName)(iContent));
			if ((this.isActive != firstName.isActive))
			{
				this.isActive = firstName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != firstName.name))
			{
				this.name = firstName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.FirstName SelectFromSelf(FluidTrade.Guardian.Schema.Match.FirstName firstName)
		{
			return firstName;
		}
	}
	
	/// <summary>
	/// This class provides the HeatIndex data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class HeatIndex : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal decimal index;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.HeatIndex, FluidTrade.Guardian.Schema.Match.HeatIndex> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static HeatIndex()
		{
			FluidTrade.Guardian.Schema.Match.HeatIndex.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.HeatIndex, FluidTrade.Guardian.Schema.Match.HeatIndex>(FluidTrade.Guardian.Schema.Match.HeatIndex.SelectFromSelf);
		}
		
		/// <summary>
		/// Index
		/// </summary>
		public decimal Index
		{
			get
			{
				return this.index;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.HeatIndex records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.HeatIndex, FluidTrade.Guardian.Schema.Match.HeatIndex> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.HeatIndex.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.HeatIndex to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.HeatIndex heatIndex = ((FluidTrade.Guardian.Schema.Match.HeatIndex)(iContent));
			if ((this.isActive != heatIndex.isActive))
			{
				this.isActive = heatIndex.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.index != heatIndex.index))
			{
				this.index = heatIndex.index;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.HeatIndex SelectFromSelf(FluidTrade.Guardian.Schema.Match.HeatIndex heatIndex)
		{
			return heatIndex;
		}
	}
	
	/// <summary>
	/// This class provides the IsEmployed data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class IsEmployed : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object employed;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.IsEmployed, FluidTrade.Guardian.Schema.Match.IsEmployed> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static IsEmployed()
		{
			FluidTrade.Guardian.Schema.Match.IsEmployed.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.IsEmployed, FluidTrade.Guardian.Schema.Match.IsEmployed>(FluidTrade.Guardian.Schema.Match.IsEmployed.SelectFromSelf);
		}
		
		/// <summary>
		/// Employed
		/// </summary>
		public object Employed
		{
			get
			{
				return this.employed;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.IsEmployed records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.IsEmployed, FluidTrade.Guardian.Schema.Match.IsEmployed> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.IsEmployed.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.IsEmployed to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.IsEmployed isEmployed = ((FluidTrade.Guardian.Schema.Match.IsEmployed)(iContent));
			if ((this.isActive != isEmployed.isActive))
			{
				this.isActive = isEmployed.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.employed != isEmployed.employed))
			{
				this.employed = isEmployed.employed;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Employed"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.IsEmployed SelectFromSelf(FluidTrade.Guardian.Schema.Match.IsEmployed isEmployed)
		{
			return isEmployed;
		}
	}
	
	/// <summary>
	/// This class provides the LastName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class LastName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object name;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.LastName, FluidTrade.Guardian.Schema.Match.LastName> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static LastName()
		{
			FluidTrade.Guardian.Schema.Match.LastName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.LastName, FluidTrade.Guardian.Schema.Match.LastName>(FluidTrade.Guardian.Schema.Match.LastName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.LastName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.LastName, FluidTrade.Guardian.Schema.Match.LastName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.LastName.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.LastName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.LastName lastName = ((FluidTrade.Guardian.Schema.Match.LastName)(iContent));
			if ((this.isActive != lastName.isActive))
			{
				this.isActive = lastName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != lastName.name))
			{
				this.name = lastName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.LastName SelectFromSelf(FluidTrade.Guardian.Schema.Match.LastName lastName)
		{
			return lastName;
		}
	}
	
	/// <summary>
	/// This class provides the LastPrice data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class LastPrice : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal price;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.LastPrice, FluidTrade.Guardian.Schema.Match.LastPrice> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static LastPrice()
		{
			FluidTrade.Guardian.Schema.Match.LastPrice.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.LastPrice, FluidTrade.Guardian.Schema.Match.LastPrice>(FluidTrade.Guardian.Schema.Match.LastPrice.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Price
		/// </summary>
		public decimal Price
		{
			get
			{
				return this.price;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.LastPrice records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.LastPrice, FluidTrade.Guardian.Schema.Match.LastPrice> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.LastPrice.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.LastPrice to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.LastPrice lastPrice = ((FluidTrade.Guardian.Schema.Match.LastPrice)(iContent));
			if ((this.isActive != lastPrice.isActive))
			{
				this.isActive = lastPrice.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.price != lastPrice.price))
			{
				this.price = lastPrice.price;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Price"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.LastPrice SelectFromSelf(FluidTrade.Guardian.Schema.Match.LastPrice lastPrice)
		{
			return lastPrice;
		}
	}
	
	/// <summary>
	/// This class provides the PostalCode data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class PostalCode : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object code;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.PostalCode, FluidTrade.Guardian.Schema.Match.PostalCode> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static PostalCode()
		{
			FluidTrade.Guardian.Schema.Match.PostalCode.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.PostalCode, FluidTrade.Guardian.Schema.Match.PostalCode>(FluidTrade.Guardian.Schema.Match.PostalCode.SelectFromSelf);
		}
		
		/// <summary>
		/// Code
		/// </summary>
		public object Code
		{
			get
			{
				return this.code;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.PostalCode records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.PostalCode, FluidTrade.Guardian.Schema.Match.PostalCode> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.PostalCode.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.PostalCode to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.PostalCode postalCode = ((FluidTrade.Guardian.Schema.Match.PostalCode)(iContent));
			if ((this.isActive != postalCode.isActive))
			{
				this.isActive = postalCode.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.code != postalCode.code))
			{
				this.code = postalCode.code;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Code"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.PostalCode SelectFromSelf(FluidTrade.Guardian.Schema.Match.PostalCode postalCode)
		{
			return postalCode;
		}
	}
	
	/// <summary>
	/// This class provides the MaturityDate data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class MaturityDate : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.DateTime date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.MaturityDate, FluidTrade.Guardian.Schema.Match.MaturityDate> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static MaturityDate()
		{
			FluidTrade.Guardian.Schema.Match.MaturityDate.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.MaturityDate, FluidTrade.Guardian.Schema.Match.MaturityDate>(FluidTrade.Guardian.Schema.Match.MaturityDate.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public System.DateTime Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.MaturityDate records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.MaturityDate, FluidTrade.Guardian.Schema.Match.MaturityDate> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.MaturityDate.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.MaturityDate to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.MaturityDate maturityDate = ((FluidTrade.Guardian.Schema.Match.MaturityDate)(iContent));
			if ((this.isActive != maturityDate.isActive))
			{
				this.isActive = maturityDate.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.date != maturityDate.date))
			{
				this.date = maturityDate.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.MaturityDate SelectFromSelf(FluidTrade.Guardian.Schema.Match.MaturityDate maturityDate)
		{
			return maturityDate;
		}
	}
	
	/// <summary>
	/// This class provides the AccountBalance data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class AccountBalance : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object balance;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.AccountBalance, FluidTrade.Guardian.Schema.Match.AccountBalance> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static AccountBalance()
		{
			FluidTrade.Guardian.Schema.Match.AccountBalance.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.AccountBalance, FluidTrade.Guardian.Schema.Match.AccountBalance>(FluidTrade.Guardian.Schema.Match.AccountBalance.SelectFromSelf);
		}
		
		/// <summary>
		/// Balance
		/// </summary>
		public object Balance
		{
			get
			{
				return this.balance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.AccountBalance records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.AccountBalance, FluidTrade.Guardian.Schema.Match.AccountBalance> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.AccountBalance.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.AccountBalance to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.AccountBalance accountBalance = ((FluidTrade.Guardian.Schema.Match.AccountBalance)(iContent));
			if ((this.isActive != accountBalance.isActive))
			{
				this.isActive = accountBalance.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.balance != accountBalance.balance))
			{
				this.balance = accountBalance.balance;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Balance"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.AccountBalance SelectFromSelf(FluidTrade.Guardian.Schema.Match.AccountBalance accountBalance)
		{
			return accountBalance;
		}
	}
	
	/// <summary>
	/// This class provides the Province data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Province : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object abbreviation;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.Province, FluidTrade.Guardian.Schema.Match.Province> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Province()
		{
			FluidTrade.Guardian.Schema.Match.Province.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.Province, FluidTrade.Guardian.Schema.Match.Province>(FluidTrade.Guardian.Schema.Match.Province.SelectFromSelf);
		}
		
		/// <summary>
		/// Abbreviation
		/// </summary>
		public object Abbreviation
		{
			get
			{
				return this.abbreviation;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.Province records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.Province, FluidTrade.Guardian.Schema.Match.Province> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.Province.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.Province to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.Province province = ((FluidTrade.Guardian.Schema.Match.Province)(iContent));
			if ((this.isActive != province.isActive))
			{
				this.isActive = province.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.abbreviation != province.abbreviation))
			{
				this.abbreviation = province.abbreviation;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Abbreviation"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.Province SelectFromSelf(FluidTrade.Guardian.Schema.Match.Province province)
		{
			return province;
		}
	}
	
	/// <summary>
	/// This class provides the SavingsBalance data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SavingsBalance : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object balance;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.SavingsBalance, FluidTrade.Guardian.Schema.Match.SavingsBalance> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SavingsBalance()
		{
			FluidTrade.Guardian.Schema.Match.SavingsBalance.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.SavingsBalance, FluidTrade.Guardian.Schema.Match.SavingsBalance>(FluidTrade.Guardian.Schema.Match.SavingsBalance.SelectFromSelf);
		}
		
		/// <summary>
		/// Balance
		/// </summary>
		public object Balance
		{
			get
			{
				return this.balance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.SavingsBalance records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.SavingsBalance, FluidTrade.Guardian.Schema.Match.SavingsBalance> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.SavingsBalance.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.SavingsBalance to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.SavingsBalance savingsBalance = ((FluidTrade.Guardian.Schema.Match.SavingsBalance)(iContent));
			if ((this.isActive != savingsBalance.isActive))
			{
				this.isActive = savingsBalance.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.balance != savingsBalance.balance))
			{
				this.balance = savingsBalance.balance;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Balance"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.SavingsBalance SelectFromSelf(FluidTrade.Guardian.Schema.Match.SavingsBalance savingsBalance)
		{
			return savingsBalance;
		}
	}
	
	/// <summary>
	/// This class provides the SecuritySymbol data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SecuritySymbol : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.SecuritySymbol, FluidTrade.Guardian.Schema.Match.SecuritySymbol> selectSelf;
		
		internal string symbol;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SecuritySymbol()
		{
			FluidTrade.Guardian.Schema.Match.SecuritySymbol.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.SecuritySymbol, FluidTrade.Guardian.Schema.Match.SecuritySymbol>(FluidTrade.Guardian.Schema.Match.SecuritySymbol.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.SecuritySymbol records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.SecuritySymbol, FluidTrade.Guardian.Schema.Match.SecuritySymbol> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.SecuritySymbol.selectSelf;
			}
		}
		
		/// <summary>
		/// Symbol
		/// </summary>
		public string Symbol
		{
			get
			{
				return this.symbol;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.SecuritySymbol to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.SecuritySymbol securitySymbol = ((FluidTrade.Guardian.Schema.Match.SecuritySymbol)(iContent));
			if ((this.isActive != securitySymbol.isActive))
			{
				this.isActive = securitySymbol.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.symbol != securitySymbol.symbol))
			{
				this.symbol = securitySymbol.symbol;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Symbol"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.SecuritySymbol SelectFromSelf(FluidTrade.Guardian.Schema.Match.SecuritySymbol securitySymbol)
		{
			return securitySymbol;
		}
	}
	
	/// <summary>
	/// This class provides the SecurityName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SecurityName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.SecurityName, FluidTrade.Guardian.Schema.Match.SecurityName> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SecurityName()
		{
			FluidTrade.Guardian.Schema.Match.SecurityName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.SecurityName, FluidTrade.Guardian.Schema.Match.SecurityName>(FluidTrade.Guardian.Schema.Match.SecurityName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.SecurityName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.SecurityName, FluidTrade.Guardian.Schema.Match.SecurityName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.SecurityName.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.SecurityName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.SecurityName securityName = ((FluidTrade.Guardian.Schema.Match.SecurityName)(iContent));
			if ((this.isActive != securityName.isActive))
			{
				this.isActive = securityName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != securityName.name))
			{
				this.name = securityName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.SecurityName SelectFromSelf(FluidTrade.Guardian.Schema.Match.SecurityName securityName)
		{
			return securityName;
		}
	}
	
	/// <summary>
	/// This class provides the Side data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Side : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string mnemonic;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.Side, FluidTrade.Guardian.Schema.Match.Side> selectSelf;
		
		internal FluidTrade.Core.Side sideCode;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Side()
		{
			FluidTrade.Guardian.Schema.Match.Side.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.Side, FluidTrade.Guardian.Schema.Match.Side>(FluidTrade.Guardian.Schema.Match.Side.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Mnemonic
		/// </summary>
		public string Mnemonic
		{
			get
			{
				return this.mnemonic;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.Side records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.Side, FluidTrade.Guardian.Schema.Match.Side> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.Side.selectSelf;
			}
		}
		
		/// <summary>
		/// SideCode
		/// </summary>
		public FluidTrade.Core.Side SideCode
		{
			get
			{
				return this.sideCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.Side to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.Side side = ((FluidTrade.Guardian.Schema.Match.Side)(iContent));
			if ((this.isActive != side.isActive))
			{
				this.isActive = side.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.mnemonic != side.mnemonic))
			{
				this.mnemonic = side.mnemonic;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Mnemonic"));
				}
			}
			if ((this.sideCode != side.sideCode))
			{
				this.sideCode = side.sideCode;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("SideCode"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.Side SelectFromSelf(FluidTrade.Guardian.Schema.Match.Side side)
		{
			return side;
		}
	}
	
	/// <summary>
	/// This class provides the SocialSecurityNumber data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SocialSecurityNumber : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object number;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.SocialSecurityNumber, FluidTrade.Guardian.Schema.Match.SocialSecurityNumber> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SocialSecurityNumber()
		{
			FluidTrade.Guardian.Schema.Match.SocialSecurityNumber.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.SocialSecurityNumber, FluidTrade.Guardian.Schema.Match.SocialSecurityNumber>(FluidTrade.Guardian.Schema.Match.SocialSecurityNumber.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Number
		/// </summary>
		public object Number
		{
			get
			{
				return this.number;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.SocialSecurityNumber records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.SocialSecurityNumber, FluidTrade.Guardian.Schema.Match.SocialSecurityNumber> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.SocialSecurityNumber.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.SocialSecurityNumber to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.SocialSecurityNumber socialSecurityNumber = ((FluidTrade.Guardian.Schema.Match.SocialSecurityNumber)(iContent));
			if ((this.isActive != socialSecurityNumber.isActive))
			{
				this.isActive = socialSecurityNumber.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.number != socialSecurityNumber.number))
			{
				this.number = socialSecurityNumber.number;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Number"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.SocialSecurityNumber SelectFromSelf(FluidTrade.Guardian.Schema.Match.SocialSecurityNumber socialSecurityNumber)
		{
			return socialSecurityNumber;
		}
	}
	
	/// <summary>
	/// This class provides the Status data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Status : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string mnemonic;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.Status, FluidTrade.Guardian.Schema.Match.Status> selectSelf;
		
		internal FluidTrade.Guardian.Status statusCode;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Status()
		{
			FluidTrade.Guardian.Schema.Match.Status.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.Status, FluidTrade.Guardian.Schema.Match.Status>(FluidTrade.Guardian.Schema.Match.Status.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Mnemonic
		/// </summary>
		public string Mnemonic
		{
			get
			{
				return this.mnemonic;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.Status records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.Status, FluidTrade.Guardian.Schema.Match.Status> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.Status.selectSelf;
			}
		}
		
		/// <summary>
		/// StatusCode
		/// </summary>
		public FluidTrade.Guardian.Status StatusCode
		{
			get
			{
				return this.statusCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.Status to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.Status status = ((FluidTrade.Guardian.Schema.Match.Status)(iContent));
			if ((this.mnemonic != status.mnemonic))
			{
				this.mnemonic = status.mnemonic;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Mnemonic"));
				}
			}
			if ((this.isActive != status.isActive))
			{
				this.isActive = status.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.statusCode != status.statusCode))
			{
				this.statusCode = status.statusCode;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("StatusCode"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.Status SelectFromSelf(FluidTrade.Guardian.Schema.Match.Status status)
		{
			return status;
		}
	}
	
	/// <summary>
	/// This class provides the SubmittedQuantity data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SubmittedQuantity : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal quantity;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.SubmittedQuantity, FluidTrade.Guardian.Schema.Match.SubmittedQuantity> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SubmittedQuantity()
		{
			FluidTrade.Guardian.Schema.Match.SubmittedQuantity.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.SubmittedQuantity, FluidTrade.Guardian.Schema.Match.SubmittedQuantity>(FluidTrade.Guardian.Schema.Match.SubmittedQuantity.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Quantity
		/// </summary>
		public decimal Quantity
		{
			get
			{
				return this.quantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.SubmittedQuantity records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.SubmittedQuantity, FluidTrade.Guardian.Schema.Match.SubmittedQuantity> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.SubmittedQuantity.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.SubmittedQuantity to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.SubmittedQuantity submittedQuantity = ((FluidTrade.Guardian.Schema.Match.SubmittedQuantity)(iContent));
			if ((this.isActive != submittedQuantity.isActive))
			{
				this.isActive = submittedQuantity.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.quantity != submittedQuantity.quantity))
			{
				this.quantity = submittedQuantity.quantity;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Quantity"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.SubmittedQuantity SelectFromSelf(FluidTrade.Guardian.Schema.Match.SubmittedQuantity submittedQuantity)
		{
			return submittedQuantity;
		}
	}
	
	/// <summary>
	/// This class provides the TimeLeft data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class TimeLeft : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.TimeLeft, FluidTrade.Guardian.Schema.Match.TimeLeft> selectSelf;
		
		internal double time;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static TimeLeft()
		{
			FluidTrade.Guardian.Schema.Match.TimeLeft.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.TimeLeft, FluidTrade.Guardian.Schema.Match.TimeLeft>(FluidTrade.Guardian.Schema.Match.TimeLeft.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.TimeLeft records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.TimeLeft, FluidTrade.Guardian.Schema.Match.TimeLeft> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.TimeLeft.selectSelf;
			}
		}
		
		/// <summary>
		/// Time
		/// </summary>
		public double Time
		{
			get
			{
				return this.time;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.TimeLeft to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.TimeLeft timeLeft = ((FluidTrade.Guardian.Schema.Match.TimeLeft)(iContent));
			if ((this.time != timeLeft.time))
			{
				this.time = timeLeft.time;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Time"));
				}
			}
			if ((this.isActive != timeLeft.isActive))
			{
				this.isActive = timeLeft.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.TimeLeft SelectFromSelf(FluidTrade.Guardian.Schema.Match.TimeLeft timeLeft)
		{
			return timeLeft;
		}
	}
	
	/// <summary>
	/// This class provides the WorkingOrder data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class WorkingOrder : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.WorkingOrder, FluidTrade.Guardian.Schema.Match.WorkingOrder> selectSelf;
		
		internal System.Guid workingOrderId;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static WorkingOrder()
		{
			FluidTrade.Guardian.Schema.Match.WorkingOrder.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.WorkingOrder, FluidTrade.Guardian.Schema.Match.WorkingOrder>(FluidTrade.Guardian.Schema.Match.WorkingOrder.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.WorkingOrder records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.WorkingOrder, FluidTrade.Guardian.Schema.Match.WorkingOrder> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.WorkingOrder.selectSelf;
			}
		}
		
		/// <summary>
		/// WorkingOrderId
		/// </summary>
		public System.Guid WorkingOrderId
		{
			get
			{
				return this.workingOrderId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.WorkingOrder to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.WorkingOrder workingOrder = ((FluidTrade.Guardian.Schema.Match.WorkingOrder)(iContent));
			if ((this.workingOrderId != workingOrder.workingOrderId))
			{
				this.workingOrderId = workingOrder.workingOrderId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("WorkingOrderId"));
				}
			}
			if ((this.isActive != workingOrder.isActive))
			{
				this.isActive = workingOrder.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.WorkingOrder SelectFromSelf(FluidTrade.Guardian.Schema.Match.WorkingOrder workingOrder)
		{
			return workingOrder;
		}
	}
	
	/// <summary>
	/// This class provides the Match data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Match : FluidTrade.Core.IContent
	{
		
		internal FluidTrade.Guardian.Schema.Match.AccountBalance accountBalance;
		
		internal FluidTrade.Guardian.Schema.Match.Address1 address1;
		
		internal FluidTrade.Guardian.Schema.Match.Address2 address2;
		
		internal FluidTrade.Guardian.Schema.Match.Blotter blotter;
		
		internal FluidTrade.Guardian.Schema.Match.City city;
		
		internal FluidTrade.Guardian.Schema.Match.CollectionDate collectionDate;
		
		internal FluidTrade.Guardian.Schema.Match.Coupon coupon;
		
		internal FluidTrade.Guardian.Schema.Match.CreditCardBalance creditCardBalance;
		
		internal FluidTrade.Guardian.Schema.Match.CreditCardIssuer creditCardIssuer;
		
		internal FluidTrade.Guardian.Schema.Match.DateOfBirth dateOfBirth;
		
		internal FluidTrade.Guardian.Schema.Match.DateOfDelinquency dateOfDelinquency;
		
		internal FluidTrade.Guardian.Schema.Match.FirstName firstName;
		
		internal FluidTrade.Guardian.Schema.Match.HeatIndex heatIndex;
		
		internal FluidTrade.Guardian.Schema.Match.IsEmployed isEmployed;
		
		internal object key;
		
		internal FluidTrade.Guardian.Schema.Match.LastName lastName;
		
		internal FluidTrade.Guardian.Schema.Match.LastPrice lastPrice;
		
		internal FluidTrade.Guardian.Schema.Match.MatchedTime matchedTime;
		
		internal FluidTrade.Guardian.Schema.Match.MaturityDate maturityDate;
		
		internal FluidTrade.Guardian.Schema.Match.OriginalAccountNumber originalAccountNumber;
		
		internal FluidTrade.Guardian.Schema.Match.PostalCode postalCode;
		
		internal FluidTrade.Guardian.Schema.Match.Province province;
		
		internal FluidTrade.Guardian.Schema.Match.SavingsBalance savingsBalance;
		
		internal FluidTrade.Guardian.Schema.Match.SecurityName securityName;
		
		internal FluidTrade.Guardian.Schema.Match.SecuritySymbol securitySymbol;
		
		private static System.Func<FluidTrade.Guardian.Schema.Match.Match, FluidTrade.Guardian.Schema.Match.Match> selectSelf;
		
		internal FluidTrade.Guardian.Schema.Match.Side side;
		
		internal FluidTrade.Guardian.Schema.Match.SocialSecurityNumber socialSecurityNumber;
		
		internal FluidTrade.Guardian.Schema.Match.Status status;
		
		internal FluidTrade.Guardian.Schema.Match.SubmittedQuantity submittedQuantity;
		
		internal FluidTrade.Guardian.Schema.Match.TimeLeft timeLeft;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Match()
		{
			FluidTrade.Guardian.Schema.Match.Match.selectSelf = new System.Func<FluidTrade.Guardian.Schema.Match.Match, FluidTrade.Guardian.Schema.Match.Match>(FluidTrade.Guardian.Schema.Match.Match.SelectFromSelf);
		}
		
		/// <summary>
		/// Creates a FluidTrade.Guardian.Schema.Match.Match.
		/// </summary>
		public Match()
		{
			this.address1 = new FluidTrade.Guardian.Schema.Match.Address1();
			this.address2 = new FluidTrade.Guardian.Schema.Match.Address2();
			this.blotter = new FluidTrade.Guardian.Schema.Match.Blotter();
			this.city = new FluidTrade.Guardian.Schema.Match.City();
			this.collectionDate = new FluidTrade.Guardian.Schema.Match.CollectionDate();
			this.coupon = new FluidTrade.Guardian.Schema.Match.Coupon();
			this.matchedTime = new FluidTrade.Guardian.Schema.Match.MatchedTime();
			this.creditCardIssuer = new FluidTrade.Guardian.Schema.Match.CreditCardIssuer();
			this.originalAccountNumber = new FluidTrade.Guardian.Schema.Match.OriginalAccountNumber();
			this.creditCardBalance = new FluidTrade.Guardian.Schema.Match.CreditCardBalance();
			this.dateOfBirth = new FluidTrade.Guardian.Schema.Match.DateOfBirth();
			this.dateOfDelinquency = new FluidTrade.Guardian.Schema.Match.DateOfDelinquency();
			this.firstName = new FluidTrade.Guardian.Schema.Match.FirstName();
			this.heatIndex = new FluidTrade.Guardian.Schema.Match.HeatIndex();
			this.isEmployed = new FluidTrade.Guardian.Schema.Match.IsEmployed();
			this.lastName = new FluidTrade.Guardian.Schema.Match.LastName();
			this.lastPrice = new FluidTrade.Guardian.Schema.Match.LastPrice();
			this.postalCode = new FluidTrade.Guardian.Schema.Match.PostalCode();
			this.maturityDate = new FluidTrade.Guardian.Schema.Match.MaturityDate();
			this.accountBalance = new FluidTrade.Guardian.Schema.Match.AccountBalance();
			this.province = new FluidTrade.Guardian.Schema.Match.Province();
			this.savingsBalance = new FluidTrade.Guardian.Schema.Match.SavingsBalance();
			this.securityName = new FluidTrade.Guardian.Schema.Match.SecurityName();
			this.securitySymbol = new FluidTrade.Guardian.Schema.Match.SecuritySymbol();
			this.socialSecurityNumber = new FluidTrade.Guardian.Schema.Match.SocialSecurityNumber();
			this.side = new FluidTrade.Guardian.Schema.Match.Side();
			this.status = new FluidTrade.Guardian.Schema.Match.Status();
			this.submittedQuantity = new FluidTrade.Guardian.Schema.Match.SubmittedQuantity();
			this.timeLeft = new FluidTrade.Guardian.Schema.Match.TimeLeft();
		}
		
		/// <summary>
		/// AccountBalance
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.AccountBalance AccountBalance
		{
			get
			{
				return this.accountBalance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Address1
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.Address1 Address1
		{
			get
			{
				return this.address1;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Address2
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.Address2 Address2
		{
			get
			{
				return this.address2;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Blotter
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.Blotter Blotter
		{
			get
			{
				return this.blotter;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// City
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.City City
		{
			get
			{
				return this.city;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// CollectionDate
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.CollectionDate CollectionDate
		{
			get
			{
				return this.collectionDate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Coupon
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.Coupon Coupon
		{
			get
			{
				return this.coupon;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// CreditCardBalance
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.CreditCardBalance CreditCardBalance
		{
			get
			{
				return this.creditCardBalance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// CreditCardIssuer
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.CreditCardIssuer CreditCardIssuer
		{
			get
			{
				return this.creditCardIssuer;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// DateOfBirth
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.DateOfBirth DateOfBirth
		{
			get
			{
				return this.dateOfBirth;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// DateOfDelinquency
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.DateOfDelinquency DateOfDelinquency
		{
			get
			{
				return this.dateOfDelinquency;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// FirstName
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.FirstName FirstName
		{
			get
			{
				return this.firstName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// HeatIndex
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.HeatIndex HeatIndex
		{
			get
			{
				return this.heatIndex;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsEmployed
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.IsEmployed IsEmployed
		{
			get
			{
				return this.isEmployed;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// LastName
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.LastName LastName
		{
			get
			{
				return this.lastName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// LastPrice
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.LastPrice LastPrice
		{
			get
			{
				return this.lastPrice;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// MatchedTime
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.MatchedTime MatchedTime
		{
			get
			{
				return this.matchedTime;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// MaturityDate
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.MaturityDate MaturityDate
		{
			get
			{
				return this.maturityDate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// OriginalAccountNumber
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.OriginalAccountNumber OriginalAccountNumber
		{
			get
			{
				return this.originalAccountNumber;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// PostalCode
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.PostalCode PostalCode
		{
			get
			{
				return this.postalCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Province
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.Province Province
		{
			get
			{
				return this.province;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SavingsBalance
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.SavingsBalance SavingsBalance
		{
			get
			{
				return this.savingsBalance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SecurityName
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.SecurityName SecurityName
		{
			get
			{
				return this.securityName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SecuritySymbol
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.SecuritySymbol SecuritySymbol
		{
			get
			{
				return this.securitySymbol;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.Match.Match records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.Match.Match, FluidTrade.Guardian.Schema.Match.Match> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.Match.Match.selectSelf;
			}
		}
		
		/// <summary>
		/// Side
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.Side Side
		{
			get
			{
				return this.side;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SocialSecurityNumber
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.SocialSecurityNumber SocialSecurityNumber
		{
			get
			{
				return this.socialSecurityNumber;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Status
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.Status Status
		{
			get
			{
				return this.status;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SubmittedQuantity
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.SubmittedQuantity SubmittedQuantity
		{
			get
			{
				return this.submittedQuantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// TimeLeft
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.TimeLeft TimeLeft
		{
			get
			{
				return this.timeLeft;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.Match.Match to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.Match.Match match = ((FluidTrade.Guardian.Schema.Match.Match)(iContent));
			this.address1.Copy(match.address1);
			this.address2.Copy(match.address2);
			this.blotter.Copy(match.blotter);
			this.city.Copy(match.city);
			this.collectionDate.Copy(match.collectionDate);
			this.coupon.Copy(match.coupon);
			this.matchedTime.Copy(match.matchedTime);
			this.creditCardIssuer.Copy(match.creditCardIssuer);
			this.originalAccountNumber.Copy(match.originalAccountNumber);
			this.creditCardBalance.Copy(match.creditCardBalance);
			this.dateOfBirth.Copy(match.dateOfBirth);
			this.dateOfDelinquency.Copy(match.dateOfDelinquency);
			this.firstName.Copy(match.firstName);
			this.heatIndex.Copy(match.heatIndex);
			this.isEmployed.Copy(match.isEmployed);
			this.lastName.Copy(match.lastName);
			this.lastPrice.Copy(match.lastPrice);
			this.postalCode.Copy(match.postalCode);
			this.maturityDate.Copy(match.maturityDate);
			this.accountBalance.Copy(match.accountBalance);
			this.province.Copy(match.province);
			this.savingsBalance.Copy(match.savingsBalance);
			this.securityName.Copy(match.securityName);
			this.securitySymbol.Copy(match.securitySymbol);
			this.socialSecurityNumber.Copy(match.socialSecurityNumber);
			this.side.Copy(match.side);
			this.status.Copy(match.status);
			this.submittedQuantity.Copy(match.submittedQuantity);
			this.timeLeft.Copy(match.timeLeft);
		}
		
		/// <summary>
		/// Creates a FluidTrade.Guardian.Schema.Match.Match.
		/// </summary>
		public FluidTrade.Guardian.Schema.Match.Match Select(FluidTrade.Guardian.MatchRow matchRow)
		{
			this.key = matchRow;
ConsumerDebtRow consumerDebtRow = DataModel.ConsumerDebt.ConsumerDebtKey.Find(matchRow.WorkingOrderRow.SecurityId);
;
ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(matchRow.WorkingOrderRow.SecurityId);
;

            ConsumerRow consumerRow = consumerDebtRow != null ? consumerDebtRow.CreditCardRow.ConsumerRow :
            consumerTrustRow != null ? consumerTrustRow.ConsumerRow : null;

          ;
PriceRow priceRow = DataModel.Price.PriceKey.Find(matchRow.WorkingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.SecurityId, matchRow.WorkingOrderRow.SecurityRowByFK_Security_WorkingOrder_SettlementId.SecurityId);
;
MatchTimerRow matchTimerRow = DataModel.MatchTimer.MatchTimerKey.Find(matchRow.MatchId);
;
			this.address1.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.address1.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.Address1Column];
			this.address2.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.address2.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.Address2Column];
			this.blotter.blotterId = matchRow.WorkingOrderRow.BlotterId;
			this.blotter.name = matchRow.WorkingOrderRow.BlotterRow.EntityRow.Name;
			this.blotter.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.city.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.city.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.CityColumn];
			this.collectionDate.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.collectionDate.date = consumerDebtRow == null ? null : consumerDebtRow[DataModel.ConsumerDebt.CollectionDateColumn];
			this.coupon.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

              DebtRow debtRow0 = DataModel.Debt.DebtKey.Find(matchRow.WorkingOrderRow.SecurityId);
			this.coupon.rate = 
              debtRow0 == null ? 0.0M : debtRow0.Coupon
            ;
			this.matchedTime.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.matchedTime.time = matchRow.MatchedTime;
			this.creditCardIssuer.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.creditCardIssuer.name = consumerDebtRow == null ? System.String.Empty : consumerDebtRow.CreditCardRow.DebtHolder;
			this.originalAccountNumber.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.originalAccountNumber.number = consumerDebtRow == null ? System.String.Empty : consumerDebtRow.CreditCardRow.OriginalAccountNumber;
			this.creditCardBalance.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.creditCardBalance.balance = consumerDebtRow == null ? null : consumerDebtRow.CreditCardRow[DataModel.CreditCard.AccountBalanceColumn];
			this.dateOfBirth.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.dateOfBirth.date = consumerRow == null ? null : consumerRow[DataModel.Consumer.DateOfBirthColumn];
			this.dateOfDelinquency.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.dateOfDelinquency.date = consumerDebtRow == null ? null : consumerDebtRow[DataModel.ConsumerDebt.DateOfDelinquencyColumn];
			this.firstName.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.firstName.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.FirstNameColumn];
			this.heatIndex.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.heatIndex.index = (decimal)((int)(matchRow.HeatIndex*100))/100;
			this.isEmployed.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.isEmployed.employed = consumerRow == null ? null : consumerRow[DataModel.Consumer.IsEmployedColumn];
			this.lastName.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.lastName.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.LastNameColumn];
			this.lastPrice.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.lastPrice.price = priceRow == null ? 0.0M : priceRow.LastPrice;
			this.postalCode.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.postalCode.code = consumerRow == null ? null : consumerRow[DataModel.Consumer.PostalCodeColumn];
			this.maturityDate.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

              DebtRow debtRow1 = DataModel.Debt.DebtKey.Find(matchRow.WorkingOrderRow.SecurityId);
			this.maturityDate.date = 
              debtRow1 == null ? System.DateTime.MinValue : debtRow1.MaturityDate
            ;
			this.accountBalance.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.accountBalance.balance = consumerDebtRow == null ? null : consumerDebtRow.CreditCardRow[DataModel.CreditCard.AccountBalanceColumn];
			this.province.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.province.abbreviation = consumerRow != null && consumerRow.ProvinceRow != null ? consumerRow.ProvinceRow[DataModel.Province.AbbreviationColumn] : null;
			this.savingsBalance.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.savingsBalance.balance = consumerTrustRow == null ? null : consumerTrustRow[DataModel.ConsumerTrust.SavingsBalanceColumn];
			this.securityName.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.securityName.name = matchRow.WorkingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.EntityRow.Name;
			this.securitySymbol.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.securitySymbol.symbol = matchRow.WorkingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.Symbol;
			this.socialSecurityNumber.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.socialSecurityNumber.number = consumerRow == null ? null : consumerRow[DataModel.Consumer.SocialSecurityNumberColumn];
			this.side.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.side.key = new FluidTrade.Core.DataTableCoordinate(matchRow.WorkingOrderRow, DataModel.WorkingOrder.SideIdColumn);
			this.side.mnemonic = matchRow.WorkingOrderRow.SideRow.Mnemonic;
			this.side.sideCode = matchRow.WorkingOrderRow.SideRow.SideCode;
			this.status.mnemonic = matchRow.StatusRow.Mnemonic;
			this.status.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.status.statusCode = matchRow.StatusRow.StatusCode;
			this.timeLeft.isActive = matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.timeLeft.time = matchTimerRow == null ? 0.0 : matchTimerRow.StopTime.Subtract(matchTimerRow.CurrentTime).TotalSeconds;
			return this;
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.Match.Match SelectFromSelf(FluidTrade.Guardian.Schema.Match.Match match)
		{
			return match;
		}
	}
}
