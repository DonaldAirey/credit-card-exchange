<?xml version="1.0" encoding="utf-8" ?>
<xs:schema targetNamespace="urn:schemas-fluidtrade-com:guardian:match"
					 xmlns:mstns="urn:schemas-fluidtrade-com:guardian:match"
					 xmlns:xs="http://www.w3.org/2001/XMLSchema"
					 xmlns:r="urn:schemas-fluidtrade-com:report">
  <xs:annotation>
    <xs:appinfo>
      <r:generatedCode destinationNamespace="FluidTrade.Guardian.Schema.Match" />
    </xs:appinfo>
  </xs:annotation>
  <!-- Address 1 -->
  <xs:complexType name="Address1">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Text" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Address 2 -->
  <xs:complexType name="Address2">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Text" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Blotter -->
  <xs:complexType name="Blotter">
    <xs:sequence>
      <xs:element name="BlotterId" r:datatype="System.Guid, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
      <xs:element name="Name" type="xs:string" />
      <xs:element name="IsActive" type="xs:boolean" />
    </xs:sequence>
  </xs:complexType>
  <!-- City -->
  <xs:complexType name="City">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Text" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Collection Date -->
  <xs:complexType name="CollectionDate">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Date" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- ContraOrderId -->
  <xs:complexType name="ContraOrder">
    <xs:sequence>
      <xs:element name="ContraOrderId" r:datatype="System.Guid, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
      <xs:element name="IsActive" type="xs:boolean" />
    </xs:sequence>
  </xs:complexType>
  <!-- Coupon -->
  <xs:complexType name="Coupon">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Rate" type="xs:decimal" />
    </xs:sequence>
  </xs:complexType>
  <!-- CreditCardBalance -->
  <xs:complexType name="CreditCardBalance">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Balance" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Created Time -->
  <xs:complexType name="MatchedTime">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Time" type="xs:dateTime" />
    </xs:sequence>
  </xs:complexType>
  <!-- Credit Card Issuer -->
  <xs:complexType name="CreditCardIssuer">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Name" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <!-- Credit Card Number -->
  <xs:complexType name="OriginalAccountNumber">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Number" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <!-- Date Of Birth -->
  <xs:complexType name="DateOfBirth">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Date" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Date Of Delinquency -->
  <xs:complexType name="DateOfDelinquency">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Date" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- First Name -->
  <xs:complexType name="FirstName">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Name" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- HeatIndex -->
  <xs:complexType name="HeatIndex">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Index" type="xs:decimal" />
    </xs:sequence>
  </xs:complexType>
  <!-- Is Employed -->
  <xs:complexType name="IsEmployed">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Employed" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Last Name -->
  <xs:complexType name="LastName">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Name" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Last Price -->
  <xs:complexType name="LastPrice">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Price" type="xs:decimal" />
    </xs:sequence>
  </xs:complexType>
  <!-- PostalCode -->
  <xs:complexType name="PostalCode">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Code" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Maturity Date -->
  <xs:complexType name="MaturityDate">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Date" type="xs:dateTime" />
    </xs:sequence>
  </xs:complexType>
  <!-- Principal Balance -->
  <xs:complexType name="AccountBalance">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Balance" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Province -->
  <xs:complexType name="Province">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Abbreviation" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
	<!-- Savings Balance -->
	<xs:complexType name="SavingsBalance">
		<xs:sequence>
			<xs:element name="IsActive" type="xs:boolean" />
			<xs:element name="Balance" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
		</xs:sequence>
	</xs:complexType>
	<!-- SecuritySymbol -->
  <xs:complexType name="SecuritySymbol">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Symbol" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <!-- SecurityName -->
  <xs:complexType name="SecurityName">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Name" type="xs:string" />
    </xs:sequence>
  </xs:complexType>
  <!-- Side -->
  <xs:complexType name="Side">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Mnemonic" type="xs:string" />
      <xs:element name="SideCode" r:datatype="FluidTrade.Core.Side, FluidTrade.FluidTradeLibrary, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b200e265aff2c6ac" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Social Security Number -->
  <xs:complexType name="SocialSecurityNumber">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Number" r:datatype="System.Object, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Status -->
  <xs:complexType name="Status">
    <xs:sequence>
      <xs:element name="Mnemonic" type="xs:string" />
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="StatusCode" r:datatype="FluidTrade.Guardian.Status, FluidTrade.GuardianLibrary, Version=1.3.0.0, Culture=neutral, PublicKeyToken=11995def4fd5595d" type="xs:anyType" />
    </xs:sequence>
  </xs:complexType>
  <!-- Submitted Quantity -->
  <xs:complexType name="SubmittedQuantity">
    <xs:sequence>
      <xs:element name="IsActive" type="xs:boolean" />
      <xs:element name="Quantity" type="xs:decimal" />
    </xs:sequence>
  </xs:complexType>
  <!-- TimeLeft -->
  <xs:complexType name="TimeLeft">
    <xs:sequence>
      <xs:element name="Time" type="xs:double" />
      <xs:element name="IsActive" type="xs:boolean" />
    </xs:sequence>
  </xs:complexType>
  <!-- Working Order -->
  <xs:complexType name="WorkingOrder">
    <xs:sequence>
      <xs:element name="WorkingOrderId" r:datatype="System.Guid, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" type="xs:anyType" />
      <xs:element name="IsActive" type="xs:boolean" />
    </xs:sequence>
  </xs:complexType>
  <!-- Match -->
  <xs:complexType name="Match">
    <xs:annotation>
      <xs:appinfo>
        <r:constructor>
          <r:arguments>
            <r:argument type="FluidTrade.Guardian.MatchRow" name="matchRow" />
          </r:arguments>
          <r:setter property="key" value="matchRow" />
          <r:snippet>ConsumerDebtRow consumerDebtRow = DataModel.ConsumerDebt.ConsumerDebtKey.Find(matchRow.WorkingOrderRow.SecurityId);</r:snippet>
          <r:snippet>ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(matchRow.WorkingOrderRow.SecurityId);</r:snippet>
          <r:snippet>
            ConsumerRow consumerRow = consumerDebtRow != null ? consumerDebtRow.CreditCardRow.ConsumerRow :
            consumerTrustRow != null ? consumerTrustRow.ConsumerRow : null;
          </r:snippet>
          <r:snippet>PriceRow priceRow = DataModel.Price.PriceKey.Find(matchRow.WorkingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.SecurityId, matchRow.WorkingOrderRow.SecurityRowByFK_Security_WorkingOrder_SettlementId.SecurityId);</r:snippet>
          <r:snippet>MatchTimerRow matchTimerRow = DataModel.MatchTimer.MatchTimerKey.Find(matchRow.MatchId);</r:snippet>
        </r:constructor>
      </xs:appinfo>
    </xs:annotation>
    <xs:sequence>
      <!-- Addresss 1 -->
      <xs:element name="Address1" type="mstns:Address1">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Text">consumerRow == null ? null : consumerRow[DataModel.Consumer.Address1Column]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Addresss 2 -->
      <xs:element name="Address2" type="mstns:Address2">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Text">consumerRow == null ? null : consumerRow[DataModel.Consumer.Address2Column]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Blotter -->
      <xs:element name="Blotter" type="mstns:Blotter">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="BlotterId">matchRow.WorkingOrderRow.BlotterId</r:setter>
            <r:setter property="Name">matchRow.WorkingOrderRow.BlotterRow.EntityRow.Name</r:setter>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- City -->
      <xs:element name="City" type="mstns:City">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Text">consumerRow == null ? null : consumerRow[DataModel.Consumer.CityColumn]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- CollectionDate -->
      <xs:element name="CollectionDate" type="mstns:CollectionDate">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Date">consumerDebtRow == null ? null : consumerDebtRow[DataModel.ConsumerDebt.CollectionDateColumn]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Coupon -->
      <xs:element name="Coupon" type="mstns:Coupon">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Rate">
              DebtRow debtRow0 = DataModel.Debt.DebtKey.Find(matchRow.WorkingOrderRow.SecurityId);
              debtRow0 == null ? 0.0M : debtRow0.Coupon
            </r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Created Time -->
      <xs:element name="MatchedTime" type="mstns:MatchedTime">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Time">matchRow.MatchedTime</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Credit Card Issuer -->
      <xs:element name="CreditCardIssuer" type="mstns:CreditCardIssuer">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Name">consumerDebtRow == null ? System.String.Empty : consumerDebtRow.CreditCardRow.DebtHolder</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Credit Card Number -->
      <xs:element name="OriginalAccountNumber" type="mstns:OriginalAccountNumber">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Number">consumerDebtRow == null ? System.String.Empty : consumerDebtRow.CreditCardRow.OriginalAccountNumber</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Credit Card Balance -->
      <xs:element name="CreditCardBalance" type="mstns:CreditCardBalance">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Balance">consumerDebtRow == null ? null : consumerDebtRow.CreditCardRow[DataModel.CreditCard.AccountBalanceColumn]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Date Of Birth -->
      <xs:element name="DateOfBirth" type="mstns:DateOfBirth">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Date">consumerRow == null ? null : consumerRow[DataModel.Consumer.DateOfBirthColumn]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Date Of Delinquency -->
      <xs:element name="DateOfDelinquency" type="mstns:DateOfDelinquency">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Date">consumerDebtRow == null ? null : consumerDebtRow[DataModel.ConsumerDebt.DateOfDelinquencyColumn]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- First Name -->
      <xs:element name="FirstName" type="mstns:FirstName">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Name">consumerRow == null ? null : consumerRow[DataModel.Consumer.FirstNameColumn]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Heat Index -->
      <xs:element name="HeatIndex" type="mstns:HeatIndex">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Index">(decimal)((int)(matchRow.HeatIndex*100))/100</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Is Employed -->
      <xs:element name="IsEmployed" type="mstns:IsEmployed">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Employed">consumerRow == null ? null : consumerRow[DataModel.Consumer.IsEmployedColumn]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Last Name -->
      <xs:element name="LastName" type="mstns:LastName">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Name">consumerRow == null ? null : consumerRow[DataModel.Consumer.LastNameColumn]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Last Price -->
      <xs:element name="LastPrice" type="mstns:LastPrice">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Price">priceRow == null ? 0.0M : priceRow.LastPrice</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- PostalCode -->
      <xs:element name="PostalCode" type="mstns:PostalCode">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Code">consumerRow == null ? null : consumerRow[DataModel.Consumer.PostalCodeColumn]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Maturity Date -->
      <xs:element name="MaturityDate" type="mstns:MaturityDate">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Date">
              DebtRow debtRow1 = DataModel.Debt.DebtKey.Find(matchRow.WorkingOrderRow.SecurityId);
              debtRow1 == null ? System.DateTime.MinValue : debtRow1.MaturityDate
            </r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- AccountBalance -->
      <xs:element name="AccountBalance" type="mstns:AccountBalance">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Balance">consumerDebtRow == null ? null : consumerDebtRow.CreditCardRow[DataModel.CreditCard.AccountBalanceColumn]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Province -->
      <xs:element name="Province" type="mstns:Province">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Abbreviation">consumerRow != null &amp;&amp; consumerRow.ProvinceRow != null ? consumerRow.ProvinceRow[DataModel.Province.AbbreviationColumn] : null</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
			<!-- Savings Balance -->
			<xs:element name="SavingsBalance" type="mstns:SavingsBalance">
				<xs:annotation>
					<xs:appinfo>
						<r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
						<r:setter property="Balance">consumerTrustRow == null ? null : consumerTrustRow[DataModel.ConsumerTrust.SavingsBalanceColumn]</r:setter>
					</xs:appinfo>
				</xs:annotation>
			</xs:element>
			<!-- SecurityName -->
      <xs:element name="SecurityName" type="mstns:SecurityName">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Name">matchRow.WorkingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.EntityRow.Name</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- SecuritySymbol -->
      <xs:element name="SecuritySymbol" type="mstns:SecuritySymbol">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Symbol">matchRow.WorkingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.Symbol</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- SocialSecurityNumber -->
      <xs:element name="SocialSecurityNumber" type="mstns:SocialSecurityNumber">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Number">consumerRow == null ? null : consumerRow[DataModel.Consumer.SocialSecurityNumberColumn]</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Side -->
      <xs:element name="Side" type="mstns:Side">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Key">new FluidTrade.Core.DataTableCoordinate(matchRow.WorkingOrderRow, DataModel.WorkingOrder.SideIdColumn)</r:setter>
            <r:setter property="Mnemonic">matchRow.WorkingOrderRow.SideRow.Mnemonic</r:setter>
            <r:setter property="SideCode">matchRow.WorkingOrderRow.SideRow.SideCode</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Status -->
      <xs:element name="Status" type="mstns:Status">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="Mnemonic">matchRow.StatusRow.Mnemonic</r:setter>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="StatusCode">matchRow.StatusRow.StatusCode</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
      <!-- Submitted Quantity -->
      <xs:element name="SubmittedQuantity" type="mstns:SubmittedQuantity">
      </xs:element>
      <!-- TimeLeft -->
      <xs:element name="TimeLeft" type="mstns:TimeLeft">
        <xs:annotation>
          <xs:appinfo>
            <r:setter property="IsActive">matchRow.WorkingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled</r:setter>
            <r:setter property="Time">matchTimerRow == null ? 0.0 : matchTimerRow.StopTime.Subtract(matchTimerRow.CurrentTime).TotalSeconds</r:setter>
          </xs:appinfo>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
</xs:schema>
