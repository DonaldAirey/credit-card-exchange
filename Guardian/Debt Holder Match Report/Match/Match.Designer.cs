//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-fluidtrade-com:guardian:debt-holder-match", "FluidTrade.Guardian.Schema.DebtHolderMatch")]

namespace FluidTrade.Guardian.Schema.DebtHolderMatch
{
	
	
	/// <summary>
	/// This class provides the AccountNumber data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class AccountNumber : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber, FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static AccountNumber()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber, FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber>(FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber, FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber accountNumber = ((FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber)(iContent));
			if ((this.isActive != accountNumber.isActive))
			{
				this.isActive = accountNumber.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != accountNumber.text))
			{
				this.text = accountNumber.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber accountNumber)
		{
			return accountNumber;
		}
	}
	
	/// <summary>
	/// This class provides the Address1 data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Address1 : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Address1, FluidTrade.Guardian.Schema.DebtHolderMatch.Address1> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Address1()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Address1.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Address1, FluidTrade.Guardian.Schema.DebtHolderMatch.Address1>(FluidTrade.Guardian.Schema.DebtHolderMatch.Address1.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.Address1 records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Address1, FluidTrade.Guardian.Schema.DebtHolderMatch.Address1> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.Address1.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.Address1 to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Address1 address1 = ((FluidTrade.Guardian.Schema.DebtHolderMatch.Address1)(iContent));
			if ((this.isActive != address1.isActive))
			{
				this.isActive = address1.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != address1.text))
			{
				this.text = address1.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.Address1 SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.Address1 address1)
		{
			return address1;
		}
	}
	
	/// <summary>
	/// This class provides the Address2 data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Address2 : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Address2, FluidTrade.Guardian.Schema.DebtHolderMatch.Address2> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Address2()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Address2.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Address2, FluidTrade.Guardian.Schema.DebtHolderMatch.Address2>(FluidTrade.Guardian.Schema.DebtHolderMatch.Address2.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.Address2 records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Address2, FluidTrade.Guardian.Schema.DebtHolderMatch.Address2> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.Address2.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.Address2 to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Address2 address2 = ((FluidTrade.Guardian.Schema.DebtHolderMatch.Address2)(iContent));
			if ((this.isActive != address2.isActive))
			{
				this.isActive = address2.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != address2.text))
			{
				this.text = address2.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.Address2 SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.Address2 address2)
		{
			return address2;
		}
	}
	
	/// <summary>
	/// This class provides the Blotter data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Blotter : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.Guid blotterId;
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter, FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Blotter()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter, FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter>(FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter.SelectFromSelf);
		}
		
		/// <summary>
		/// BlotterId
		/// </summary>
		public System.Guid BlotterId
		{
			get
			{
				return this.blotterId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter, FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter blotter = ((FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter)(iContent));
			if ((this.blotterId != blotter.blotterId))
			{
				this.blotterId = blotter.blotterId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("BlotterId"));
				}
			}
			if ((this.name != blotter.name))
			{
				this.name = blotter.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
			if ((this.isActive != blotter.isActive))
			{
				this.isActive = blotter.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter blotter)
		{
			return blotter;
		}
	}
	
	/// <summary>
	/// This class provides the City data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class City : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.City, FluidTrade.Guardian.Schema.DebtHolderMatch.City> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static City()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.City.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.City, FluidTrade.Guardian.Schema.DebtHolderMatch.City>(FluidTrade.Guardian.Schema.DebtHolderMatch.City.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.City records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.City, FluidTrade.Guardian.Schema.DebtHolderMatch.City> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.City.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.City to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.City city = ((FluidTrade.Guardian.Schema.DebtHolderMatch.City)(iContent));
			if ((this.isActive != city.isActive))
			{
				this.isActive = city.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != city.text))
			{
				this.text = city.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.City SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.City city)
		{
			return city;
		}
	}
	
	/// <summary>
	/// This class provides the CreatedBy data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class CreatedBy : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy, FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy> selectSelf;
		
		internal System.Guid userId;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CreatedBy()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy, FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy>(FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy, FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy.selectSelf;
			}
		}
		
		/// <summary>
		/// UserId
		/// </summary>
		public System.Guid UserId
		{
			get
			{
				return this.userId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy createdBy = ((FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy)(iContent));
			if ((this.isActive != createdBy.isActive))
			{
				this.isActive = createdBy.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != createdBy.name))
			{
				this.name = createdBy.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
			if ((this.userId != createdBy.userId))
			{
				this.userId = createdBy.userId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("UserId"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy createdBy)
		{
			return createdBy;
		}
	}
	
	/// <summary>
	/// This class provides the CreatedDateTime data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class CreatedDateTime : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.DateTime dateTime;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime, FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CreatedDateTime()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime, FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime>(FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime.SelectFromSelf);
		}
		
		/// <summary>
		/// DateTime
		/// </summary>
		public System.DateTime DateTime
		{
			get
			{
				return this.dateTime;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime, FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime createdDateTime = ((FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime)(iContent));
			if ((this.isActive != createdDateTime.isActive))
			{
				this.isActive = createdDateTime.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.dateTime != createdDateTime.dateTime))
			{
				this.dateTime = createdDateTime.dateTime;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("DateTime"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime createdDateTime)
		{
			return createdDateTime;
		}
	}
	
	/// <summary>
	/// This class provides the AccountBalance data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class AccountBalance : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object balance;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance, FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static AccountBalance()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance, FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance>(FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance.SelectFromSelf);
		}
		
		/// <summary>
		/// Balance
		/// </summary>
		public object Balance
		{
			get
			{
				return this.balance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance, FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance accountBalance = ((FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance)(iContent));
			if ((this.isActive != accountBalance.isActive))
			{
				this.isActive = accountBalance.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.balance != accountBalance.balance))
			{
				this.balance = accountBalance.balance;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Balance"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance accountBalance)
		{
			return accountBalance;
		}
	}
	
	/// <summary>
	/// This class provides the DateOfBirth data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class DateOfBirth : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.Nullable<System.DateTime> dateTime;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth, FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static DateOfBirth()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth, FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth>(FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth.SelectFromSelf);
		}
		
		/// <summary>
		/// DateTime
		/// </summary>
		public System.Nullable<System.DateTime> DateTime
		{
			get
			{
				return this.dateTime;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth, FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth dateOfBirth = ((FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth)(iContent));
			if ((this.isActive != dateOfBirth.isActive))
			{
				this.isActive = dateOfBirth.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.dateTime != dateOfBirth.dateTime))
			{
				this.dateTime = dateOfBirth.dateTime;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("DateTime"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth dateOfBirth)
		{
			return dateOfBirth;
		}
	}
	
	/// <summary>
	/// This class provides the FirstName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class FirstName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName, FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static FirstName()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName, FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName>(FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName, FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName firstName = ((FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName)(iContent));
			if ((this.isActive != firstName.isActive))
			{
				this.isActive = firstName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != firstName.name))
			{
				this.name = firstName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName firstName)
		{
			return firstName;
		}
	}
	
	/// <summary>
	/// This class provides the HeatIndex data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class HeatIndex : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal decimal index;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex, FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static HeatIndex()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex, FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex>(FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex.SelectFromSelf);
		}
		
		/// <summary>
		/// Index
		/// </summary>
		public decimal Index
		{
			get
			{
				return this.index;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex, FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex heatIndex = ((FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex)(iContent));
			if ((this.isActive != heatIndex.isActive))
			{
				this.isActive = heatIndex.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.index != heatIndex.index))
			{
				this.index = heatIndex.index;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex heatIndex)
		{
			return heatIndex;
		}
	}
	
	/// <summary>
	/// This class provides the IsEmployed data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class IsEmployed : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object employed;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed, FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static IsEmployed()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed, FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed>(FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed.SelectFromSelf);
		}
		
		/// <summary>
		/// Employed
		/// </summary>
		public object Employed
		{
			get
			{
				return this.employed;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed, FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed isEmployed = ((FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed)(iContent));
			if ((this.isActive != isEmployed.isActive))
			{
				this.isActive = isEmployed.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.employed != isEmployed.employed))
			{
				this.employed = isEmployed.employed;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Employed"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed isEmployed)
		{
			return isEmployed;
		}
	}
	
	/// <summary>
	/// This class provides the IsRead data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class IsRead : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object read;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead, FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static IsRead()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead, FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead>(FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Read
		/// </summary>
		public object Read
		{
			get
			{
				return this.read;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead, FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead isRead = ((FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead)(iContent));
			if ((this.isActive != isRead.isActive))
			{
				this.isActive = isRead.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.read != isRead.read))
			{
				this.read = isRead.read;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Read"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead isRead)
		{
			return isRead;
		}
	}
	
	/// <summary>
	/// This class provides the DebtHolderName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class DebtHolderName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName, FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static DebtHolderName()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName, FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName>(FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName, FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName debtHolderName = ((FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName)(iContent));
			if ((this.isActive != debtHolderName.isActive))
			{
				this.isActive = debtHolderName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != debtHolderName.text))
			{
				this.text = debtHolderName.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName debtHolderName)
		{
			return debtHolderName;
		}
	}
	
	/// <summary>
	/// This class provides the LastName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class LastName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.LastName, FluidTrade.Guardian.Schema.DebtHolderMatch.LastName> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static LastName()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.LastName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.LastName, FluidTrade.Guardian.Schema.DebtHolderMatch.LastName>(FluidTrade.Guardian.Schema.DebtHolderMatch.LastName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.LastName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.LastName, FluidTrade.Guardian.Schema.DebtHolderMatch.LastName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.LastName.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.LastName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.LastName lastName = ((FluidTrade.Guardian.Schema.DebtHolderMatch.LastName)(iContent));
			if ((this.isActive != lastName.isActive))
			{
				this.isActive = lastName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != lastName.name))
			{
				this.name = lastName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.LastName SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.LastName lastName)
		{
			return lastName;
		}
	}
	
	/// <summary>
	/// This class provides the PostalCode data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class PostalCode : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal object code;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode, FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static PostalCode()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode, FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode>(FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode.SelectFromSelf);
		}
		
		/// <summary>
		/// Code
		/// </summary>
		public object Code
		{
			get
			{
				return this.code;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode, FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode postalCode = ((FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode)(iContent));
			if ((this.isActive != postalCode.isActive))
			{
				this.isActive = postalCode.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.code != postalCode.code))
			{
				this.code = postalCode.code;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Code"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode postalCode)
		{
			return postalCode;
		}
	}
	
	/// <summary>
	/// This class provides the MiddleName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class MiddleName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName, FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static MiddleName()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName, FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName>(FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName, FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName middleName = ((FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName)(iContent));
			if ((this.isActive != middleName.isActive))
			{
				this.isActive = middleName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != middleName.name))
			{
				this.name = middleName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName middleName)
		{
			return middleName;
		}
	}
	
	/// <summary>
	/// This class provides the ModifiedBy data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class ModifiedBy : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy, FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy> selectSelf;
		
		internal System.Guid userId;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static ModifiedBy()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy, FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy>(FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy, FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy.selectSelf;
			}
		}
		
		/// <summary>
		/// UserId
		/// </summary>
		public System.Guid UserId
		{
			get
			{
				return this.userId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy modifiedBy = ((FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy)(iContent));
			if ((this.isActive != modifiedBy.isActive))
			{
				this.isActive = modifiedBy.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != modifiedBy.name))
			{
				this.name = modifiedBy.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
			if ((this.userId != modifiedBy.userId))
			{
				this.userId = modifiedBy.userId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("UserId"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy modifiedBy)
		{
			return modifiedBy;
		}
	}
	
	/// <summary>
	/// This class provides the ModifiedDateTime data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class ModifiedDateTime : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.DateTime dateTime;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime, FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static ModifiedDateTime()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime, FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime>(FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime.SelectFromSelf);
		}
		
		/// <summary>
		/// DateTime
		/// </summary>
		public System.DateTime DateTime
		{
			get
			{
				return this.dateTime;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime, FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime modifiedDateTime = ((FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime)(iContent));
			if ((this.isActive != modifiedDateTime.isActive))
			{
				this.isActive = modifiedDateTime.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.dateTime != modifiedDateTime.dateTime))
			{
				this.dateTime = modifiedDateTime.dateTime;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("DateTime"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime modifiedDateTime)
		{
			return modifiedDateTime;
		}
	}
	
	/// <summary>
	/// This class provides the Province data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Province : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal System.Guid provinceId;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Province, FluidTrade.Guardian.Schema.DebtHolderMatch.Province> selectSelf;
		
		internal object text;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Province()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Province.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Province, FluidTrade.Guardian.Schema.DebtHolderMatch.Province>(FluidTrade.Guardian.Schema.DebtHolderMatch.Province.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// ProvinceId
		/// </summary>
		public System.Guid ProvinceId
		{
			get
			{
				return this.provinceId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.Province records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Province, FluidTrade.Guardian.Schema.DebtHolderMatch.Province> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.Province.selectSelf;
			}
		}
		
		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.Province to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Province province = ((FluidTrade.Guardian.Schema.DebtHolderMatch.Province)(iContent));
			if ((this.isActive != province.isActive))
			{
				this.isActive = province.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != province.text))
			{
				this.text = province.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
			if ((this.provinceId != province.provinceId))
			{
				this.provinceId = province.provinceId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("ProvinceId"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.Province SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.Province province)
		{
			return province;
		}
	}
	
	/// <summary>
	/// This class provides the Salutation data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Salutation : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation, FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Salutation()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation, FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation>(FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation, FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation salutation = ((FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation)(iContent));
			if ((this.isActive != salutation.isActive))
			{
				this.isActive = salutation.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != salutation.name))
			{
				this.name = salutation.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation salutation)
		{
			return salutation;
		}
	}
	
	/// <summary>
	/// This class provides the SecurityName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SecurityName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName, FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SecurityName()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName, FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName>(FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName, FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName securityName = ((FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName)(iContent));
			if ((this.isActive != securityName.isActive))
			{
				this.isActive = securityName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != securityName.name))
			{
				this.name = securityName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName securityName)
		{
			return securityName;
		}
	}
	
	/// <summary>
	/// This class provides the SelectRow data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SelectRow : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow, FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SelectRow()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow, FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow>(FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow, FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow selectRow = ((FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow)(iContent));
			if ((this.isActive != selectRow.isActive))
			{
				this.isActive = selectRow.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != selectRow.name))
			{
				this.name = selectRow.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow selectRow)
		{
			return selectRow;
		}
	}
	
	/// <summary>
	/// This class provides the SocialSecurityNumber data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SocialSecurityNumber : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object number;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber, FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SocialSecurityNumber()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber, FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber>(FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Number
		/// </summary>
		public object Number
		{
			get
			{
				return this.number;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber, FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber socialSecurityNumber = ((FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber)(iContent));
			if ((this.isActive != socialSecurityNumber.isActive))
			{
				this.isActive = socialSecurityNumber.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.number != socialSecurityNumber.number))
			{
				this.number = socialSecurityNumber.number;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Number"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber socialSecurityNumber)
		{
			return socialSecurityNumber;
		}
	}
	
	/// <summary>
	/// This class provides the Status data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Status : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string mnemonic;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Status, FluidTrade.Guardian.Schema.DebtHolderMatch.Status> selectSelf;
		
		internal FluidTrade.Guardian.Status statusCode;
		
		internal string statusSortOrder;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Status()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Status.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Status, FluidTrade.Guardian.Schema.DebtHolderMatch.Status>(FluidTrade.Guardian.Schema.DebtHolderMatch.Status.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Mnemonic
		/// </summary>
		public string Mnemonic
		{
			get
			{
				return this.mnemonic;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.Status records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Status, FluidTrade.Guardian.Schema.DebtHolderMatch.Status> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.Status.selectSelf;
			}
		}
		
		/// <summary>
		/// StatusCode
		/// </summary>
		public FluidTrade.Guardian.Status StatusCode
		{
			get
			{
				return this.statusCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// StatusSortOrder
		/// </summary>
		public string StatusSortOrder
		{
			get
			{
				return this.statusSortOrder;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.Status to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Status status = ((FluidTrade.Guardian.Schema.DebtHolderMatch.Status)(iContent));
			if ((this.isActive != status.isActive))
			{
				this.isActive = status.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.mnemonic != status.mnemonic))
			{
				this.mnemonic = status.mnemonic;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Mnemonic"));
				}
			}
			if ((this.statusSortOrder != status.statusSortOrder))
			{
				this.statusSortOrder = status.statusSortOrder;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("StatusSortOrder"));
				}
			}
			if ((this.statusCode != status.statusCode))
			{
				this.statusCode = status.statusCode;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("StatusCode"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.Status SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.Status status)
		{
			return status;
		}
	}
	
	/// <summary>
	/// This class provides the Suffix data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Suffix : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal object name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix, FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Suffix()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix, FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix>(FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix, FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix suffix = ((FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix)(iContent));
			if ((this.isActive != suffix.isActive))
			{
				this.isActive = suffix.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != suffix.name))
			{
				this.name = suffix.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix suffix)
		{
			return suffix;
		}
	}
	
	/// <summary>
	/// This class provides the WorkingOrder data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class WorkingOrder : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder, FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder> selectSelf;
		
		internal System.Guid workingOrderId;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static WorkingOrder()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder, FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder>(FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder, FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder.selectSelf;
			}
		}
		
		/// <summary>
		/// WorkingOrderId
		/// </summary>
		public System.Guid WorkingOrderId
		{
			get
			{
				return this.workingOrderId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder workingOrder = ((FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder)(iContent));
			if ((this.workingOrderId != workingOrder.workingOrderId))
			{
				this.workingOrderId = workingOrder.workingOrderId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("WorkingOrderId"));
				}
			}
			if ((this.isActive != workingOrder.isActive))
			{
				this.isActive = workingOrder.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.WorkingOrder workingOrder)
		{
			return workingOrder;
		}
	}
	
	/// <summary>
	/// This class provides the Match data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Match : FluidTrade.Core.IContent
	{
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance accountBalance;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber accountNumber;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.Address1 address1;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.Address2 address2;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter blotter;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.City city;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy createdBy;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime createdDateTime;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth dateOfBirth;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName debtHolderName;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName firstName;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex heatIndex;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed isEmployed;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead isRead;
		
		internal object key;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.LastName lastName;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName middleName;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy modifiedBy;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime modifiedDateTime;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode postalCode;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.Province province;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation salutation;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName securityName;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow selectRow;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Match, FluidTrade.Guardian.Schema.DebtHolderMatch.Match> selectSelf;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber socialSecurityNumber;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.Status status;
		
		internal FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix suffix;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Match()
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Match.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Match, FluidTrade.Guardian.Schema.DebtHolderMatch.Match>(FluidTrade.Guardian.Schema.DebtHolderMatch.Match.SelectFromSelf);
		}
		
		/// <summary>
		/// Creates a FluidTrade.Guardian.Schema.DebtHolderMatch.Match.
		/// </summary>
		public Match()
		{
			this.accountNumber = new FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber();
			this.address1 = new FluidTrade.Guardian.Schema.DebtHolderMatch.Address1();
			this.address2 = new FluidTrade.Guardian.Schema.DebtHolderMatch.Address2();
			this.blotter = new FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter();
			this.city = new FluidTrade.Guardian.Schema.DebtHolderMatch.City();
			this.createdBy = new FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy();
			this.createdDateTime = new FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime();
			this.accountBalance = new FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance();
			this.dateOfBirth = new FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth();
			this.firstName = new FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName();
			this.heatIndex = new FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex();
			this.isEmployed = new FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed();
			this.isRead = new FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead();
			this.debtHolderName = new FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName();
			this.lastName = new FluidTrade.Guardian.Schema.DebtHolderMatch.LastName();
			this.postalCode = new FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode();
			this.middleName = new FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName();
			this.modifiedBy = new FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy();
			this.modifiedDateTime = new FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime();
			this.province = new FluidTrade.Guardian.Schema.DebtHolderMatch.Province();
			this.salutation = new FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation();
			this.securityName = new FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName();
			this.selectRow = new FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow();
			this.socialSecurityNumber = new FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber();
			this.status = new FluidTrade.Guardian.Schema.DebtHolderMatch.Status();
			this.suffix = new FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix();
		}
		
		/// <summary>
		/// AccountBalance
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.AccountBalance AccountBalance
		{
			get
			{
				return this.accountBalance;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// AccountNumber
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.AccountNumber AccountNumber
		{
			get
			{
				return this.accountNumber;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Address1
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.Address1 Address1
		{
			get
			{
				return this.address1;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Address2
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.Address2 Address2
		{
			get
			{
				return this.address2;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Blotter
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.Blotter Blotter
		{
			get
			{
				return this.blotter;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// City
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.City City
		{
			get
			{
				return this.city;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// CreatedBy
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedBy CreatedBy
		{
			get
			{
				return this.createdBy;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// CreatedDateTime
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.CreatedDateTime CreatedDateTime
		{
			get
			{
				return this.createdDateTime;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// DateOfBirth
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.DateOfBirth DateOfBirth
		{
			get
			{
				return this.dateOfBirth;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// DebtHolderName
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.DebtHolderName DebtHolderName
		{
			get
			{
				return this.debtHolderName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// FirstName
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.FirstName FirstName
		{
			get
			{
				return this.firstName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// HeatIndex
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.HeatIndex HeatIndex
		{
			get
			{
				return this.heatIndex;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsEmployed
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.IsEmployed IsEmployed
		{
			get
			{
				return this.isEmployed;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsRead
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.IsRead IsRead
		{
			get
			{
				return this.isRead;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// LastName
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.LastName LastName
		{
			get
			{
				return this.lastName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// MiddleName
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.MiddleName MiddleName
		{
			get
			{
				return this.middleName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// ModifiedBy
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedBy ModifiedBy
		{
			get
			{
				return this.modifiedBy;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// ModifiedDateTime
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.ModifiedDateTime ModifiedDateTime
		{
			get
			{
				return this.modifiedDateTime;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// PostalCode
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.PostalCode PostalCode
		{
			get
			{
				return this.postalCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Province
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.Province Province
		{
			get
			{
				return this.province;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Salutation
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.Salutation Salutation
		{
			get
			{
				return this.salutation;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SecurityName
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.SecurityName SecurityName
		{
			get
			{
				return this.securityName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SelectRow
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.SelectRow SelectRow
		{
			get
			{
				return this.selectRow;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtHolderMatch.Match records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtHolderMatch.Match, FluidTrade.Guardian.Schema.DebtHolderMatch.Match> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtHolderMatch.Match.selectSelf;
			}
		}
		
		/// <summary>
		/// SocialSecurityNumber
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.SocialSecurityNumber SocialSecurityNumber
		{
			get
			{
				return this.socialSecurityNumber;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Status
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.Status Status
		{
			get
			{
				return this.status;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Suffix
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.Suffix Suffix
		{
			get
			{
				return this.suffix;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtHolderMatch.Match to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtHolderMatch.Match match = ((FluidTrade.Guardian.Schema.DebtHolderMatch.Match)(iContent));
			this.accountNumber.Copy(match.accountNumber);
			this.address1.Copy(match.address1);
			this.address2.Copy(match.address2);
			this.blotter.Copy(match.blotter);
			this.city.Copy(match.city);
			this.createdBy.Copy(match.createdBy);
			this.createdDateTime.Copy(match.createdDateTime);
			this.accountBalance.Copy(match.accountBalance);
			this.dateOfBirth.Copy(match.dateOfBirth);
			this.firstName.Copy(match.firstName);
			this.heatIndex.Copy(match.heatIndex);
			this.isEmployed.Copy(match.isEmployed);
			this.isRead.Copy(match.isRead);
			this.debtHolderName.Copy(match.debtHolderName);
			this.lastName.Copy(match.lastName);
			this.postalCode.Copy(match.postalCode);
			this.middleName.Copy(match.middleName);
			this.modifiedBy.Copy(match.modifiedBy);
			this.modifiedDateTime.Copy(match.modifiedDateTime);
			this.province.Copy(match.province);
			this.salutation.Copy(match.salutation);
			this.securityName.Copy(match.securityName);
			this.selectRow.Copy(match.selectRow);
			this.socialSecurityNumber.Copy(match.socialSecurityNumber);
			this.status.Copy(match.status);
			this.suffix.Copy(match.suffix);
		}
		
		/// <summary>
		/// Creates a FluidTrade.Guardian.Schema.DebtHolderMatch.Match.
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtHolderMatch.Match Select(FluidTrade.Guardian.MatchRow matchRow)
		{
			this.key = matchRow;
ConsumerDebtRow consumerDebtRow = DataModel.ConsumerDebt.ConsumerDebtKey.Find(matchRow.WorkingOrderRow.SecurityId);
;
CreditCardRow creditCardRow = consumerDebtRow == null ? null : consumerDebtRow.CreditCardRow;
;
ConsumerRow consumerRow = creditCardRow == null ? null : creditCardRow.ConsumerRow;
;

						ConsumerDebtNegotiationRow consumerDebtNegotiationRow = null;

						foreach (ConsumerDebtNegotiationRow childConsumerDebtNegotiationRow in matchRow.GetConsumerDebtNegotiationRows())
						{
							if (consumerDebtNegotiationRow == null || consumerDebtNegotiationRow.RowVersion < childConsumerDebtNegotiationRow.RowVersion)
							{
								consumerDebtNegotiationRow = childConsumerDebtNegotiationRow;

							}
						}
					;
			this.accountNumber.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.accountNumber.key = new FluidTrade.Core.DataTableCoordinate(creditCardRow, DataModel.CreditCard.AccountNumberColumn);
			this.accountNumber.text = creditCardRow == null ? null : creditCardRow[DataModel.CreditCard.AccountNumberColumn];
			this.address1.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.address1.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.Address1Column);
			this.address1.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.Address1Column];
			this.address2.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.address2.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.Address2Column);
			this.address2.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.Address2Column];
			this.blotter.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.blotter.blotterId = matchRow.BlotterId;
			this.blotter.key = new FluidTrade.Core.DataTableCoordinate(matchRow, DataModel.Match.BlotterIdColumn);
			this.blotter.name = matchRow.BlotterRow.EntityRow.Name;
			this.city.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.city.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.CityColumn);
			this.city.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.CityColumn];
			this.createdBy.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.createdBy.name = consumerDebtNegotiationRow != null ? DataModel.Entity.EntityKey.Find(consumerDebtNegotiationRow.CreatedUserId).Name : "Retrieving...";
			this.createdBy.userId = consumerDebtNegotiationRow != null ? consumerDebtNegotiationRow.CreatedUserId : System.Guid.Empty;
			this.createdDateTime.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.createdDateTime.dateTime = consumerDebtNegotiationRow == null ? System.DateTime.MinValue : consumerDebtNegotiationRow.CreatedTime.ToLocalTime();
			this.accountBalance.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.accountBalance.key = new FluidTrade.Core.DataTableCoordinate(creditCardRow, DataModel.CreditCard.AccountBalanceColumn);
			this.accountBalance.balance = creditCardRow == null ? null : creditCardRow[DataModel.CreditCard.AccountBalanceColumn];
			this.dateOfBirth.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.dateOfBirth.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.DateOfBirthColumn);
			this.dateOfBirth.dateTime = consumerRow == null ? null : consumerRow.IsDateOfBirthNull() ? (System.DateTime?)null : consumerRow.DateOfBirth;
			this.firstName.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.firstName.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.FirstNameColumn);
			this.firstName.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.FirstNameColumn];
			this.heatIndex.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.heatIndex.index = (decimal)((int)(matchRow.HeatIndex*100))/100;
			this.isEmployed.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.isEmployed.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.IsEmployedColumn);
			this.isEmployed.employed = consumerRow == null ? null : consumerRow[DataModel.Consumer.IsEmployedColumn];
			this.isRead.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.isRead.key = new FluidTrade.Core.DataTableCoordinate(consumerDebtNegotiationRow, DataModel.ConsumerDebtNegotiation.IsReadColumn);
			this.isRead.read = consumerDebtNegotiationRow == null ? null : consumerDebtNegotiationRow[DataModel.ConsumerDebtNegotiation.IsReadColumn];
			this.debtHolderName.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.debtHolderName.key = new FluidTrade.Core.DataTableCoordinate(creditCardRow, DataModel.CreditCard.DebtHolderColumn);
			this.debtHolderName.text = creditCardRow == null ? null : creditCardRow[DataModel.CreditCard.DebtHolderColumn];
			this.lastName.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.lastName.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.LastNameColumn);
			this.lastName.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.LastNameColumn];
			this.postalCode.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.postalCode.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.PostalCodeColumn);
			this.postalCode.code = consumerRow == null ? null : consumerRow[DataModel.Consumer.PostalCodeColumn];
			this.middleName.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.middleName.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.MiddleNameColumn);
			this.middleName.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.MiddleNameColumn];
			this.modifiedBy.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.modifiedBy.name = consumerDebtNegotiationRow != null ? DataModel.Entity.EntityKey.Find(consumerDebtNegotiationRow.ModifiedUserId).Name : "Retrieving...";
			this.modifiedBy.userId = consumerDebtNegotiationRow == null ? System.Guid.Empty : consumerDebtNegotiationRow.ModifiedUserId;
			this.modifiedDateTime.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.modifiedDateTime.dateTime = consumerDebtNegotiationRow == null ? System.DateTime.MinValue : consumerDebtNegotiationRow.ModifiedTime.ToLocalTime();
			this.province.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.province.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.ProvinceIdColumn);

							System.Guid provinceId = System.Guid.Empty;

							if (consumerRow != null && consumerRow.ProvinceRow != null)
							{
								provinceId = consumerRow.ProvinceRow.ProvinceId;

							};
			this.province.provinceId = 
							provinceId
						;
			this.salutation.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.salutation.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.SalutationColumn);
			this.salutation.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.SalutationColumn];
			this.securityName.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.securityName.key = new FluidTrade.Core.DataTableCoordinate(creditCardRow, DataModel.CreditCard.OriginalAccountNumberColumn);
			this.securityName.name = creditCardRow == null ? null : creditCardRow[DataModel.CreditCard.OriginalAccountNumberColumn];
			this.selectRow.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.socialSecurityNumber.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.socialSecurityNumber.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.SocialSecurityNumberColumn);
			this.socialSecurityNumber.number = consumerRow == null ? null : consumerRow[DataModel.Consumer.SocialSecurityNumberColumn];
			this.status.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.status.mnemonic = matchRow.StatusRow.Mnemonic;
			this.status.statusSortOrder = matchRow.StatusRow.SortOrder.ToString();
			this.status.statusCode = matchRow.StatusRow.StatusCode;
			this.suffix.isActive = consumerDebtNegotiationRow == null ? false :consumerDebtNegotiationRow.IsRead;
			this.suffix.key = new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.SuffixColumn);
			this.suffix.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.SuffixColumn];
			return this;
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtHolderMatch.Match SelectFromSelf(FluidTrade.Guardian.Schema.DebtHolderMatch.Match match)
		{
			return match;
		}
	}
}
