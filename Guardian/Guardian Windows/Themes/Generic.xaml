<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
										xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
										xmlns:s="clr-namespace:System;assembly=mscorlib"
										xmlns:guardian="clr-namespace:FluidTrade.Guardian.Windows"
										xmlns:local="clr-namespace:FluidTrade.Guardian.Windows.Controls"
										xmlns:editors="http://schemas.actiprosoftware.com/winfx/xaml/editors"
										xmlns:mwt="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">
	

	<!-- MoneyBox default style -->
  <Style TargetType="{x:Type local:MoneyBox}" BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:MoneyBox}">
          <Border Background="{TemplateBinding Background}"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
									Width="{TemplateBinding Width}"
									Height="{TemplateBinding Height}"
									VerticalAlignment="{TemplateBinding VerticalAlignment}"
									HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
						<Grid HorizontalAlignment="Stretch">
							<ScrollViewer Name="PART_ContentHost" VerticalAlignment="Center" HorizontalAlignment="Stretch" />
							<TextBox Name="display"
											 Text="{TemplateBinding DisplayText}"
											 IsReadOnly="true"
											 Visibility="Visible"
											 VerticalAlignment="Center"
											 HorizontalAlignment="Stretch"
											 TextAlignment="{TemplateBinding TextAlignment}"
											 Foreground="{TemplateBinding Foreground}"
											 Background="{TemplateBinding Background}"
											 IsHitTestVisible="false"
											 Focusable="true">
								<TextBox.Template>
									<ControlTemplate>
										<Border Background="{TemplateBinding Background}"
														BorderThickness="0">
											<ScrollViewer Name="PART_ContentHost" />
										</Border>
									</ControlTemplate>
								</TextBox.Template>
							</TextBox>
						</Grid>
          </Border>
					
					<ControlTemplate.Triggers>
						<Trigger Property="IsEditing" Value="true">
							<Setter TargetName="display" Property="Visibility" Value="Collapsed" />
						</Trigger>
						<Trigger Property="IsEditing" Value="false">
							<Setter TargetName="display" Property="Visibility" Value="Visible" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

	<ControlTemplate x:Key="defaultMultiComBoxTemplate"  TargetType="{x:Type local:MultiComboBox}">
		<Grid VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="0"/>
			</Grid.ColumnDefinitions>
			<Popup Name="Popup"
						 Placement="Bottom"
						 IsOpen="{TemplateBinding IsDropDownOpen}"
						 AllowsTransparency="True" 
						 Focusable="False"
							MinWidth="{TemplateBinding ActualWidth}"
						 PopupAnimation="Slide">
				<Grid Name="DropDown"
							MaxHeight="{TemplateBinding MaxDropDownHeight}">
					<Border x:Name="DropDownBorder">
						<ScrollViewer>
							<ListBox x:Name="PART_ListBox"
											 KeyboardNavigation.DirectionalNavigation="Contained"
											 SelectionMode="Multiple"
											 ItemsSource="{TemplateBinding ItemsSource}"
											 SelectedValuePath="{TemplateBinding SelectedValuePath}"
											 HorizontalContentAlignment="Stretch">
								<ListBox.Resources>
									<Style TargetType="{x:Type ListBoxItem}">
										<Setter Property="Template">
											<Setter.Value>
												<!-- The only differences between this template and the stock is the lack of selected-item highlighting, and the addition of mouse-over
																	 highlighting -->
												<ControlTemplate TargetType="{x:Type ListBoxItem}">
													<Border BorderThickness="{TemplateBinding Border.BorderThickness}"
																	Padding="{TemplateBinding Control.Padding}"
																	BorderBrush="{TemplateBinding Border.BorderBrush}"
																	Background="{TemplateBinding Panel.Background}"
																	Name="Bd"
																	SnapsToDevicePixels="True">
														<ContentPresenter Content="{TemplateBinding ContentControl.Content}"
																							ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
																							ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
																							HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
																							VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
																							SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
													</Border>
													<ControlTemplate.Triggers>
														<Trigger Property="UIElement.IsEnabled" Value="false">
															<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
														</Trigger>
														<Trigger Property="IsMouseOver" Value="True">
															<Setter Property="Panel.Background" TargetName="Bd" Value="#88DDFF"></Setter>
															<Setter Property="TextElement.Foreground" Value="{x:Static SystemColors.HighlightTextBrush}"></Setter>
														</Trigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</ListBox.Resources>

								<ListBox.ItemTemplate>
									<HierarchicalDataTemplate>
										<CheckBox x:Name="checkBox"
															Margin="0"
															DataContext="{Binding}"
															Content="{Binding}"
															Command="local:MultiComboBox.SelectCommand"
															CommandParameter="{Binding Content, RelativeSource={RelativeSource Self}}"
															HorizontalAlignment="Stretch">
											<CheckBox.ContentTemplate>
												<HierarchicalDataTemplate>
													<TextBlock Text="{Binding}" Margin="0" />
												</HierarchicalDataTemplate>
											</CheckBox.ContentTemplate>
											<CheckBox.Style>
												<Style TargetType="{x:Type CheckBox}">
													<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
													<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
												</Style>
											</CheckBox.Style>
										</CheckBox>
									</HierarchicalDataTemplate>
								</ListBox.ItemTemplate>

								<ListBox.Style>
									<Style TargetType="{x:Type ListBox}">
										<Style.Triggers>
											<DataTrigger Binding="{Binding IsReadOnly,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ComboBox}}" Value="true">
												<Setter Property="IsEnabled" Value="false" />
												<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
												<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</ListBox.Style>
							</ListBox>
						</ScrollViewer>
					</Border>
				</Grid>
			</Popup>
			<ToggleButton Background="{TemplateBinding Background}"
										x:Name="button"
										BorderBrush="{TemplateBinding BorderBrush}"
										Grid.ColumnSpan="2"
										HorizontalContentAlignment="Stretch"
										HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
										VerticalAlignment="{TemplateBinding VerticalAlignment}"
										IsTabStop="false"
										IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
				<Grid IsHitTestVisible="true">
					<Grid.ColumnDefinitions>
						<ColumnDefinition Width="*"/>
						<ColumnDefinition Width="12" />
					</Grid.ColumnDefinitions>
					<Path x:Name="Arrow"
								Grid.Column="1"
								Fill="{Binding Path=Foreground,ElementName=button}"
								VerticalAlignment="Center"
								HorizontalAlignment="Center"
								SnapsToDevicePixels="true"
								Data="M 0 0 L 3.5 4 L 7 0 Z"/>
					<ContentPresenter x:Name="Presenter"
														Grid.ColumnSpan="2"
														IsHitTestVisible="true" 
														Margin="{TemplateBinding Padding}"
														VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
														HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}">
						<ContentPresenter.Content>
							<TextBlock TextTrimming="CharacterEllipsis"
												 Name="MultiComboBoxTextBox"
												 IsHitTestVisible="true"
												 Margin="0,0,15,0"
												 Text="{TemplateBinding Text}"
												 FontSize="{TemplateBinding FontSize}"
												 FontFamily="{TemplateBinding FontFamily}">
								<TextBlock.Style>
									<Style TargetType="{x:Type TextBlock}">
										<Style.Triggers>
											<Trigger Property="IsEnabled" Value="true">
												<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
											</Trigger>
											<Trigger Property="IsEnabled" Value="false">
												<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
											</Trigger>
											<DataTrigger Binding="{Binding IsEditable,RelativeSource={RelativeSource TemplatedParent}}" Value="true">
												<Setter Property="Visibility" Value="Hidden" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</TextBlock.Style>
							</TextBlock>
						</ContentPresenter.Content>
					</ContentPresenter>
					<TextBox Text="{TemplateBinding Text}"
									 IsReadOnly="{TemplateBinding IsReadOnly}"
									 Padding="{TemplateBinding Padding}"
									 VerticalContentAlignment="Center"
									 HorizontalContentAlignment="Left"
									 VerticalAlignment="Center"
									 HorizontalAlignment="Stretch">
						<TextBox.Template>
							<ControlTemplate TargetType="TextBox">
								<ScrollViewer HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Background="#00FFFFFF" Name="PART_ContentHost" Focusable="False" />
							</ControlTemplate>
						</TextBox.Template>
						<TextBox.Style>
							<Style TargetType="{x:Type TextBox}">
								<Style.Triggers>
									<Trigger Property="IsEnabled" Value="true">	
										<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
									</Trigger>
									<Trigger Property="IsEnabled" Value="false">
										<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
									</Trigger>
									<DataTrigger Binding="{Binding IsEditable,RelativeSource={RelativeSource TemplatedParent}}" Value="false">
										<Setter Property="Visibility" Value="Hidden" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</TextBox.Style>
					</TextBox>
				</Grid>
			</ToggleButton>
		</Grid>
	</ControlTemplate>

	<!-- MultiComboBox default style -->
	<Style TargetType="{x:Type local:MultiComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
		<Setter Property="Template" Value="{StaticResource defaultMultiComBoxTemplate}" />
		<Style.Triggers>
			<Trigger Property="ComboBox.IsEditable" Value="true">
				<Setter Property="Template" Value="{StaticResource defaultMultiComBoxTemplate}" />
			</Trigger>
		</Style.Triggers>
	</Style>
	
	<!-- TreeListViewItem default style -->
	<Style TargetType="{x:Type local:TreeListViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:TreeListViewItem}">
					<StackPanel>
						<Border Name="background"
										Background="{TemplateBinding Background}"
										BorderBrush="{TemplateBinding BorderBrush}"
										BorderThickness="{TemplateBinding BorderThickness}"
										Padding="{TemplateBinding Padding}">
							<GridViewRowPresenter x:Name="PART_Header" 
                                      Content="{TemplateBinding Header}" 
                                      Columns="{Binding Path=View.Columns,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:TreeListView}}" />
						</Border>
						<ItemsPresenter x:Name="ItemsHost" />
					</StackPanel>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded"
                       Value="false">
							<Setter TargetName="ItemsHost"
                        Property="Visibility"
                        Value="Collapsed"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false"/>
								<Condition Property="Width" Value="Auto"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
						</MultiTrigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter TargetName="background"
											Property="Background"
											Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
							<Setter Property="Foreground"
											Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected"
                             Value="true"/>
								<Condition Property="IsSelectionActive"
                             Value="false"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="background"
											Property="Background"
											Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
							<Setter Property="Foreground"
											Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource  {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- TreeListView default style -->
	<Style TargetType="{x:Type local:TreeListView}" BasedOn="{StaticResource {x:Type TreeView}}">
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:TreeListView}">
					<Border Background="White" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto" />
								<RowDefinition Height="*" />
							</Grid.RowDefinitions>
							<GridViewHeaderRowPresenter Columns="{Binding Path=View.Columns,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:TreeListView}}"
																					DockPanel.Dock="Top"/>
							<ScrollViewer Grid.Row="1"  HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
								<ItemsPresenter />
							</ScrollViewer>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	<!-- FolderSelector default style -->
	<Style TargetType="{x:Type local:FolderSelector}" BasedOn="{StaticResource {x:Type TreeView}}">
		<Style.Resources>
			<HierarchicalDataTemplate DataType="{x:Type guardian:FolderTreeNode}"
                              ItemsSource="{Binding Path=Children}">
				<DockPanel x:Name="dockPanel">
					<Image Height="16"
               Margin="1,0,0,0"
               Source="{Binding Path=Entity.ImageSource}"
               Width="16" />
					<TextBlock Margin="0,0,0,1" Padding="4,0,0,0"
                   Text="{Binding Path=Entity.Name}" />
				</DockPanel>
			</HierarchicalDataTemplate>
			<LinearGradientBrush x:Key="ItemAreaSelectedMouseBrush" StartPoint="0.5, 0" EndPoint="0.5, 1">
				<GradientStop Color="#E8F6FD" Offset="0" />
				<GradientStop Color="#C4E8FA" Offset="1" />
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="ItemAreaSelectedBrush" StartPoint="0.5, 0" EndPoint="0.5, 1">
				<GradientStop Color="#F8F8F8" Offset="0" />
				<GradientStop Color="#E5E5E5" Offset="1" />
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="ItemAreaMouseOverBrush" StartPoint="0.5, 0" EndPoint="0.5, 1">
				<GradientStop Color="#F5FAFD" Offset="0" />
				<GradientStop Color="#E8F5FD" Offset="1" />
			</LinearGradientBrush>
			<LinearGradientBrush x:Key="ItemAreaDragOverBrush" StartPoint="0.5, 0" EndPoint="0.5, 1">
				<GradientStop Color="#F1F8FD" Offset="0" />
				<GradientStop Color="#D5EFFC" Offset="1" />
			</LinearGradientBrush>
			<SolidColorBrush x:Key="UncheckedGlyphStrokeBrush" Color="#A5A5A5" />
			<SolidColorBrush x:Key="CheckedGlyphFillBrush" Color="#595959" />
			<SolidColorBrush x:Key="CheckedGlyphStrokeBrush" Color="Black" />
			<Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource {x:Type TreeViewItem}}">
				<Setter Property="Background" Value="Transparent" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="AllowDrop" Value="True" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<!--<Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}" />-->
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TreeViewItem}">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition MinWidth="19" Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition Height="Auto" />
									<RowDefinition />
								</Grid.RowDefinitions>
								<Grid Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" x:Name="gridItem">
									<Grid.ColumnDefinitions>
										<ColumnDefinition MinWidth="19" Width="Auto" />
										<ColumnDefinition Width="Auto" />
										<ColumnDefinition Width="*" />
									</Grid.ColumnDefinitions>
									<ToggleButton ClickMode="Press"
																Grid.Column="0"
																Grid.Row ="0"
																IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
																x:Name="Expander">
										<ToggleButton.Style>
											<Style TargetType="ToggleButton">
												<Setter Property="Focusable" Value="False" />
												<Setter Property="Template">
													<Setter.Value>
														<ControlTemplate TargetType="ToggleButton">
															<Grid Width="16" Height="16" Margin="1" Background="Transparent">
																<Path x:Name="ExpandPath"
																HorizontalAlignment="Left"
																Stroke="{StaticResource UncheckedGlyphStrokeBrush}"
																StrokeThickness="1"
																VerticalAlignment="Center"
																Data="M 4,0 L 8,4 L 4,8 Z" />
															</Grid>
															<ControlTemplate.Triggers>
																<Trigger Property="IsChecked" Value="True">
																	<Setter Property="Data" TargetName="ExpandPath" Value="M 2,8 L 8,2 L 8,8 Z" />
																	<Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource CheckedGlyphStrokeBrush}" />
																	<Setter Property="Fill" TargetName="ExpandPath"	Value="{StaticResource CheckedGlyphFillBrush}" />
																</Trigger>
															</ControlTemplate.Triggers>
														</ControlTemplate>
													</Setter.Value>
												</Setter>
											</Style>

										</ToggleButton.Style>
									</ToggleButton>
									<Border Background="Transparent"
                        BorderBrush="Transparent"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2"
                        Grid.Column="1"
                        Grid.Row ="0"
                        x:Name="borderItem"
                        SnapsToDevicePixels="True">
										<Grid>
											<Rectangle Fill="Transparent"
                               x:Name="rectangleBackground" />
											<Rectangle Fill="Transparent"
                               x:Name="rectangleOutline"
                               Stroke="Transparent"
                               StrokeThickness="1" />
											<ContentPresenter ContentSource="Header"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      x:Name="ContentHost" />
										</Grid>
									</Border>
									<UserControl Grid.Column="2"
                             Grid.Row="0"
                             Background="Transparent" />
								</Grid>
								<ItemsPresenter Grid.Column="1"
                              Grid.ColumnSpan="2"
                              Grid.Row="1"
                              x:Name="ItemsHost" />
							</Grid>
							<ControlTemplate.Resources>
							</ControlTemplate.Resources>
							<ControlTemplate.Triggers>
								<Trigger Property="IsExpanded"
                       Value="false">
									<Setter TargetName="ItemsHost"
                        Property="Visibility"
                        Value="Collapsed" />
								</Trigger>
								<Trigger Property="HasItems"
                       Value="false">
									<Setter TargetName="Expander"
                        Property="Visibility"
                        Value="Hidden" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="HasHeader"
                             Value="false" />
										<Condition Property="Width"
                             Value="Auto" />
									</MultiTrigger.Conditions>
									<Setter TargetName="ContentHost"
                        Property="MinWidth"
                        Value="75" />
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="HasHeader"
                             Value="false" />
										<Condition Property="Height"
                             Value="Auto" />
									</MultiTrigger.Conditions>
									<Setter TargetName="ContentHost"
                        Property="MinHeight"
                        Value="19" />
								</MultiTrigger>
								<Trigger Property="IsMouseOver"
                       SourceName="borderItem"
                       Value="true">
									<Setter TargetName="borderItem"
                        Property="BorderBrush"
                        Value="#D8F0FA" />
									<Setter TargetName="rectangleOutline"
                        Property="Stroke"
                        Value="#6AFFFFFF" />
									<Setter TargetName="rectangleBackground"
                        Property="Fill"
                        Value="{StaticResource ItemAreaMouseOverBrush}" />
								</Trigger>
								<Trigger Property="IsSelected"
                       Value="true">
									<Setter TargetName="borderItem"
                        Property="BorderBrush"
                        Value="#99DEFD" />
									<Setter TargetName="rectangleOutline"
                        Property="Stroke"
                        Value="#6AFFFFFF" />
									<Setter TargetName="rectangleBackground"
                        Property="Fill"
                        Value="{StaticResource ItemAreaDragOverBrush}" />
								</Trigger>
								<Trigger Property="DragDropHelper.IsDragOver"
                       SourceName="gridItem"
                       Value="true">
									<Setter TargetName="borderItem"
                        Property="BorderBrush"
                        Value="#99DEFD" />
									<Setter TargetName="rectangleOutline"
                        Property="Stroke"
                        Value="#6AFFFFFF" />
									<Setter TargetName="rectangleBackground"
                        Property="Fill"
                        Value="{StaticResource ItemAreaDragOverBrush}" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected"
                             Value="True" />
										<Condition Property="IsMouseOver"
                             SourceName="borderItem"
                             Value="True" />
									</MultiTrigger.Conditions>
									<Setter TargetName="borderItem"
                        Property="BorderBrush"
                        Value="#B6E6FB" />
									<Setter TargetName="rectangleOutline"
                        Property="Stroke"
                        Value="#6AFFFFFF" />
									<Setter TargetName="rectangleBackground"
                        Property="Fill"
                        Value="{StaticResource ItemAreaSelectedMouseBrush}" />
								</MultiTrigger>
								<Trigger Property="IsEnabled"
                       Value="false">
									<Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected"
                             Value="True" />
										<Condition Property="IsSelectionActive"
                             Value="False" />
									</MultiTrigger.Conditions>
									<Setter TargetName="borderItem"
                        Property="BorderBrush"
                        Value="#D9D9D9" />
									<Setter TargetName="rectangleOutline"
                        Property="Stroke"
                        Value="#6AFFFFFF" />
									<Setter TargetName="rectangleBackground"
                        Property="Fill"
                        Value="{StaticResource ItemAreaSelectedBrush}" />
								</MultiTrigger>
								<Trigger Property="IsEnabled"
                       Value="false">
									<Setter Property="Foreground"
                        Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</Style.Resources>
	</Style>
	
	<!-- Defaultl style for RightsHolderListBox -->
	<Style TargetType="{x:Type local:RightsHolderListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
		<Style.Resources>
			<guardian:IsConverter x:Key="isConverter" />
			
			<DataTemplate x:Key="holderTemplate" DataType="guardian:RightsHolder">
				<StackPanel FlowDirection="LeftToRight" Orientation="Horizontal">
					<StackPanel.Style>
						<Style TargetType="{x:Type StackPanel}">
							<Style.Triggers>
								<DataTrigger Binding="{Binding Path=DataContext,RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource isConverter},ConverterParameter={x:Type guardian:AccessControl}}"
																 Value="true">
									<Setter Property="DataContext" Value="{Binding Path=DataContext.User,RelativeSource={RelativeSource TemplatedParent}}" />
								</DataTrigger>
								<DataTrigger Binding="{Binding Deleted}" Value="true">
									<Setter Property="Visibility" Value="Collapsed" />
								</DataTrigger>
							</Style.Triggers>
						</Style>
					</StackPanel.Style>
					
					<Image Source="{Binding Path=ImageSource}" Width="16" Height="16"/>
					<TextBlock Text="{Binding Path=Name}">
						<TextBlock.Style>
							<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
								<Style.Triggers>
									<DataTrigger Binding="{Binding Path=MultiTenant,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:RightsHolderListBox}}"
															 Value="true">
										<Setter Property="Visibility" Value="Collapsed" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</TextBlock.Style>
					</TextBlock>
					<TextBlock Text="{Binding Path=QualifiedName}">
						<TextBlock.Style>
							<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
								<Style.Triggers>
									<DataTrigger Binding="{Binding Path=MultiTenant,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=local:RightsHolderListBox}}"
															 Value="false">
										<Setter Property="Visibility" Value="Collapsed" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</TextBlock.Style>
					</TextBlock>
				</StackPanel>
			</DataTemplate>
		</Style.Resources>
		
		<Setter Property="ItemTemplate" Value="{StaticResource holderTemplate}" />
	</Style>
</ResourceDictionary>
