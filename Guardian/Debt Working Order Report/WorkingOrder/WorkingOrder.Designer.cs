//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-fluidtrade-com:guardian:debt-working-order", "FluidTrade.Guardian.Schema.DebtWorkingOrder")]

namespace FluidTrade.Guardian.Schema.DebtWorkingOrder
{
	
	
	/// <summary>
	/// This class provides the AskPrice data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class AskPrice : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal price;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice, FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static AskPrice()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice, FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice>(FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Price
		/// </summary>
		public decimal Price
		{
			get
			{
				return this.price;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice, FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice askPrice = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice)(iContent));
			if ((this.isActive != askPrice.isActive))
			{
				this.isActive = askPrice.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.price != askPrice.price))
			{
				this.price = askPrice.price;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Price"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice askPrice)
		{
			return askPrice;
		}
	}
	
	/// <summary>
	/// This class provides the AvailableQuantity data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class AvailableQuantity : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal quantity;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static AvailableQuantity()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity>(FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Quantity
		/// </summary>
		public decimal Quantity
		{
			get
			{
				return this.quantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity availableQuantity = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity)(iContent));
			if ((this.isActive != availableQuantity.isActive))
			{
				this.isActive = availableQuantity.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.quantity != availableQuantity.quantity))
			{
				this.quantity = availableQuantity.quantity;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Quantity"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity availableQuantity)
		{
			return availableQuantity;
		}
	}
	
	/// <summary>
	/// This class provides the BidPrice data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class BidPrice : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal price;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice, FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static BidPrice()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice, FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice>(FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Price
		/// </summary>
		public decimal Price
		{
			get
			{
				return this.price;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice, FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice bidPrice = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice)(iContent));
			if ((this.isActive != bidPrice.isActive))
			{
				this.isActive = bidPrice.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.price != bidPrice.price))
			{
				this.price = bidPrice.price;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Price"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice bidPrice)
		{
			return bidPrice;
		}
	}
	
	/// <summary>
	/// This class provides the Blotter data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Blotter : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.Guid blotterId;
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter, FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Blotter()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter, FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter>(FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter.SelectFromSelf);
		}
		
		/// <summary>
		/// BlotterId
		/// </summary>
		public System.Guid BlotterId
		{
			get
			{
				return this.blotterId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter, FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter blotter = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter)(iContent));
			if ((this.blotterId != blotter.blotterId))
			{
				this.blotterId = blotter.blotterId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("BlotterId"));
				}
			}
			if ((this.name != blotter.name))
			{
				this.name = blotter.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
			if ((this.isActive != blotter.isActive))
			{
				this.isActive = blotter.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter blotter)
		{
			return blotter;
		}
	}
	
	/// <summary>
	/// This class provides the BrokerMatch data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class BrokerMatch : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal bool isMatch;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch, FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static BrokerMatch()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch, FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch>(FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsMatch
		/// </summary>
		public bool IsMatch
		{
			get
			{
				return this.isMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch, FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch brokerMatch = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch)(iContent));
			if ((this.isActive != brokerMatch.isActive))
			{
				this.isActive = brokerMatch.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.isMatch != brokerMatch.isMatch))
			{
				this.isMatch = brokerMatch.isMatch;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsMatch"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch brokerMatch)
		{
			return brokerMatch;
		}
	}
	
	/// <summary>
	/// This class provides the Coupon data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Coupon : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal rate;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon, FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Coupon()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon, FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon>(FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Rate
		/// </summary>
		public decimal Rate
		{
			get
			{
				return this.rate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon, FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon coupon = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon)(iContent));
			if ((this.isActive != coupon.isActive))
			{
				this.isActive = coupon.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.rate != coupon.rate))
			{
				this.rate = coupon.rate;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Rate"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon coupon)
		{
			return coupon;
		}
	}
	
	/// <summary>
	/// This class provides the CreatedBy data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class CreatedBy : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy, FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy> selectSelf;
		
		internal System.Guid userId;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CreatedBy()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy, FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy>(FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy, FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy.selectSelf;
			}
		}
		
		/// <summary>
		/// UserId
		/// </summary>
		public System.Guid UserId
		{
			get
			{
				return this.userId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy createdBy = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy)(iContent));
			if ((this.isActive != createdBy.isActive))
			{
				this.isActive = createdBy.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != createdBy.name))
			{
				this.name = createdBy.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
			if ((this.userId != createdBy.userId))
			{
				this.userId = createdBy.userId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("UserId"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy createdBy)
		{
			return createdBy;
		}
	}
	
	/// <summary>
	/// This class provides the CreatedTime data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class CreatedTime : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime, FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime> selectSelf;
		
		internal System.DateTime time;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CreatedTime()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime, FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime>(FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime, FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime.selectSelf;
			}
		}
		
		/// <summary>
		/// Time
		/// </summary>
		public System.DateTime Time
		{
			get
			{
				return this.time;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime createdTime = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime)(iContent));
			if ((this.isActive != createdTime.isActive))
			{
				this.isActive = createdTime.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.time != createdTime.time))
			{
				this.time = createdTime.time;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Time"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime createdTime)
		{
			return createdTime;
		}
	}
	
	/// <summary>
	/// This class provides the Crossing data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Crossing : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal bool isCrossing;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing, FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Crossing()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing, FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing>(FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsCrossing
		/// </summary>
		public bool IsCrossing
		{
			get
			{
				return this.isCrossing;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing, FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing crossing = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing)(iContent));
			if ((this.isActive != crossing.isActive))
			{
				this.isActive = crossing.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.isCrossing != crossing.isCrossing))
			{
				this.isCrossing = crossing.isCrossing;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsCrossing"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing crossing)
		{
			return crossing;
		}
	}
	
	/// <summary>
	/// This class provides the DestinationOrderQuantity data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class DestinationOrderQuantity : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal quantity;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static DestinationOrderQuantity()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity>(FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Quantity
		/// </summary>
		public decimal Quantity
		{
			get
			{
				return this.quantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity destinationOrderQuantity = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity)(iContent));
			if ((this.isActive != destinationOrderQuantity.isActive))
			{
				this.isActive = destinationOrderQuantity.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.quantity != destinationOrderQuantity.quantity))
			{
				this.quantity = destinationOrderQuantity.quantity;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Quantity"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity destinationOrderQuantity)
		{
			return destinationOrderQuantity;
		}
	}
	
	/// <summary>
	/// This class provides the ExecutionQuantity data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class ExecutionQuantity : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal quantity;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static ExecutionQuantity()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity>(FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Quantity
		/// </summary>
		public decimal Quantity
		{
			get
			{
				return this.quantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity executionQuantity = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity)(iContent));
			if ((this.isActive != executionQuantity.isActive))
			{
				this.isActive = executionQuantity.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.quantity != executionQuantity.quantity))
			{
				this.quantity = executionQuantity.quantity;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Quantity"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity executionQuantity)
		{
			return executionQuantity;
		}
	}
	
	/// <summary>
	/// This class provides the HedgeMatch data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class HedgeMatch : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal bool isMatch;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch, FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static HedgeMatch()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch, FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch>(FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsMatch
		/// </summary>
		public bool IsMatch
		{
			get
			{
				return this.isMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch, FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch hedgeMatch = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch)(iContent));
			if ((this.isActive != hedgeMatch.isActive))
			{
				this.isActive = hedgeMatch.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.isMatch != hedgeMatch.isMatch))
			{
				this.isMatch = hedgeMatch.isMatch;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsMatch"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch hedgeMatch)
		{
			return hedgeMatch;
		}
	}
	
	/// <summary>
	/// This class provides the InstitutionMatch data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class InstitutionMatch : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal bool isMatch;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch, FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static InstitutionMatch()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch, FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch>(FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsMatch
		/// </summary>
		public bool IsMatch
		{
			get
			{
				return this.isMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch, FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch institutionMatch = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch)(iContent));
			if ((this.isActive != institutionMatch.isActive))
			{
				this.isActive = institutionMatch.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.isMatch != institutionMatch.isMatch))
			{
				this.isMatch = institutionMatch.isMatch;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsMatch"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch institutionMatch)
		{
			return institutionMatch;
		}
	}
	
	/// <summary>
	/// This class provides the LastPrice data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class LastPrice : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal price;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice, FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static LastPrice()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice, FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice>(FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Price
		/// </summary>
		public decimal Price
		{
			get
			{
				return this.price;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice, FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice lastPrice = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice)(iContent));
			if ((this.isActive != lastPrice.isActive))
			{
				this.isActive = lastPrice.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.price != lastPrice.price))
			{
				this.price = lastPrice.price;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Price"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice lastPrice)
		{
			return lastPrice;
		}
	}
	
	/// <summary>
	/// This class provides the LeavesQuantity data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class LeavesQuantity : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal quantity;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static LeavesQuantity()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity>(FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Quantity
		/// </summary>
		public decimal Quantity
		{
			get
			{
				return this.quantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity leavesQuantity = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity)(iContent));
			if ((this.isActive != leavesQuantity.isActive))
			{
				this.isActive = leavesQuantity.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.quantity != leavesQuantity.quantity))
			{
				this.quantity = leavesQuantity.quantity;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Quantity"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity leavesQuantity)
		{
			return leavesQuantity;
		}
	}
	
	/// <summary>
	/// This class provides the MarketValue data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class MarketValue : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue, FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue> selectSelf;
		
		internal decimal value;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static MarketValue()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue, FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue>(FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue, FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue.selectSelf;
			}
		}
		
		/// <summary>
		/// Value
		/// </summary>
		public decimal Value
		{
			get
			{
				return this.value;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue marketValue = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue)(iContent));
			if ((this.isActive != marketValue.isActive))
			{
				this.isActive = marketValue.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.value != marketValue.value))
			{
				this.value = marketValue.value;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Value"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue marketValue)
		{
			return marketValue;
		}
	}
	
	/// <summary>
	/// This class provides the MaturityDate data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class MaturityDate : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.DateTime date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate, FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static MaturityDate()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate, FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate>(FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public System.DateTime Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate, FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate maturityDate = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate)(iContent));
			if ((this.isActive != maturityDate.isActive))
			{
				this.isActive = maturityDate.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.date != maturityDate.date))
			{
				this.date = maturityDate.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate maturityDate)
		{
			return maturityDate;
		}
	}
	
	/// <summary>
	/// This class provides the ModifiedBy data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class ModifiedBy : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy, FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy> selectSelf;
		
		internal System.Guid userId;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static ModifiedBy()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy, FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy>(FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy, FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy.selectSelf;
			}
		}
		
		/// <summary>
		/// UserId
		/// </summary>
		public System.Guid UserId
		{
			get
			{
				return this.userId;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy modifiedBy = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy)(iContent));
			if ((this.isActive != modifiedBy.isActive))
			{
				this.isActive = modifiedBy.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != modifiedBy.name))
			{
				this.name = modifiedBy.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
			if ((this.userId != modifiedBy.userId))
			{
				this.userId = modifiedBy.userId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("UserId"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy modifiedBy)
		{
			return modifiedBy;
		}
	}
	
	/// <summary>
	/// This class provides the ModifiedTime data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class ModifiedTime : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime, FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime> selectSelf;
		
		internal System.DateTime time;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static ModifiedTime()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime, FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime>(FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime, FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime.selectSelf;
			}
		}
		
		/// <summary>
		/// Time
		/// </summary>
		public System.DateTime Time
		{
			get
			{
				return this.time;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime modifiedTime = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime)(iContent));
			if ((this.isActive != modifiedTime.isActive))
			{
				this.isActive = modifiedTime.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.time != modifiedTime.time))
			{
				this.time = modifiedTime.time;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Time"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime modifiedTime)
		{
			return modifiedTime;
		}
	}
	
	/// <summary>
	/// This class provides the OrderType data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class OrderType : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal limitPrice;
		
		internal string mnemonic;
		
		internal FluidTrade.Core.OrderType orderTypeCode;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType, FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType> selectSelf;
		
		internal decimal stopPrice;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static OrderType()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType, FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType>(FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// LimitPrice
		/// </summary>
		public decimal LimitPrice
		{
			get
			{
				return this.limitPrice;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Mnemonic
		/// </summary>
		public string Mnemonic
		{
			get
			{
				return this.mnemonic;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// OrderTypeCode
		/// </summary>
		public FluidTrade.Core.OrderType OrderTypeCode
		{
			get
			{
				return this.orderTypeCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType, FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType.selectSelf;
			}
		}
		
		/// <summary>
		/// StopPrice
		/// </summary>
		public decimal StopPrice
		{
			get
			{
				return this.stopPrice;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType orderType = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType)(iContent));
			if ((this.isActive != orderType.isActive))
			{
				this.isActive = orderType.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.limitPrice != orderType.limitPrice))
			{
				this.limitPrice = orderType.limitPrice;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("LimitPrice"));
				}
			}
			if ((this.mnemonic != orderType.mnemonic))
			{
				this.mnemonic = orderType.mnemonic;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Mnemonic"));
				}
			}
			if ((this.orderTypeCode != orderType.orderTypeCode))
			{
				this.orderTypeCode = orderType.orderTypeCode;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("OrderTypeCode"));
				}
			}
			if ((this.stopPrice != orderType.stopPrice))
			{
				this.stopPrice = orderType.stopPrice;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("StopPrice"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType orderType)
		{
			return orderType;
		}
	}
	
	/// <summary>
	/// This class provides the SecurityName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SecurityName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string name;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName, FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SecurityName()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName, FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName>(FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName, FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName securityName = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName)(iContent));
			if ((this.isActive != securityName.isActive))
			{
				this.isActive = securityName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != securityName.name))
			{
				this.name = securityName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName securityName)
		{
			return securityName;
		}
	}
	
	/// <summary>
	/// This class provides the SecuritySymbol data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SecuritySymbol : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol, FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol> selectSelf;
		
		internal string symbol;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SecuritySymbol()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol, FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol>(FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol, FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol.selectSelf;
			}
		}
		
		/// <summary>
		/// Symbol
		/// </summary>
		public string Symbol
		{
			get
			{
				return this.symbol;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol securitySymbol = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol)(iContent));
			if ((this.isActive != securitySymbol.isActive))
			{
				this.isActive = securitySymbol.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.symbol != securitySymbol.symbol))
			{
				this.symbol = securitySymbol.symbol;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Symbol"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol securitySymbol)
		{
			return securitySymbol;
		}
	}
	
	/// <summary>
	/// This class provides the SettlementDate data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SettlementDate : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.DateTime date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate, FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SettlementDate()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate, FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate>(FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public System.DateTime Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate, FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate settlementDate = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate)(iContent));
			if ((this.date != settlementDate.date))
			{
				this.date = settlementDate.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
			if ((this.isActive != settlementDate.isActive))
			{
				this.isActive = settlementDate.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate settlementDate)
		{
			return settlementDate;
		}
	}
	
	/// <summary>
	/// This class provides the Side data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Side : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal string description;
		
		internal bool isActive;
		
		internal object key;
		
		internal string mnemonic;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Side, FluidTrade.Guardian.Schema.DebtWorkingOrder.Side> selectSelf;
		
		internal FluidTrade.Core.Side sideCode;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Side()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.Side.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Side, FluidTrade.Guardian.Schema.DebtWorkingOrder.Side>(FluidTrade.Guardian.Schema.DebtWorkingOrder.Side.SelectFromSelf);
		}
		
		/// <summary>
		/// Description
		/// </summary>
		public string Description
		{
			get
			{
				return this.description;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Mnemonic
		/// </summary>
		public string Mnemonic
		{
			get
			{
				return this.mnemonic;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.Side records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Side, FluidTrade.Guardian.Schema.DebtWorkingOrder.Side> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.Side.selectSelf;
			}
		}
		
		/// <summary>
		/// SideCode
		/// </summary>
		public FluidTrade.Core.Side SideCode
		{
			get
			{
				return this.sideCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.Side to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.Side side = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.Side)(iContent));
			if ((this.isActive != side.isActive))
			{
				this.isActive = side.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.mnemonic != side.mnemonic))
			{
				this.mnemonic = side.mnemonic;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Mnemonic"));
				}
			}
			if ((this.description != side.description))
			{
				this.description = side.description;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Description"));
				}
			}
			if ((this.sideCode != side.sideCode))
			{
				this.sideCode = side.sideCode;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("SideCode"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.Side SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.Side side)
		{
			return side;
		}
	}
	
	/// <summary>
	/// This class provides the SourceOrderQuantity data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class SourceOrderQuantity : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal decimal quantity;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SourceOrderQuantity()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity>(FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Quantity
		/// </summary>
		public decimal Quantity
		{
			get
			{
				return this.quantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity, FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity sourceOrderQuantity = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity)(iContent));
			if ((this.isActive != sourceOrderQuantity.isActive))
			{
				this.isActive = sourceOrderQuantity.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.quantity != sourceOrderQuantity.quantity))
			{
				this.quantity = sourceOrderQuantity.quantity;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Quantity"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity sourceOrderQuantity)
		{
			return sourceOrderQuantity;
		}
	}
	
	/// <summary>
	/// This class provides the Status data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class Status : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		internal string mnemonic;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Status, FluidTrade.Guardian.Schema.DebtWorkingOrder.Status> selectSelf;
		
		internal FluidTrade.Guardian.Status statusCode;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Status()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.Status.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Status, FluidTrade.Guardian.Schema.DebtWorkingOrder.Status>(FluidTrade.Guardian.Schema.DebtWorkingOrder.Status.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Mnemonic
		/// </summary>
		public string Mnemonic
		{
			get
			{
				return this.mnemonic;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.Status records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.Status, FluidTrade.Guardian.Schema.DebtWorkingOrder.Status> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.Status.selectSelf;
			}
		}
		
		/// <summary>
		/// StatusCode
		/// </summary>
		public FluidTrade.Guardian.Status StatusCode
		{
			get
			{
				return this.statusCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.Status to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.Status status = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.Status)(iContent));
			if ((this.mnemonic != status.mnemonic))
			{
				this.mnemonic = status.mnemonic;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Mnemonic"));
				}
			}
			if ((this.isActive != status.isActive))
			{
				this.isActive = status.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.statusCode != status.statusCode))
			{
				this.statusCode = status.statusCode;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("StatusCode"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.Status SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.Status status)
		{
			return status;
		}
	}
	
	/// <summary>
	/// This class provides the TimeInForce data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class TimeInForce : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce, FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce> selectSelf;
		
		internal FluidTrade.Core.TimeInForce timeInForceCode;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static TimeInForce()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce, FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce>(FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce.SelectFromSelf);
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce, FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce.selectSelf;
			}
		}
		
		/// <summary>
		/// TimeInForceCode
		/// </summary>
		public FluidTrade.Core.TimeInForce TimeInForceCode
		{
			get
			{
				return this.timeInForceCode;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce timeInForce = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce)(iContent));
			if ((this.isActive != timeInForce.isActive))
			{
				this.isActive = timeInForce.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.timeInForceCode != timeInForce.timeInForceCode))
			{
				this.timeInForceCode = timeInForce.timeInForceCode;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("TimeInForceCode"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce timeInForce)
		{
			return timeInForce;
		}
	}
	
	/// <summary>
	/// This class provides the TradeDate data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class TradeDate : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{
		
		internal System.DateTime date;
		
		internal bool isActive;
		
		internal object key;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate, FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate> selectSelf;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static TradeDate()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate, FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate>(FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate.SelectFromSelf);
		}
		
		/// <summary>
		/// Date
		/// </summary>
		public System.DateTime Date
		{
			get
			{
				return this.date;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate, FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate.selectSelf;
			}
		}
		
		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate tradeDate = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate)(iContent));
			if ((this.date != tradeDate.date))
			{
				this.date = tradeDate.date;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Date"));
				}
			}
			if ((this.isActive != tradeDate.isActive))
			{
				this.isActive = tradeDate.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate tradeDate)
		{
			return tradeDate;
		}
	}
	
	/// <summary>
	/// This class provides the WorkingOrder data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class WorkingOrder : FluidTrade.Core.IContent
	{
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice askPrice;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity availableQuantity;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice bidPrice;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter blotter;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch brokerMatch;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon coupon;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy createdBy;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime createdTime;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing crossing;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity destinationOrderQuantity;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity executionQuantity;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch hedgeMatch;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch institutionMatch;
		
		internal object key;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice lastPrice;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity leavesQuantity;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue marketValue;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate maturityDate;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy modifiedBy;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime modifiedTime;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType orderType;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName securityName;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol securitySymbol;
		
		private static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder, FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder> selectSelf;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate settlementDate;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.Side side;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity sourceOrderQuantity;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.Status status;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce timeInForce;
		
		internal FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate tradeDate;
		
		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static WorkingOrder()
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder, FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder>(FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder.SelectFromSelf);
		}
		
		/// <summary>
		/// Creates a FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder.
		/// </summary>
		public WorkingOrder()
		{
			this.askPrice = new FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice();
			this.bidPrice = new FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice();
			this.blotter = new FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter();
			this.brokerMatch = new FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch();
			this.coupon = new FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon();
			this.createdBy = new FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy();
			this.createdTime = new FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime();
			this.crossing = new FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing();
			this.destinationOrderQuantity = new FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity();
			this.executionQuantity = new FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity();
			this.hedgeMatch = new FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch();
			this.institutionMatch = new FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch();
			this.lastPrice = new FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice();
			this.maturityDate = new FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate();
			this.modifiedBy = new FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy();
			this.modifiedTime = new FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime();
			this.orderType = new FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType();
			this.securityName = new FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName();
			this.securitySymbol = new FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol();
			this.settlementDate = new FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate();
			this.side = new FluidTrade.Guardian.Schema.DebtWorkingOrder.Side();
			this.sourceOrderQuantity = new FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity();
			this.status = new FluidTrade.Guardian.Schema.DebtWorkingOrder.Status();
			this.timeInForce = new FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce();
			this.tradeDate = new FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate();
			this.availableQuantity = new FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity();
			this.leavesQuantity = new FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity();
			this.marketValue = new FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue();
		}
		
		/// <summary>
		/// AskPrice
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.AskPrice AskPrice
		{
			get
			{
				return this.askPrice;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// AvailableQuantity
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.AvailableQuantity AvailableQuantity
		{
			get
			{
				return this.availableQuantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// BidPrice
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.BidPrice BidPrice
		{
			get
			{
				return this.bidPrice;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Blotter
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.Blotter Blotter
		{
			get
			{
				return this.blotter;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// BrokerMatch
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.BrokerMatch BrokerMatch
		{
			get
			{
				return this.brokerMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Coupon
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.Coupon Coupon
		{
			get
			{
				return this.coupon;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// CreatedBy
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedBy CreatedBy
		{
			get
			{
				return this.createdBy;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// CreatedTime
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.CreatedTime CreatedTime
		{
			get
			{
				return this.createdTime;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Crossing
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.Crossing Crossing
		{
			get
			{
				return this.crossing;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// DestinationOrderQuantity
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.DestinationOrderQuantity DestinationOrderQuantity
		{
			get
			{
				return this.destinationOrderQuantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// ExecutionQuantity
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.ExecutionQuantity ExecutionQuantity
		{
			get
			{
				return this.executionQuantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// HedgeMatch
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.HedgeMatch HedgeMatch
		{
			get
			{
				return this.hedgeMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// InstitutionMatch
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.InstitutionMatch InstitutionMatch
		{
			get
			{
				return this.institutionMatch;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.key;
			}
			set
			{
				this.key = value;
			}
		}
		
		/// <summary>
		/// LastPrice
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.LastPrice LastPrice
		{
			get
			{
				return this.lastPrice;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// LeavesQuantity
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.LeavesQuantity LeavesQuantity
		{
			get
			{
				return this.leavesQuantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// MarketValue
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.MarketValue MarketValue
		{
			get
			{
				return this.marketValue;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// MaturityDate
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.MaturityDate MaturityDate
		{
			get
			{
				return this.maturityDate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// ModifiedBy
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedBy ModifiedBy
		{
			get
			{
				return this.modifiedBy;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// ModifiedTime
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.ModifiedTime ModifiedTime
		{
			get
			{
				return this.modifiedTime;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// OrderType
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.OrderType OrderType
		{
			get
			{
				return this.orderType;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SecurityName
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.SecurityName SecurityName
		{
			get
			{
				return this.securityName;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SecuritySymbol
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.SecuritySymbol SecuritySymbol
		{
			get
			{
				return this.securitySymbol;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder, FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder.selectSelf;
			}
		}
		
		/// <summary>
		/// SettlementDate
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.SettlementDate SettlementDate
		{
			get
			{
				return this.settlementDate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Side
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.Side Side
		{
			get
			{
				return this.side;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// SourceOrderQuantity
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.SourceOrderQuantity SourceOrderQuantity
		{
			get
			{
				return this.sourceOrderQuantity;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Status
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.Status Status
		{
			get
			{
				return this.status;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// TimeInForce
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.TimeInForce TimeInForce
		{
			get
			{
				return this.timeInForce;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// TradeDate
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.TradeDate TradeDate
		{
			get
			{
				return this.tradeDate;
			}
			set
			{

			}
		}
		
		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder workingOrder = ((FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder)(iContent));
			this.askPrice.Copy(workingOrder.askPrice);
			this.bidPrice.Copy(workingOrder.bidPrice);
			this.blotter.Copy(workingOrder.blotter);
			this.brokerMatch.Copy(workingOrder.brokerMatch);
			this.coupon.Copy(workingOrder.coupon);
			this.createdBy.Copy(workingOrder.createdBy);
			this.createdTime.Copy(workingOrder.createdTime);
			this.crossing.Copy(workingOrder.crossing);
			this.destinationOrderQuantity.Copy(workingOrder.destinationOrderQuantity);
			this.executionQuantity.Copy(workingOrder.executionQuantity);
			this.hedgeMatch.Copy(workingOrder.hedgeMatch);
			this.institutionMatch.Copy(workingOrder.institutionMatch);
			this.lastPrice.Copy(workingOrder.lastPrice);
			this.maturityDate.Copy(workingOrder.maturityDate);
			this.modifiedBy.Copy(workingOrder.modifiedBy);
			this.modifiedTime.Copy(workingOrder.modifiedTime);
			this.orderType.Copy(workingOrder.orderType);
			this.securityName.Copy(workingOrder.securityName);
			this.securitySymbol.Copy(workingOrder.securitySymbol);
			this.settlementDate.Copy(workingOrder.settlementDate);
			this.side.Copy(workingOrder.side);
			this.sourceOrderQuantity.Copy(workingOrder.sourceOrderQuantity);
			this.status.Copy(workingOrder.status);
			this.timeInForce.Copy(workingOrder.timeInForce);
			this.tradeDate.Copy(workingOrder.tradeDate);
			this.availableQuantity.Copy(workingOrder.availableQuantity);
			this.leavesQuantity.Copy(workingOrder.leavesQuantity);
			this.marketValue.Copy(workingOrder.marketValue);
		}
		
		/// <summary>
		/// Creates a FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder.
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder Select(FluidTrade.Guardian.WorkingOrderRow workingOrderRow)
		{
			this.key = workingOrderRow;
PriceRow priceRow = DataModel.Price.PriceKey.Find(workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.SecurityId, workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SettlementId.SecurityId);
;
decimal priceFactor = workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.PriceFactor;
;
decimal quantityFactor = workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.QuantityFactor;
;
			this.askPrice.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.askPrice.price = priceRow == null ? 0.0M : priceRow.AskPrice;
			this.bidPrice.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.bidPrice.price = priceRow == null ? 0.0M : priceRow.BidPrice;
			this.blotter.blotterId = workingOrderRow.BlotterId;
			this.blotter.name = workingOrderRow.BlotterRow.EntityRow.Name;
			this.blotter.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.brokerMatch.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.IsBrokerMatchColumn);
			this.brokerMatch.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.brokerMatch.isMatch = workingOrderRow.IsBrokerMatch;
			this.coupon.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

              DebtRow debtRow0 = DataModel.Debt.DebtKey.Find(workingOrderRow.SecurityId);
			this.coupon.rate = 
              debtRow0 == null ? 0.0M : debtRow0.Coupon
            ;
			this.createdBy.name = workingOrderRow.UserRow.RightsHolderRow.EntityRow.Name;
			this.createdBy.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.createdBy.userId = workingOrderRow.CreatedUserId;
			this.createdTime.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.createdTime.time = workingOrderRow.CreatedTime.ToLocalTime();
			this.crossing.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.CrossingIdColumn);
			this.crossing.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.crossing.isCrossing = workingOrderRow.CrossingRow.CrossingCode == FluidTrade.Guardian.Crossing.AlwaysMatch;
			this.destinationOrderQuantity.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

              decimal destinationOrderQuantity = 0.0m;

              foreach (DestinationOrderRow destinationOrderRow in workingOrderRow.GetDestinationOrderRows())
              destinationOrderQuantity += destinationOrderRow.OrderedQuantity;
			this.destinationOrderQuantity.quantity = 
              destinationOrderQuantity / quantityFactor
            ;
			this.executionQuantity.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

              decimal executionQuantity = 0.0m;

              foreach (DestinationOrderRow destinationOrderRow in workingOrderRow.GetDestinationOrderRows())
              foreach (ExecutionRow executionRow in destinationOrderRow.GetExecutionRows())
              executionQuantity += executionRow.ExecutionQuantity;
			this.executionQuantity.quantity = 
              executionQuantity / quantityFactor
            ;
			this.hedgeMatch.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.IsHedgeMatchColumn);
			this.hedgeMatch.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.hedgeMatch.isMatch = workingOrderRow.IsHedgeMatch;
			this.institutionMatch.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.IsInstitutionMatchColumn);
			this.institutionMatch.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.institutionMatch.isMatch = workingOrderRow.IsInstitutionMatch;
			this.lastPrice.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.lastPrice.price = priceRow == null ? 0.0M : priceRow.LastPrice;
			this.maturityDate.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

              DebtRow debtRow1 = DataModel.Debt.DebtKey.Find(workingOrderRow.SecurityId);
			this.maturityDate.date = 
              debtRow1 == null ? System.DateTime.MinValue : debtRow1.MaturityDate
            ;
			this.modifiedBy.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.modifiedBy.name = "";
			this.modifiedBy.userId = workingOrderRow.ModifiedUserId;
			this.modifiedTime.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.modifiedTime.time = workingOrderRow.ModifiedTime.ToLocalTime();
			this.orderType.limitPrice = workingOrderRow.IsLimitPriceNull() ? 0.0M : workingOrderRow.LimitPrice;
			this.orderType.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.orderType.mnemonic = workingOrderRow.OrderTypeRow.Mnemonic;
			this.orderType.orderTypeCode = workingOrderRow.OrderTypeRow.OrderTypeCode;
			this.orderType.stopPrice = workingOrderRow.IsStopPriceNull() ? 0.0M : workingOrderRow.StopPrice;
			this.securityName.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.securityName.name = workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.EntityRow.Name;
			this.securitySymbol.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.securitySymbol.symbol = workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.Symbol;
			this.settlementDate.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.settlementDate.date = workingOrderRow.SettlementDate;
			this.side.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.side.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.SideIdColumn);
			this.side.description = workingOrderRow.SideRow.Description;
			this.side.mnemonic = workingOrderRow.SideRow.Mnemonic;
			this.side.sideCode = workingOrderRow.SideRow.SideCode;
			this.sourceOrderQuantity.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

              decimal sourceOrderQuantity = 0.0m;

              foreach (SourceOrderRow sourceOrderRow in workingOrderRow.GetSourceOrderRows())
              sourceOrderQuantity += sourceOrderRow.OrderedQuantity;
			this.sourceOrderQuantity.quantity = 
              sourceOrderQuantity / quantityFactor
            ;
			this.status.mnemonic = workingOrderRow.StatusRow.Mnemonic;
			this.status.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.status.statusCode = workingOrderRow.StatusRow.StatusCode;
			this.timeInForce.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.timeInForce.key = new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.TimeInForceIdColumn);
			this.timeInForce.timeInForceCode = workingOrderRow.TimeInForceRow.TimeInForceCode;
			this.tradeDate.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.tradeDate.date = workingOrderRow.TradeDate;
			this.availableQuantity.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.availableQuantity.quantity = this.SourceOrderQuantity.Quantity - this.DestinationOrderQuantity.Quantity;
			this.leavesQuantity.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.leavesQuantity.quantity = this.DestinationOrderQuantity.Quantity - this.ExecutionQuantity.Quantity;
			this.marketValue.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.marketValue.value = priceRow == null ? 0.0M : this.SourceOrderQuantity.Quantity * quantityFactor * priceRow.LastPrice;
			return this;
		}
		
		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder SelectFromSelf(FluidTrade.Guardian.Schema.DebtWorkingOrder.WorkingOrder workingOrder)
		{
			return workingOrder;
		}
	}
}
