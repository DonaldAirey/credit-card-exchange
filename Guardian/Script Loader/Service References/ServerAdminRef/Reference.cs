//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FluidTrade.Guardian.ServerAdminRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerAdminRef.IServerAdmin")]
    public interface IServerAdmin {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdmin/LoadScriptFile", ReplyAction="http://tempuri.org/IServerAdmin/LoadScriptFileResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(FluidTrade.Core.ErrorCode))]
        FluidTrade.Core.AsyncMethodResponse LoadScriptFile(System.Guid clientId, string scriptFilePath, bool streamFileContentsBackToClient);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdmin/OutputLocksToLog", ReplyAction="http://tempuri.org/IServerAdmin/OutputLocksToLogResponse")]
        void OutputLocksToLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdmin/CleanUnpairedMatches", ReplyAction="http://tempuri.org/IServerAdmin/CleanUnpairedMatchesResponse")]
        void CleanUnpairedMatches();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdmin/RematchAllWorkingOrders", ReplyAction="http://tempuri.org/IServerAdmin/RematchAllWorkingOrdersResponse")]
        void RematchAllWorkingOrders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerAdmin/ResetServerConfigs", ReplyAction="http://tempuri.org/IServerAdmin/ResetServerConfigsResponse")]
        void ResetServerConfigs();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerAdminChannel : FluidTrade.Guardian.ServerAdminRef.IServerAdmin, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerAdminClient : System.ServiceModel.ClientBase<FluidTrade.Guardian.ServerAdminRef.IServerAdmin>, FluidTrade.Guardian.ServerAdminRef.IServerAdmin {
        
        public ServerAdminClient() {
        }
        
        public ServerAdminClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServerAdminClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerAdminClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServerAdminClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FluidTrade.Core.AsyncMethodResponse LoadScriptFile(System.Guid clientId, string scriptFilePath, bool streamFileContentsBackToClient) {
            return base.Channel.LoadScriptFile(clientId, scriptFilePath, streamFileContentsBackToClient);
        }
        
        public void OutputLocksToLog() {
            base.Channel.OutputLocksToLog();
        }
        
        public void CleanUnpairedMatches() {
            base.Channel.CleanUnpairedMatches();
        }
        
        public void RematchAllWorkingOrders() {
            base.Channel.RematchAllWorkingOrders();
        }
        
        public void ResetServerConfigs() {
            base.Channel.ResetServerConfigs();
        }
    }
}
