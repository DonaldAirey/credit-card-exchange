/*******************************************************************************
*	<auto-generated>
*	This code was generated by a tool.
*	Runtime Version:1.0.0.0
*
*	Changes to this file may cause incorrect behavior and will be lost if
*	the code is regenerated.
*	</auto-generated>
*******************************************************************************/

/* Set the environment */
set nocount on
set quoted_identifier on

/* The VersionControl table keeps track of the current revision of a table. */
begin transaction

/* Drop the previous table */
if exists (select * from sysobjects where type = 'F' and name = 'VersionControlVersionTag')
	alter table "VersionTag" drop constraint "VersionControlVersionTag"
if exists (select * from sysobjects where type = 'U' and name = 'VersionControl')
	drop table "VersionControl"

/* Create the table */
CREATE TABLE "VersionControl" (
	"Name" "varchar"(64) NOT NULL ,
	"Revision" "decimal" NOT NULL 
) ON "PRIMARY"

/* Primary Clustered Index. */
ALTER TABLE "VersionControl" WITH NOCHECK ADD 
	CONSTRAINT "KeyVersionControl" PRIMARY KEY  CLUSTERED 
	(
		"Name"
	)  ON "PRIMARY" 

/* The table and keys can be committed now. */
commit transaction
go

/* Write the status of the operation to the log. */
if @@error = 0
	print convert(varchar, getdate(), 120) + 'Z Table: "VersionControl", Created'
else
	print convert(varchar, getdate(), 120) + 'Z Table: "VersionControl", Error creating'
go

/* The VersionHistory is a record of all the revisions in this database. */
begin transaction

/* Drop the previous table */
if exists (select * from sysobjects where type = 'F' and name = 'VersionHistoryVersionTag')
	alter table "VersionTag" drop constraint "VersionHistoryVersionTag"
if exists (select * from sysobjects where type = 'U' and name = 'VersionHistory')
	drop table "VersionHistory"

/* Create the table */
CREATE TABLE "VersionHistory" (
	"Label" "sysname" NOT NULL ,
	"Date" "Datetime" NULL ,
	"Active" "bit" NULL 
) ON "PRIMARY"

/* Primary Clustered Index. */
ALTER TABLE "VersionHistory" WITH NOCHECK ADD 
	CONSTRAINT "KeyVersionHistory" PRIMARY KEY  CLUSTERED 
	(
		"Label"
	)  ON "PRIMARY" 

/* The table and keys can be committed now. */
commit transaction
go

/* Write the status of the operation to the log. */
if @@error = 0
	print convert(varchar, getdate(), 120) + 'Z Table: "VersionHistory", Created'
else
	print convert(varchar, getdate(), 120) + 'Z Table: "VersionHistory", Error creating'
go

/* The VersionTag is used to collect various revisions of tables into a single release. */
begin transaction

/* Drop the previous table */
if exists (select * from sysobjects where type = 'U' and name = 'VersionTag')
	drop table "VersionTag"

/* Create the table */
CREATE TABLE "VersionTag" (
	"Label" "sysname" NOT NULL ,
	"Name" "varchar"(64) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL ,
	"Revision" "int" NOT NULL 
) ON "PRIMARY"

/* Primary Clustered Index. */
ALTER TABLE "VersionTag" WITH NOCHECK ADD 
	CONSTRAINT "PKVersionTag" PRIMARY KEY  CLUSTERED 
	(
		"Label",
		"Name"
	)  ON "PRIMARY" 

/* Foreign keys */
ALTER TABLE "VersionTag" ADD 
	CONSTRAINT "VersionControlVersionTag" FOREIGN KEY 
	(
		"Name"
	) REFERENCES "VersionControl" (
		"Name"
	),
	CONSTRAINT "VersionHistoryVersionTag" FOREIGN KEY 
	(
		"Label"
	) REFERENCES "VersionHistory" (
		"Label"
	)

/* The table, indices and constraints can be committed now. */
commit transaction
go

/* Write the status of the operation to the log. */
if @@error = 0
	print convert(varchar, getdate(), 120) + 'Z Table: "VersionTag", Created'
else
	print convert(varchar, getdate(), 120) + 'Z Table: "VersionTag", Error creating'
go

/* The AccessRight Table */
if not exists (select * from "VersionControl" where "Name" = 'AccessRight')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "AccessRight" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'AccessRight'
	print convert(varchar, getdate(), 120) + 'Z Table: "AccessRight", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'AccessRight'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'AccessRight'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'AccessRight')
		drop table "AccessRight"

	/* Create the table. */
	create table "AccessRight" (
		"AccessRightCode" "int" not null,
		"AccessRightId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"Name" "nvarchar"(max) null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "AccessRight" with nocheck add 
		constraint "AccessRightKey" primary key clustered
		(
			"AccessRightId"
		)  on "PRIMARY" ,
		constraint "AccessRightKeyAccessRightCode" unique
		(
			"AccessRightCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "AccessRightKeyExternalId0"
		on "AccessRight"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "AccessRight" with nocheck add 
		constraint "DefaultAccessRightIsArchived" default (0) for "IsArchived",
		constraint "DefaultAccessRightIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'AccessRight')
		update "VersionControl" set "Revision" = 0 where "Name" = 'AccessRight'
	else
		insert "VersionControl" ("Name", "Revision") select 'AccessRight', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'AccessRight'
	print convert(varchar, getdate(), 120) + 'Z Table: "AccessRight", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'AccessRight'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "AccessRight", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The City Table */
if not exists (select * from "VersionControl" where "Name" = 'City')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "City" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'City'
	print convert(varchar, getdate(), 120) + 'Z Table: "City", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'City'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'City'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'City')
		drop table "City"

	/* Create the table. */
	create table "City" (
		"CityId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"Name" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "City" with nocheck add 
		constraint "CityKey" primary key clustered
		(
			"CityId"
		)  on "PRIMARY" 


	/* Defaults */
	alter table "City" with nocheck add 
		constraint "DefaultCityIsArchived" default (0) for "IsArchived",
		constraint "DefaultCityIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'City')
		update "VersionControl" set "Revision" = 0 where "Name" = 'City'
	else
		insert "VersionControl" ("Name", "Revision") select 'City', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'City'
	print convert(varchar, getdate(), 120) + 'Z Table: "City", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'City'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "City", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The CommissionSchedule Table */
if not exists (select * from "VersionControl" where "Name" = 'CommissionSchedule')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "CommissionSchedule" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'CommissionSchedule'
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionSchedule", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'CommissionSchedule'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'CommissionSchedule'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'CommissionSchedule')
		drop table "CommissionSchedule"

	/* Create the table. */
	create table "CommissionSchedule" (
		"CommissionScheduleId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"Name" "nvarchar"(max) null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "CommissionSchedule" with nocheck add 
		constraint "CommissionScheduleKey" primary key clustered
		(
			"CommissionScheduleId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "CommissionScheduleKeyExternalId0"
		on "CommissionSchedule"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "CommissionSchedule" with nocheck add 
		constraint "DefaultCommissionScheduleIsArchived" default (0) for "IsArchived",
		constraint "DefaultCommissionScheduleIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'CommissionSchedule')
		update "VersionControl" set "Revision" = 0 where "Name" = 'CommissionSchedule'
	else
		insert "VersionControl" ("Name", "Revision") select 'CommissionSchedule', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'CommissionSchedule'
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionSchedule", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'CommissionSchedule'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionSchedule", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The CommissionType Table */
if not exists (select * from "VersionControl" where "Name" = 'CommissionType')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "CommissionType" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'CommissionType'
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionType", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'CommissionType'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'CommissionType'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'CommissionType')
		drop table "CommissionType"

	/* Create the table. */
	create table "CommissionType" (
		"CommissionTypeCode" "int" not null,
		"CommissionTypeId" "uniqueIdentifier" not null,
		"Description" "nvarchar"(max) null,
		"ExternalId0" "nvarchar"(128) null,
		"Name" "nvarchar"(max) null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "CommissionType" with nocheck add 
		constraint "CommissionTypeKey" primary key clustered
		(
			"CommissionTypeId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "CommissionTypeKeyExternalId0"
		on "CommissionType"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "CommissionType" with nocheck add 
		constraint "DefaultCommissionTypeIsArchived" default (0) for "IsArchived",
		constraint "DefaultCommissionTypeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'CommissionType')
		update "VersionControl" set "Revision" = 0 where "Name" = 'CommissionType'
	else
		insert "VersionControl" ("Name", "Revision") select 'CommissionType', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'CommissionType'
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionType", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'CommissionType'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionType", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The CommissionUnit Table */
if not exists (select * from "VersionControl" where "Name" = 'CommissionUnit')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "CommissionUnit" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'CommissionUnit'
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionUnit", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'CommissionUnit'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'CommissionUnit'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'CommissionUnit')
		drop table "CommissionUnit"

	/* Create the table. */
	create table "CommissionUnit" (
		"CommissionUnitCode" "int" not null,
		"CommissionUnitId" "uniqueIdentifier" not null,
		"Description" "nvarchar"(max) null,
		"ExternalId0" "nvarchar"(128) null,
		"Name" "nvarchar"(max) null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "CommissionUnit" with nocheck add 
		constraint "CommissionUnitKey" primary key clustered
		(
			"CommissionUnitId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "CommissionUnitKeyExternalId0"
		on "CommissionUnit"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "CommissionUnit" with nocheck add 
		constraint "DefaultCommissionUnitIsArchived" default (0) for "IsArchived",
		constraint "DefaultCommissionUnitIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'CommissionUnit')
		update "VersionControl" set "Revision" = 0 where "Name" = 'CommissionUnit'
	else
		insert "VersionControl" ("Name", "Revision") select 'CommissionUnit', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'CommissionUnit'
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionUnit", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'CommissionUnit'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionUnit", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The CommissionTranche Table */
if not exists (select * from "VersionControl" where "Name" = 'CommissionTranche')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "CommissionTranche" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'CommissionTranche'
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionTranche", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'CommissionTranche'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'CommissionTranche'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_CommissionSchedule_CommissionTranche')
		alter table "CommissionTranche" drop constraint "FK_CommissionSchedule_CommissionTranche"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_CommissionType_CommissionTranche')
		alter table "CommissionTranche" drop constraint "FK_CommissionType_CommissionTranche"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_CommissionUnit_CommissionTranche')
		alter table "CommissionTranche" drop constraint "FK_CommissionUnit_CommissionTranche"
	if exists (select * from sysobjects where type = 'U' and name = 'CommissionTranche')
		drop table "CommissionTranche"

	/* Create the table. */
	create table "CommissionTranche" (
		"CommissionScheduleId" "uniqueIdentifier" not null,
		"CommissionTrancheId" "uniqueIdentifier" not null,
		"CommissionTypeId" "uniqueIdentifier" not null,
		"CommissionUnitId" "uniqueIdentifier" not null,
		"EndRange" "decimal"(19,7) null,
		"ExternalId0" "nvarchar"(128) null,
		"RowVersion" "bigint" not null,
		"StartRange" "decimal"(19,7) not null,
		"Value" "decimal"(19,7) not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "CommissionTranche" with nocheck add 
		constraint "CommissionTrancheKey" primary key clustered
		(
			"CommissionTrancheId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "CommissionTrancheKeyExternalId0"
		on "CommissionTranche"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "CommissionTranche" add 
		constraint "FK_CommissionSchedule_CommissionTranche" foreign key 
		(
			"CommissionScheduleId"
		) references "CommissionSchedule" (
			"CommissionScheduleId"
		),

		constraint "FK_CommissionType_CommissionTranche" foreign key 
		(
			"CommissionTypeId"
		) references "CommissionType" (
			"CommissionTypeId"
		),

		constraint "FK_CommissionUnit_CommissionTranche" foreign key 
		(
			"CommissionUnitId"
		) references "CommissionUnit" (
			"CommissionUnitId"
		)

	/* Defaults */
	alter table "CommissionTranche" with nocheck add 
		constraint "DefaultCommissionTrancheIsArchived" default (0) for "IsArchived",
		constraint "DefaultCommissionTrancheIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'CommissionTranche')
		update "VersionControl" set "Revision" = 0 where "Name" = 'CommissionTranche'
	else
		insert "VersionControl" ("Name", "Revision") select 'CommissionTranche', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'CommissionTranche'
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionTranche", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'CommissionTranche'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "CommissionTranche", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Condition Table */
if not exists (select * from "VersionControl" where "Name" = 'Condition')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Condition" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Condition'
	print convert(varchar, getdate(), 120) + 'Z Table: "Condition", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Condition'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Condition'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'Condition')
		drop table "Condition"

	/* Create the table. */
	create table "Condition" (
		"ConditionCode" "int" not null,
		"ConditionId" "uniqueIdentifier" not null,
		"Description" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"Mnemonic" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Condition" with nocheck add 
		constraint "ConditionKey" primary key clustered
		(
			"ConditionId"
		)  on "PRIMARY" ,
		constraint "ConditionKeyConditionCode" unique
		(
			"ConditionCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "ConditionKeyExternalId0"
		on "Condition"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "ConditionKeyExternalId1"
		on "Condition"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "ConditionKeyExternalId2"
		on "Condition"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "ConditionKeyExternalId3"
		on "Condition"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "Condition" with nocheck add 
		constraint "DefaultConditionIsArchived" default (0) for "IsArchived",
		constraint "DefaultConditionIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Condition')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Condition'
	else
		insert "VersionControl" ("Name", "Revision") select 'Condition', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Condition'
	print convert(varchar, getdate(), 120) + 'Z Table: "Condition", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Condition'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Condition", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Configuration Table */
if not exists (select * from "VersionControl" where "Name" = 'Configuration')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Configuration" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Configuration'
	print convert(varchar, getdate(), 120) + 'Z Table: "Configuration", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Configuration'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Configuration'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'Configuration')
		drop table "Configuration"

	/* Create the table. */
	create table "Configuration" (
		"ConfigurationId" "nvarchar"(128) not null,
		"IndexName" "nvarchar"(64) not null,
		"RelationName" "nvarchar"(64) not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Configuration" with nocheck add 
		constraint "ConfigurationKey" primary key clustered
		(
			"ConfigurationId",
			"RelationName"
		)  on "PRIMARY" 


	/* Defaults */
	alter table "Configuration" with nocheck add 
		constraint "DefaultConfigurationIsArchived" default (0) for "IsArchived",
		constraint "DefaultConfigurationIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Configuration')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Configuration'
	else
		insert "VersionControl" ("Name", "Revision") select 'Configuration', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Configuration'
	print convert(varchar, getdate(), 120) + 'Z Table: "Configuration", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Configuration'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Configuration", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Country Table */
if not exists (select * from "VersionControl" where "Name" = 'Country')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Country" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Country'
	print convert(varchar, getdate(), 120) + 'Z Table: "Country", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Country'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Country'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'Country')
		drop table "Country"

	/* Create the table. */
	create table "Country" (
		"Abbreviation" "nvarchar"(max) not null,
		"CountryId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"Name" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Country" with nocheck add 
		constraint "CountryKey" primary key clustered
		(
			"CountryId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "CountryKeyExternalId0"
		on "Country"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "CountryKeyExternalId1"
		on "Country"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "Country" with nocheck add 
		constraint "DefaultCountryIsArchived" default (0) for "IsArchived",
		constraint "DefaultCountryIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Country')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Country'
	else
		insert "VersionControl" ("Name", "Revision") select 'Country', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Country'
	print convert(varchar, getdate(), 120) + 'Z Table: "Country", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Country'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Country", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Crossing Table */
if not exists (select * from "VersionControl" where "Name" = 'Crossing')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Crossing" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Crossing'
	print convert(varchar, getdate(), 120) + 'Z Table: "Crossing", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Crossing'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Crossing'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'Crossing')
		drop table "Crossing"

	/* Create the table. */
	create table "Crossing" (
		"CrossingCode" "int" not null,
		"CrossingId" "uniqueIdentifier" not null,
		"Description" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"Name" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Crossing" with nocheck add 
		constraint "CrossingKey" primary key clustered
		(
			"CrossingId"
		)  on "PRIMARY" ,
		constraint "CrossingKeyCrossingCode" unique
		(
			"CrossingCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "CrossingKeyExternalId0"
		on "Crossing"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "CrossingKeyExternalId1"
		on "Crossing"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "Crossing" with nocheck add 
		constraint "DefaultCrossingIsArchived" default (0) for "IsArchived",
		constraint "DefaultCrossingIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Crossing')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Crossing'
	else
		insert "VersionControl" ("Name", "Revision") select 'Crossing', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Crossing'
	print convert(varchar, getdate(), 120) + 'Z Table: "Crossing", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Crossing'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Crossing", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The CrossingManager Table */
if not exists (select * from "VersionControl" where "Name" = 'CrossingManager')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "CrossingManager" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'CrossingManager'
	print convert(varchar, getdate(), 120) + 'Z Table: "CrossingManager", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'CrossingManager'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'CrossingManager'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'CrossingManager')
		drop table "CrossingManager"

	/* Create the table. */
	create table "CrossingManager" (
		"CrossingManagerId" "uniqueIdentifier" not null,
		"CrossingType" "nvarchar"(max) null,
		"ExternalId0" "nvarchar"(128) null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "CrossingManager" with nocheck add 
		constraint "CrossingManagerKey" primary key clustered
		(
			"CrossingManagerId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "CrossingManagerKeyExternalId0"
		on "CrossingManager"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "CrossingManager" with nocheck add 
		constraint "DefaultCrossingManagerIsArchived" default (0) for "IsArchived",
		constraint "DefaultCrossingManagerIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'CrossingManager')
		update "VersionControl" set "Revision" = 0 where "Name" = 'CrossingManager'
	else
		insert "VersionControl" ("Name", "Revision") select 'CrossingManager', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'CrossingManager'
	print convert(varchar, getdate(), 120) + 'Z Table: "CrossingManager", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'CrossingManager'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "CrossingManager", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The DebtHolderImportTranslation Table */
if not exists (select * from "VersionControl" where "Name" = 'DebtHolderImportTranslation')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "DebtHolderImportTranslation" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'DebtHolderImportTranslation'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtHolderImportTranslation", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'DebtHolderImportTranslation'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'DebtHolderImportTranslation'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'DebtHolderImportTranslation')
		drop table "DebtHolderImportTranslation"

	/* Create the table. */
	create table "DebtHolderImportTranslation" (
		"AccountBalance" "nvarchar"(max) not null,
		"AccountCode" "nvarchar"(max) not null,
		"Address1" "nvarchar"(max) null,
		"Address2" "nvarchar"(max) null,
		"City" "nvarchar"(max) null,
		"DateOfBirth" "nvarchar"(max) null,
		"DateOfDelinquency" "nvarchar"(max) null,
		"DebtHolder" "nvarchar"(max) null,
		"DebtHolderImportTranslationId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"FirstName" "nvarchar"(max) null,
		"LastName" "nvarchar"(max) null,
		"MiddleName" "nvarchar"(max) null,
		"OriginalAccountNumber" "nvarchar"(max) not null,
		"PhoneNumber" "nvarchar"(max) null,
		"PostalCode" "nvarchar"(max) null,
		"ProvinceCode" "nvarchar"(max) null,
		"RowVersion" "bigint" not null,
		"SocialSecurityNumber" "nvarchar"(max) not null,
		"Suffix" "nvarchar"(max) null,
		"VendorCode" "nvarchar"(max) null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "DebtHolderImportTranslation" with nocheck add 
		constraint "DebtHolderImportTranslationKey" primary key clustered
		(
			"DebtHolderImportTranslationId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "DebtHolderImportTranslationKeyExternalId0"
		on "DebtHolderImportTranslation"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "DebtHolderImportTranslation" with nocheck add 
		constraint "DefaultDebtHolderImportTranslationIsArchived" default (0) for "IsArchived",
		constraint "DefaultDebtHolderImportTranslationIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'DebtHolderImportTranslation')
		update "VersionControl" set "Revision" = 0 where "Name" = 'DebtHolderImportTranslation'
	else
		insert "VersionControl" ("Name", "Revision") select 'DebtHolderImportTranslation', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'DebtHolderImportTranslation'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtHolderImportTranslation", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'DebtHolderImportTranslation'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtHolderImportTranslation", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Destination Table */
if not exists (select * from "VersionControl" where "Name" = 'Destination')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Destination" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Destination'
	print convert(varchar, getdate(), 120) + 'Z Table: "Destination", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Destination'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Destination'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'Destination')
		drop table "Destination"

	/* Create the table. */
	create table "Destination" (
		"CancelCustomFixTag" "nvarchar"(max) null,
		"ClearingFirmId" "nvarchar"(max) null,
		"DestinationId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"FixAccount" "nvarchar"(max) null,
		"FixAccountSuffixLength" "int" null,
		"FixExchangeMnemonic" "nvarchar"(max) null,
		"FixExecBroker" "nvarchar"(max) null,
		"FixExecDestinationListed" "nvarchar"(max) null,
		"FixExecDestinationUnlisted" "nvarchar"(max) null,
		"FixHandleInstListed" "nvarchar"(max) null,
		"FixHandleInstUnlisted" "nvarchar"(max) null,
		"FixIoiRoutingId" "nvarchar"(max) null,
		"FixIoiRoutingType" "nvarchar"(max) null,
		"FixNetCommissionType" "nvarchar"(max) null,
		"FixNoteTagId" "nvarchar"(max) null,
		"FixOnBehalfOf" "nvarchar"(max) null,
		"FixOnBehalfOfSub" "nvarchar"(max) null,
		"FixOrderIdFormat" "nvarchar"(max) not null,
		"FixPassiveTag" "nvarchar"(max) null,
		"FixProactiveTag" "nvarchar"(max) null,
		"FixSourceCompany" "nvarchar"(max) null,
		"FixSourceId" "nvarchar"(max) null,
		"FixSourceTrader" "nvarchar"(max) null,
		"FixTargetCompany" "nvarchar"(max) null,
		"FixTargetLocationId" "nvarchar"(max) null,
		"FixTargetTrader" "nvarchar"(max) null,
		"FixVersion" "nvarchar"(max) not null,
		"IsBroker" "bit" not null,
		"IsCancelAllowed" "bit" not null,
		"IsCancelReplaceAllowed" "bit" not null,
		"IsEcn" "bit" not null,
		"IsExchange" "bit" not null,
		"IsInternal" "bit" not null,
		"IsIoiAllowed" "bit" not null,
		"IsLimitPricingAllowed" "bit" not null,
		"IsMarketOnClosePricingAllowed" "bit" not null,
		"IsMarketPricingAllowed" "bit" not null,
		"IsSystemUp" "bit" not null,
		"IsTagEligible" "bit" null,
		"IsTradeAwayAllowed" "bit" not null,
		"IsUnsolicitedTradeAllowed" "bit" null,
		"LotSize" "int" null,
		"MaximumQuantityListedLimit" "decimal"(19,7) null,
		"MaximumQuantityListedMarket" "decimal"(19,7) null,
		"MaximumQuantityUnlistedLimit" "decimal"(19,7) null,
		"MaximumQuantityUnlistedMarket" "decimal"(19,7) null,
		"ModifiedTime" "datetime" not null,
		"Name" "nvarchar"(max) null,
		"NewOrderCustomFixTag" "nvarchar"(max) null,
		"OatsDepartmentId" "nvarchar"(max) null,
		"OatsDestinationCode" "nvarchar"(max) null,
		"OatsReceivingMpi" "nvarchar"(max) null,
		"OatsRouteMethod" "nvarchar"(max) null,
		"OatsRoutingMpi" "nvarchar"(max) null,
		"OatsSentMpi" "nvarchar"(max) null,
		"OatsTerminalId" "nvarchar"(max) null,
		"OnCloseCancelTime" "int" null,
		"OnCloseOrderTime" "int" null,
		"PerShareUsageFee" "decimal"(19,7) null,
		"PostMarketLogic" "nvarchar"(max) null,
		"PrimaryBackupDestinationId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"SecondaryBackupDestinationId" "uniqueIdentifier" null,
		"SelectnetFlag" "bit" not null,
		"ShortName" "nvarchar"(max) not null,
		"SourceId0" "nvarchar"(max) null,
		"SourceId1" "nvarchar"(max) null,
		"SourceId2" "nvarchar"(max) null,
		"SourceId3" "nvarchar"(max) null,
		"SourceId4" "nvarchar"(max) null,
		"SourceId5" "nvarchar"(max) null,
		"SourceId6" "nvarchar"(max) null,
		"SourceId7" "nvarchar"(max) null,
		"UniqueShortName" "nvarchar"(max) not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Destination" with nocheck add 
		constraint "DestinationKey" primary key clustered
		(
			"DestinationId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "DestinationKeyExternalId0"
		on "Destination"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "DestinationKeyExternalId1"
		on "Destination"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "Destination" with nocheck add 
		constraint "DefaultDestinationIsArchived" default (0) for "IsArchived",
		constraint "DefaultDestinationIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Destination')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Destination'
	else
		insert "VersionControl" ("Name", "Revision") select 'Destination', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Destination'
	print convert(varchar, getdate(), 120) + 'Z Table: "Destination", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Destination'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Destination", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Exchange Table */
if not exists (select * from "VersionControl" where "Name" = 'Exchange')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Exchange" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Exchange'
	print convert(varchar, getdate(), 120) + 'Z Table: "Exchange", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Exchange'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Exchange'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Country_Exchange')
		alter table "Exchange" drop constraint "FK_Country_Exchange"
	if exists (select * from sysobjects where type = 'U' and name = 'Exchange')
		drop table "Exchange"

	/* Create the table. */
	create table "Exchange" (
		"CountryId" "uniqueIdentifier" not null,
		"ExchangeId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"IsListed" "bit" not null,
		"Mnemonic" "nvarchar"(max) not null,
		"Name" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Exchange" with nocheck add 
		constraint "ExchangeKey" primary key clustered
		(
			"ExchangeId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "ExchangeKeyExternalId0"
		on "Exchange"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "ExchangeKeyExternalId1"
		on "Exchange"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "ExchangeKeyExternalId2"
		on "Exchange"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "ExchangeKeyExternalId3"
		on "Exchange"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "Exchange" add 
		constraint "FK_Country_Exchange" foreign key 
		(
			"CountryId"
		) references "Country" (
			"CountryId"
		)

	/* Defaults */
	alter table "Exchange" with nocheck add 
		constraint "DefaultExchangeIsArchived" default (0) for "IsArchived",
		constraint "DefaultExchangeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Exchange')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Exchange'
	else
		insert "VersionControl" ("Name", "Revision") select 'Exchange', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Exchange'
	print convert(varchar, getdate(), 120) + 'Z Table: "Exchange", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Exchange'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Exchange", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The DestinationExchangeMap Table */
if not exists (select * from "VersionControl" where "Name" = 'DestinationExchangeMap')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "DestinationExchangeMap" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'DestinationExchangeMap'
	print convert(varchar, getdate(), 120) + 'Z Table: "DestinationExchangeMap", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'DestinationExchangeMap'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'DestinationExchangeMap'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Destination_DestinationExchangeMap')
		alter table "DestinationExchangeMap" drop constraint "FK_Destination_DestinationExchangeMap"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Exchange_DestinationExchangeMap')
		alter table "DestinationExchangeMap" drop constraint "FK_Exchange_DestinationExchangeMap"
	if exists (select * from sysobjects where type = 'U' and name = 'DestinationExchangeMap')
		drop table "DestinationExchangeMap"

	/* Create the table. */
	create table "DestinationExchangeMap" (
		"DestinationExchangeMapId" "uniqueIdentifier" not null,
		"DestinationId" "uniqueIdentifier" null,
		"ExchangeId" "uniqueIdentifier" null,
		"ExternalId0" "nvarchar"(max) null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "DestinationExchangeMap" with nocheck add 
		constraint "DestinationExchangeMapKey" primary key clustered
		(
			"DestinationExchangeMapId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "DestinationExchangeMapKeyDestinationIdExchangeId"
		on "DestinationExchangeMap"
		(
			"DestinationId",
			"ExchangeId"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "DestinationExchangeMap" add 
		constraint "FK_Destination_DestinationExchangeMap" foreign key 
		(
			"DestinationId"
		) references "Destination" (
			"DestinationId"
		),

		constraint "FK_Exchange_DestinationExchangeMap" foreign key 
		(
			"ExchangeId"
		) references "Exchange" (
			"ExchangeId"
		)

	/* Defaults */
	alter table "DestinationExchangeMap" with nocheck add 
		constraint "DefaultDestinationExchangeMapIsArchived" default (0) for "IsArchived",
		constraint "DefaultDestinationExchangeMapIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'DestinationExchangeMap')
		update "VersionControl" set "Revision" = 0 where "Name" = 'DestinationExchangeMap'
	else
		insert "VersionControl" ("Name", "Revision") select 'DestinationExchangeMap', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'DestinationExchangeMap'
	print convert(varchar, getdate(), 120) + 'Z Table: "DestinationExchangeMap", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'DestinationExchangeMap'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "DestinationExchangeMap", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The FixMessage Table */
if not exists (select * from "VersionControl" where "Name" = 'FixMessage')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "FixMessage" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'FixMessage'
	print convert(varchar, getdate(), 120) + 'Z Table: "FixMessage", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'FixMessage'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'FixMessage'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'FixMessage')
		drop table "FixMessage"

	/* Create the table. */
	create table "FixMessage" (
		"FixMessageId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "FixMessage" with nocheck add 
		constraint "FixMessageKey" primary key clustered
		(
			"FixMessageId"
		)  on "PRIMARY" 


	/* Defaults */
	alter table "FixMessage" with nocheck add 
		constraint "DefaultFixMessageIsArchived" default (0) for "IsArchived",
		constraint "DefaultFixMessageIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'FixMessage')
		update "VersionControl" set "Revision" = 0 where "Name" = 'FixMessage'
	else
		insert "VersionControl" ("Name", "Revision") select 'FixMessage', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'FixMessage'
	print convert(varchar, getdate(), 120) + 'Z Table: "FixMessage", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'FixMessage'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "FixMessage", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The FixTag Table */
if not exists (select * from "VersionControl" where "Name" = 'FixTag')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "FixTag" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'FixTag'
	print convert(varchar, getdate(), 120) + 'Z Table: "FixTag", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'FixTag'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'FixTag'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_FixMessage_FixTag')
		alter table "FixTag" drop constraint "FK_FixMessage_FixTag"
	if exists (select * from sysobjects where type = 'U' and name = 'FixTag')
		drop table "FixTag"

	/* Create the table. */
	create table "FixTag" (
		"FixMessageId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"Tag" "int" not null,
		"Value" "sql_variant" null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "FixTag" with nocheck add 
		constraint "FixTagKey" primary key clustered
		(
			"FixMessageId",
			"Tag"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "FixTag" add 
		constraint "FK_FixMessage_FixTag" foreign key 
		(
			"FixMessageId"
		) references "FixMessage" (
			"FixMessageId"
		)

	/* Defaults */
	alter table "FixTag" with nocheck add 
		constraint "DefaultFixTagIsArchived" default (0) for "IsArchived",
		constraint "DefaultFixTagIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'FixTag')
		update "VersionControl" set "Revision" = 0 where "Name" = 'FixTag'
	else
		insert "VersionControl" ("Name", "Revision") select 'FixTag', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'FixTag'
	print convert(varchar, getdate(), 120) + 'Z Table: "FixTag", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'FixTag'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "FixTag", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The GroupType Table */
if not exists (select * from "VersionControl" where "Name" = 'GroupType')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "GroupType" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'GroupType'
	print convert(varchar, getdate(), 120) + 'Z Table: "GroupType", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'GroupType'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'GroupType'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'GroupType')
		drop table "GroupType"

	/* Create the table. */
	create table "GroupType" (
		"ExternalId0" "nvarchar"(128) null,
		"GroupTypeCode" "int" not null,
		"GroupTypeId" "uniqueIdentifier" not null,
		"Name" "nvarchar"(64) not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "GroupType" with nocheck add 
		constraint "GroupTypeKey" primary key clustered
		(
			"GroupTypeId"
		)  on "PRIMARY" ,
		constraint "GroupTypeKeyGroupTypeCode" unique
		(
			"GroupTypeCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "GroupTypeKeyExternalId0"
		on "GroupType"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "GroupType" with nocheck add 
		constraint "DefaultGroupTypeIsArchived" default (0) for "IsArchived",
		constraint "DefaultGroupTypeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'GroupType')
		update "VersionControl" set "Revision" = 0 where "Name" = 'GroupType'
	else
		insert "VersionControl" ("Name", "Revision") select 'GroupType', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'GroupType'
	print convert(varchar, getdate(), 120) + 'Z Table: "GroupType", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'GroupType'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "GroupType", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The HolidayType Table */
if not exists (select * from "VersionControl" where "Name" = 'HolidayType')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "HolidayType" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'HolidayType'
	print convert(varchar, getdate(), 120) + 'Z Table: "HolidayType", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'HolidayType'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'HolidayType'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'HolidayType')
		drop table "HolidayType"

	/* Create the table. */
	create table "HolidayType" (
		"Description" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"HolidayTypeCode" "int" not null,
		"HolidayTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "HolidayType" with nocheck add 
		constraint "HolidayTypeKey" primary key clustered
		(
			"HolidayTypeId"
		)  on "PRIMARY" ,
		constraint "HolidayTypeKeyHolidayTypeCode" unique
		(
			"HolidayTypeCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "HolidayTypeKeyExternalId0"
		on "HolidayType"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "HolidayType" with nocheck add 
		constraint "DefaultHolidayTypeIsArchived" default (0) for "IsArchived",
		constraint "DefaultHolidayTypeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'HolidayType')
		update "VersionControl" set "Revision" = 0 where "Name" = 'HolidayType'
	else
		insert "VersionControl" ("Name", "Revision") select 'HolidayType', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'HolidayType'
	print convert(varchar, getdate(), 120) + 'Z Table: "HolidayType", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'HolidayType'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "HolidayType", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Holiday Table */
if not exists (select * from "VersionControl" where "Name" = 'Holiday')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Holiday" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Holiday'
	print convert(varchar, getdate(), 120) + 'Z Table: "Holiday", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Holiday'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Holiday'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Country_Holiday')
		alter table "Holiday" drop constraint "FK_Country_Holiday"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_HolidayType_Holiday')
		alter table "Holiday" drop constraint "FK_HolidayType_Holiday"
	if exists (select * from sysobjects where type = 'U' and name = 'Holiday')
		drop table "Holiday"

	/* Create the table. */
	create table "Holiday" (
		"CountryId" "uniqueIdentifier" not null,
		"Date" "datetime" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"HolidayId" "uniqueIdentifier" not null,
		"HolidayTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Holiday" with nocheck add 
		constraint "HolidayKey" primary key clustered
		(
			"HolidayId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "HolidayKeyExternalId0"
		on "Holiday"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "HolidayKeyExternalId1"
		on "Holiday"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "Holiday" add 
		constraint "FK_Country_Holiday" foreign key 
		(
			"CountryId"
		) references "Country" (
			"CountryId"
		),

		constraint "FK_HolidayType_Holiday" foreign key 
		(
			"HolidayTypeId"
		) references "HolidayType" (
			"HolidayTypeId"
		)

	/* Defaults */
	alter table "Holiday" with nocheck add 
		constraint "DefaultHolidayIsArchived" default (0) for "IsArchived",
		constraint "DefaultHolidayIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Holiday')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Holiday'
	else
		insert "VersionControl" ("Name", "Revision") select 'Holiday', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Holiday'
	print convert(varchar, getdate(), 120) + 'Z Table: "Holiday", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Holiday'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Holiday", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Image Table */
if not exists (select * from "VersionControl" where "Name" = 'Image')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Image" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Image'
	print convert(varchar, getdate(), 120) + 'Z Table: "Image", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Image'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Image'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'Image')
		drop table "Image"

	/* Create the table. */
	create table "Image" (
		"ExternalId0" "nvarchar"(128) null,
		"Image" "nvarchar"(max) not null,
		"ImageId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Image" with nocheck add 
		constraint "ImageKey" primary key clustered
		(
			"ImageId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "ImageKeyExternalId0"
		on "Image"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "Image" with nocheck add 
		constraint "DefaultImageIsArchived" default (0) for "IsArchived",
		constraint "DefaultImageIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Image')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Image'
	else
		insert "VersionControl" ("Name", "Revision") select 'Image', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Image'
	print convert(varchar, getdate(), 120) + 'Z Table: "Image", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Image'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Image", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The LotHandling Table */
if not exists (select * from "VersionControl" where "Name" = 'LotHandling')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "LotHandling" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'LotHandling'
	print convert(varchar, getdate(), 120) + 'Z Table: "LotHandling", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'LotHandling'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'LotHandling'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'LotHandling')
		drop table "LotHandling"

	/* Create the table. */
	create table "LotHandling" (
		"Description" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"LotHandlingCode" "int" not null,
		"LotHandlingId" "uniqueIdentifier" not null,
		"Mnemonic" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "LotHandling" with nocheck add 
		constraint "LotHandlingKey" primary key clustered
		(
			"LotHandlingId"
		)  on "PRIMARY" ,
		constraint "LotHandlingKeyLotHandlingCode" unique
		(
			"LotHandlingCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "LotHandlingKeyExternalId0"
		on "LotHandling"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "LotHandlingKeyExternalId1"
		on "LotHandling"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "LotHandlingKeyExternalId2"
		on "LotHandling"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "LotHandlingKeyExternalId3"
		on "LotHandling"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "LotHandling" with nocheck add 
		constraint "DefaultLotHandlingIsArchived" default (0) for "IsArchived",
		constraint "DefaultLotHandlingIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'LotHandling')
		update "VersionControl" set "Revision" = 0 where "Name" = 'LotHandling'
	else
		insert "VersionControl" ("Name", "Revision") select 'LotHandling', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'LotHandling'
	print convert(varchar, getdate(), 120) + 'Z Table: "LotHandling", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'LotHandling'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "LotHandling", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The MatchTimer Table */
if not exists (select * from "VersionControl" where "Name" = 'MatchTimer')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "MatchTimer" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'MatchTimer'
	print convert(varchar, getdate(), 120) + 'Z Table: "MatchTimer", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'MatchTimer'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'MatchTimer'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'MatchTimer')
		drop table "MatchTimer"

	/* Create the table. */
	create table "MatchTimer" (
		"CurrentTime" "datetime" not null,
		"MatchId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"StopTime" "datetime" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "MatchTimer" with nocheck add 
		constraint "MatchTimerKey" primary key clustered
		(
			"MatchId"
		)  on "PRIMARY" 


	/* Defaults */
	alter table "MatchTimer" with nocheck add 
		constraint "DefaultMatchTimerIsArchived" default (0) for "IsArchived",
		constraint "DefaultMatchTimerIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'MatchTimer')
		update "VersionControl" set "Revision" = 0 where "Name" = 'MatchTimer'
	else
		insert "VersionControl" ("Name", "Revision") select 'MatchTimer', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'MatchTimer'
	print convert(varchar, getdate(), 120) + 'Z Table: "MatchTimer", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'MatchTimer'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "MatchTimer", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The OrderType Table */
if not exists (select * from "VersionControl" where "Name" = 'OrderType')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "OrderType" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'OrderType'
	print convert(varchar, getdate(), 120) + 'Z Table: "OrderType", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'OrderType'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'OrderType'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'OrderType')
		drop table "OrderType"

	/* Create the table. */
	create table "OrderType" (
		"Description" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"Mnemonic" "nvarchar"(max) not null,
		"OrderTypeCode" "int" not null,
		"OrderTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "OrderType" with nocheck add 
		constraint "OrderTypeKey" primary key clustered
		(
			"OrderTypeId"
		)  on "PRIMARY" ,
		constraint "OrderTypeKeyOrderTypeCode" unique
		(
			"OrderTypeCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "OrderTypeKeyExternalId0"
		on "OrderType"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "OrderTypeKeyExternalId1"
		on "OrderType"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "OrderTypeKeyExternalId2"
		on "OrderType"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "OrderTypeKeyExternalId3"
		on "OrderType"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "OrderType" with nocheck add 
		constraint "DefaultOrderTypeIsArchived" default (0) for "IsArchived",
		constraint "DefaultOrderTypeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'OrderType')
		update "VersionControl" set "Revision" = 0 where "Name" = 'OrderType'
	else
		insert "VersionControl" ("Name", "Revision") select 'OrderType', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'OrderType'
	print convert(varchar, getdate(), 120) + 'Z Table: "OrderType", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'OrderType'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "OrderType", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The PartyType Table */
if not exists (select * from "VersionControl" where "Name" = 'PartyType')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "PartyType" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'PartyType'
	print convert(varchar, getdate(), 120) + 'Z Table: "PartyType", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'PartyType'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'PartyType'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'PartyType')
		drop table "PartyType"

	/* Create the table. */
	create table "PartyType" (
		"Description" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"Mnemonic" "nvarchar"(max) not null,
		"PartyTypeCode" "int" not null,
		"PartyTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "PartyType" with nocheck add 
		constraint "PartyTypeKey" primary key clustered
		(
			"PartyTypeId"
		)  on "PRIMARY" ,
		constraint "PartyTypeKeyPartyTypeCode" unique
		(
			"PartyTypeCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "PartyTypeKeyExternalId0"
		on "PartyType"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "PartyTypeKeyExternalId1"
		on "PartyType"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "PartyType" with nocheck add 
		constraint "DefaultPartyTypeIsArchived" default (0) for "IsArchived",
		constraint "DefaultPartyTypeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'PartyType')
		update "VersionControl" set "Revision" = 0 where "Name" = 'PartyType'
	else
		insert "VersionControl" ("Name", "Revision") select 'PartyType', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'PartyType'
	print convert(varchar, getdate(), 120) + 'Z Table: "PartyType", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'PartyType'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "PartyType", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The PaymentMethodType Table */
if not exists (select * from "VersionControl" where "Name" = 'PaymentMethodType')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "PaymentMethodType" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'PaymentMethodType'
	print convert(varchar, getdate(), 120) + 'Z Table: "PaymentMethodType", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'PaymentMethodType'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'PaymentMethodType'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'PaymentMethodType')
		drop table "PaymentMethodType"

	/* Create the table. */
	create table "PaymentMethodType" (
		"ExternalId0" "nvarchar"(128) null,
		"Name" "nvarchar"(max) not null,
		"PaymentMethodTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "PaymentMethodType" with nocheck add 
		constraint "PaymentMethodTypeKey" primary key clustered
		(
			"PaymentMethodTypeId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "PaymentMethodTypeKeyExternalId0"
		on "PaymentMethodType"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "PaymentMethodType" with nocheck add 
		constraint "DefaultPaymentMethodTypeIsArchived" default (0) for "IsArchived",
		constraint "DefaultPaymentMethodTypeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'PaymentMethodType')
		update "VersionControl" set "Revision" = 0 where "Name" = 'PaymentMethodType'
	else
		insert "VersionControl" ("Name", "Revision") select 'PaymentMethodType', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'PaymentMethodType'
	print convert(varchar, getdate(), 120) + 'Z Table: "PaymentMethodType", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'PaymentMethodType'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "PaymentMethodType", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The PositionType Table */
if not exists (select * from "VersionControl" where "Name" = 'PositionType')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "PositionType" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'PositionType'
	print convert(varchar, getdate(), 120) + 'Z Table: "PositionType", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'PositionType'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'PositionType'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'PositionType')
		drop table "PositionType"

	/* Create the table. */
	create table "PositionType" (
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"Mnemonic" "nvarchar"(max) not null,
		"PositionTypeCode" "int" not null,
		"PositionTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"Sign" "decimal"(19,7) not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "PositionType" with nocheck add 
		constraint "PositionTypeKey" primary key clustered
		(
			"PositionTypeId"
		)  on "PRIMARY" ,
		constraint "PositionTypeKeyPositionType" unique
		(
			"PositionTypeCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "PositionTypeKeyExternalId0"
		on "PositionType"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "PositionTypeKeyExternalId1"
		on "PositionType"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "PositionTypeKeyExternalId2"
		on "PositionType"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "PositionTypeKeyExternalId3"
		on "PositionType"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "PositionType" with nocheck add 
		constraint "DefaultPositionTypeIsArchived" default (0) for "IsArchived",
		constraint "DefaultPositionTypeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'PositionType')
		update "VersionControl" set "Revision" = 0 where "Name" = 'PositionType'
	else
		insert "VersionControl" ("Name", "Revision") select 'PositionType', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'PositionType'
	print convert(varchar, getdate(), 120) + 'Z Table: "PositionType", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'PositionType'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "PositionType", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Province Table */
if not exists (select * from "VersionControl" where "Name" = 'Province')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Province" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Province'
	print convert(varchar, getdate(), 120) + 'Z Table: "Province", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Province'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Province'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Country_Province')
		alter table "Province" drop constraint "FK_Country_Province"
	if exists (select * from sysobjects where type = 'U' and name = 'Province')
		drop table "Province"

	/* Create the table. */
	create table "Province" (
		"Abbreviation" "nvarchar"(max) not null,
		"CountryId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"Name" "nvarchar"(max) not null,
		"ProvinceId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Province" with nocheck add 
		constraint "ProvinceKey" primary key clustered
		(
			"ProvinceId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "ProvinceKeyExternalId0"
		on "Province"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "ProvinceKeyExternalId1"
		on "Province"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "Province" add 
		constraint "FK_Country_Province" foreign key 
		(
			"CountryId"
		) references "Country" (
			"CountryId"
		)

	/* Defaults */
	alter table "Province" with nocheck add 
		constraint "DefaultProvinceIsArchived" default (0) for "IsArchived",
		constraint "DefaultProvinceIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Province')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Province'
	else
		insert "VersionControl" ("Name", "Revision") select 'Province', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Province'
	print convert(varchar, getdate(), 120) + 'Z Table: "Province", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Province'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Province", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Consumer Table */
if not exists (select * from "VersionControl" where "Name" = 'Consumer')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Consumer" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Consumer'
	print convert(varchar, getdate(), 120) + 'Z Table: "Consumer", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Consumer'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Consumer'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Province_Consumer')
		alter table "Consumer" drop constraint "FK_Province_Consumer"
	if exists (select * from sysobjects where type = 'U' and name = 'Consumer')
		drop table "Consumer"

	/* Create the table. */
	create table "Consumer" (
		"Address1" "nvarchar"(max) null,
		"Address2" "nvarchar"(max) null,
		"BankAccountNumber" "nvarchar"(max) null,
		"BankRoutingNumber" "nvarchar"(max) null,
		"City" "nvarchar"(max) null,
		"ConsumerId" "uniqueIdentifier" not null,
		"DateOfBirth" "datetime" null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"FirstName" "nvarchar"(max) null,
		"IsEmployed" "bit" null,
		"LastName" "nvarchar"(max) null,
		"MiddleName" "nvarchar"(max) null,
		"PhoneNumber" "nvarchar"(max) null,
		"PostalCode" "nvarchar"(max) null,
		"ProvinceId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"Salutation" "nvarchar"(max) null,
		"SocialSecurityNumber" "nvarchar"(max) not null,
		"Suffix" "nvarchar"(max) null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Consumer" with nocheck add 
		constraint "ConsumerKey" primary key clustered
		(
			"ConsumerId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "ConsumerKeyExternalId0"
		on "Consumer"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "ConsumerKeyExternalId1"
		on "Consumer"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "Consumer" add 
		constraint "FK_Province_Consumer" foreign key 
		(
			"ProvinceId"
		) references "Province" (
			"ProvinceId"
		)

	/* Defaults */
	alter table "Consumer" with nocheck add 
		constraint "DefaultConsumerIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Consumer')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Consumer'
	else
		insert "VersionControl" ("Name", "Revision") select 'Consumer', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Consumer'
	print convert(varchar, getdate(), 120) + 'Z Table: "Consumer", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Consumer'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Consumer", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ReportType Table */
if not exists (select * from "VersionControl" where "Name" = 'ReportType')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ReportType" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ReportType'
	print convert(varchar, getdate(), 120) + 'Z Table: "ReportType", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ReportType'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ReportType'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'ReportType')
		drop table "ReportType"

	/* Create the table. */
	create table "ReportType" (
		"Description" "nvarchar"(max) null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"Name" "nvarchar"(max) null,
		"ReportTypeCode" "int" not null,
		"ReportTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ReportType" with nocheck add 
		constraint "ReportTypeKey" primary key clustered
		(
			"ReportTypeId"
		)  on "PRIMARY" ,
		constraint "ReportTypeKeyReportTypeCode" unique
		(
			"ReportTypeCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "ReportTypeKeyExternalId0"
		on "ReportType"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "ReportTypeKeyExternalId1"
		on "ReportType"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "ReportType" with nocheck add 
		constraint "DefaultReportTypeIsArchived" default (0) for "IsArchived",
		constraint "DefaultReportTypeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ReportType')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ReportType'
	else
		insert "VersionControl" ("Name", "Revision") select 'ReportType', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ReportType'
	print convert(varchar, getdate(), 120) + 'Z Table: "ReportType", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ReportType'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ReportType", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Report Table */
if not exists (select * from "VersionControl" where "Name" = 'Report')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Report" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Report'
	print convert(varchar, getdate(), 120) + 'Z Table: "Report", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Report'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Report'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ReportType_Report')
		alter table "Report" drop constraint "FK_ReportType_Report"
	if exists (select * from sysobjects where type = 'U' and name = 'Report')
		drop table "Report"

	/* Create the table. */
	create table "Report" (
		"ExternalId0" "nvarchar"(128) null,
		"Name" "nvarchar"(max) not null,
		"ReportId" "uniqueIdentifier" not null,
		"ReportTypeId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"Xaml" "nvarchar"(max) not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Report" with nocheck add 
		constraint "ReportKey" primary key clustered
		(
			"ReportId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "ReportKeyExternalId0"
		on "Report"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "Report" add 
		constraint "FK_ReportType_Report" foreign key 
		(
			"ReportTypeId"
		) references "ReportType" (
			"ReportTypeId"
		)

	/* Defaults */
	alter table "Report" with nocheck add 
		constraint "DefaultReportIsArchived" default (0) for "IsArchived",
		constraint "DefaultReportIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Report')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Report'
	else
		insert "VersionControl" ("Name", "Revision") select 'Report', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Report'
	print convert(varchar, getdate(), 120) + 'Z Table: "Report", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Report'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Report", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The SettlementUnit Table */
if not exists (select * from "VersionControl" where "Name" = 'SettlementUnit')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "SettlementUnit" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'SettlementUnit'
	print convert(varchar, getdate(), 120) + 'Z Table: "SettlementUnit", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'SettlementUnit'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'SettlementUnit'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'SettlementUnit')
		drop table "SettlementUnit"

	/* Create the table. */
	create table "SettlementUnit" (
		"Description" "nvarchar"(max) null,
		"ExternalId0" "nvarchar"(128) null,
		"Name" "nvarchar"(max) null,
		"RowVersion" "bigint" not null,
		"SettlementUnitCode" "int" not null,
		"SettlementUnitId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "SettlementUnit" with nocheck add 
		constraint "SettlementUnitKey" primary key clustered
		(
			"SettlementUnitId"
		)  on "PRIMARY" ,
		constraint "SettlementUnitKeySettlementUnitCode" unique
		(
			"SettlementUnitCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "SettlementUnitKeyExternalId0"
		on "SettlementUnit"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "SettlementUnit" with nocheck add 
		constraint "DefaultSettlementUnitIsArchived" default (0) for "IsArchived",
		constraint "DefaultSettlementUnitIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'SettlementUnit')
		update "VersionControl" set "Revision" = 0 where "Name" = 'SettlementUnit'
	else
		insert "VersionControl" ("Name", "Revision") select 'SettlementUnit', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'SettlementUnit'
	print convert(varchar, getdate(), 120) + 'Z Table: "SettlementUnit", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'SettlementUnit'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "SettlementUnit", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Side Table */
if not exists (select * from "VersionControl" where "Name" = 'Side')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Side" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Side'
	print convert(varchar, getdate(), 120) + 'Z Table: "Side", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Side'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Side'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'Side')
		drop table "Side"

	/* Create the table. */
	create table "Side" (
		"CashSign" "decimal"(19,7) not null,
		"Description" "nvarchar"(max) not null,
		"DisabledImage" "nvarchar"(max) not null,
		"EnabledImage" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"Mnemonic" "nvarchar"(max) not null,
		"QuantitySign" "decimal"(19,7) not null,
		"RowVersion" "bigint" not null,
		"SideCode" "int" not null,
		"SideId" "uniqueIdentifier" not null,
		"SortOrder" "int" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Side" with nocheck add 
		constraint "SideKey" primary key clustered
		(
			"SideId"
		)  on "PRIMARY" ,
		constraint "SideKeySideCode" unique
		(
			"SideCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "SideKeyExternalId0"
		on "Side"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "SideKeyExternalId1"
		on "Side"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "SideKeyExternalId2"
		on "Side"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "SideKeyExternalId3"
		on "Side"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "Side" with nocheck add 
		constraint "DefaultSideIsArchived" default (0) for "IsArchived",
		constraint "DefaultSideIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Side')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Side'
	else
		insert "VersionControl" ("Name", "Revision") select 'Side', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Side'
	print convert(varchar, getdate(), 120) + 'Z Table: "Side", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Side'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Side", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The State Table */
if not exists (select * from "VersionControl" where "Name" = 'State')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "State" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'State'
	print convert(varchar, getdate(), 120) + 'Z Table: "State", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'State'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'State'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'State')
		drop table "State"

	/* Create the table. */
	create table "State" (
		"Description" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"Mnemonic" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"StateCode" "int" not null,
		"StateId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "State" with nocheck add 
		constraint "StateKey" primary key clustered
		(
			"StateId"
		)  on "PRIMARY" ,
		constraint "StateKeyStateCode" unique
		(
			"StateCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "StateKeyExternalId0"
		on "State"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "StateKeyExternalId1"
		on "State"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "StateKeyExternalId2"
		on "State"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "StateKeyExternalId3"
		on "State"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "State" with nocheck add 
		constraint "DefaultStateIsArchived" default (0) for "IsArchived",
		constraint "DefaultStateIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'State')
		update "VersionControl" set "Revision" = 0 where "Name" = 'State'
	else
		insert "VersionControl" ("Name", "Revision") select 'State', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'State'
	print convert(varchar, getdate(), 120) + 'Z Table: "State", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'State'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "State", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Status Table */
if not exists (select * from "VersionControl" where "Name" = 'Status')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Status" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Status'
	print convert(varchar, getdate(), 120) + 'Z Table: "Status", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Status'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Status'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'Status')
		drop table "Status"

	/* Create the table. */
	create table "Status" (
		"Description" "nvarchar"(max) not null,
		"DisabledImage" "nvarchar"(max) not null,
		"EnabledImage" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"Mnemonic" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"SortOrder" "int" not null,
		"StatusCode" "int" not null,
		"StatusId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Status" with nocheck add 
		constraint "StatusKey" primary key clustered
		(
			"StatusId"
		)  on "PRIMARY" ,
		constraint "StatusKeyStatusCode" unique
		(
			"StatusCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "StatusKeyExternalId0"
		on "Status"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "StatusKeyExternalId1"
		on "Status"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "StatusKeyExternalId2"
		on "Status"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "StatusKeyExternalId3"
		on "Status"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "Status" with nocheck add 
		constraint "DefaultStatusIsArchived" default (0) for "IsArchived",
		constraint "DefaultStatusIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Status')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Status'
	else
		insert "VersionControl" ("Name", "Revision") select 'Status', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Status'
	print convert(varchar, getdate(), 120) + 'Z Table: "Status", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Status'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Status", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Tenant Table */
if not exists (select * from "VersionControl" where "Name" = 'Tenant')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Tenant" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Tenant'
	print convert(varchar, getdate(), 120) + 'Z Table: "Tenant", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Tenant'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Tenant'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'Tenant')
		drop table "Tenant"

	/* Create the table. */
	create table "Tenant" (
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"IsPublic" "bit" not null,
		"Name" "nvarchar"(256) not null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Tenant" with nocheck add 
		constraint "TenantKey" primary key clustered
		(
			"TenantId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "TenantKeyExternalId0"
		on "Tenant"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "Tenant" with nocheck add 
		constraint "DefaultTenantIsArchived" default (0) for "IsArchived",
		constraint "DefaultTenantIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Tenant')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Tenant'
	else
		insert "VersionControl" ("Name", "Revision") select 'Tenant', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Tenant'
	print convert(varchar, getdate(), 120) + 'Z Table: "Tenant", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Tenant'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Tenant", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The CreditCard Table */
if not exists (select * from "VersionControl" where "Name" = 'CreditCard')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "CreditCard" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'CreditCard'
	print convert(varchar, getdate(), 120) + 'Z Table: "CreditCard", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'CreditCard'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'CreditCard'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Consumer_CreditCard')
		alter table "CreditCard" drop constraint "FK_Consumer_CreditCard"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_CreditCard')
		alter table "CreditCard" drop constraint "FK_Tenant_CreditCard"
	if exists (select * from sysobjects where type = 'U' and name = 'CreditCard')
		drop table "CreditCard"

	/* Create the table. */
	create table "CreditCard" (
		"AccountBalance" "decimal"(19,7) not null,
		"AccountNumber" "nvarchar"(max) not null,
		"ConsumerId" "uniqueIdentifier" not null,
		"CreditCardId" "uniqueIdentifier" not null,
		"DebtHolder" "nvarchar"(max) null,
		"DebtRuleId" "uniqueIdentifier" null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"OriginalAccountNumber" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "CreditCard" with nocheck add 
		constraint "CreditCardKey" primary key clustered
		(
			"CreditCardId"
		)  on "PRIMARY" ,
		constraint "CreditCardKeyExternalId1" unique
		(
			"ExternalId1",
			"TenantId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "CreditCardKeyExternalId0"
		on "CreditCard"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "CreditCard" add 
		constraint "FK_Consumer_CreditCard" foreign key 
		(
			"ConsumerId"
		) references "Consumer" (
			"ConsumerId"
		),

		constraint "FK_Tenant_CreditCard" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "CreditCard" with nocheck add 
		constraint "DefaultCreditCardIsArchived" default (0) for "IsArchived",
		constraint "DefaultCreditCardIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'CreditCard')
		update "VersionControl" set "Revision" = 0 where "Name" = 'CreditCard'
	else
		insert "VersionControl" ("Name", "Revision") select 'CreditCard', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'CreditCard'
	print convert(varchar, getdate(), 120) + 'Z Table: "CreditCard", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'CreditCard'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "CreditCard", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The TenantTree Table */
if not exists (select * from "VersionControl" where "Name" = 'TenantTree')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "TenantTree" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'TenantTree'
	print convert(varchar, getdate(), 120) + 'Z Table: "TenantTree", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'TenantTree'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'TenantTree'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_TenantTree_ChildId')
		alter table "TenantTree" drop constraint "FK_Tenant_TenantTree_ChildId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_TenantTree_ParentId')
		alter table "TenantTree" drop constraint "FK_Tenant_TenantTree_ParentId"
	if exists (select * from sysobjects where type = 'U' and name = 'TenantTree')
		drop table "TenantTree"

	/* Create the table. */
	create table "TenantTree" (
		"ChildId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ParentId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"TenantTreeId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "TenantTree" with nocheck add 
		constraint "TenantTreeKey" primary key clustered
		(
			"TenantTreeId"
		)  on "PRIMARY" ,
		constraint "TenantTreeKeyChildIdParentId" unique
		(
			"ChildId",
			"ParentId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "TenantTreeKeyExternalId0"
		on "TenantTree"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "TenantTree" add 
		constraint "FK_Tenant_TenantTree_ChildId" foreign key 
		(
			"ChildId"
		) references "Tenant" (
			"TenantId"
		),

		constraint "FK_Tenant_TenantTree_ParentId" foreign key 
		(
			"ParentId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "TenantTree" with nocheck add 
		constraint "DefaultTenantTreeIsArchived" default (0) for "IsArchived",
		constraint "DefaultTenantTreeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'TenantTree')
		update "VersionControl" set "Revision" = 0 where "Name" = 'TenantTree'
	else
		insert "VersionControl" ("Name", "Revision") select 'TenantTree', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'TenantTree'
	print convert(varchar, getdate(), 120) + 'Z Table: "TenantTree", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'TenantTree'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "TenantTree", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The TimeInForce Table */
if not exists (select * from "VersionControl" where "Name" = 'TimeInForce')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "TimeInForce" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'TimeInForce'
	print convert(varchar, getdate(), 120) + 'Z Table: "TimeInForce", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'TimeInForce'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'TimeInForce'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'TimeInForce')
		drop table "TimeInForce"

	/* Create the table. */
	create table "TimeInForce" (
		"Description" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"Mnemonic" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"SortOrder" "int" not null,
		"TimeInForceCode" "int" not null,
		"TimeInForceId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "TimeInForce" with nocheck add 
		constraint "TimeInForceKey" primary key clustered
		(
			"TimeInForceId"
		)  on "PRIMARY" ,
		constraint "TimeInForceKeyTimeInForceCode" unique
		(
			"TimeInForceCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "TimeInForceKeyExternalId0"
		on "TimeInForce"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "TimeInForceKeyExternalId1"
		on "TimeInForce"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "TimeInForceKeyExternalId2"
		on "TimeInForce"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "TimeInForceKeyExternalId3"
		on "TimeInForce"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "TimeInForce" with nocheck add 
		constraint "DefaultTimeInForceIsArchived" default (0) for "IsArchived",
		constraint "DefaultTimeInForceIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'TimeInForce')
		update "VersionControl" set "Revision" = 0 where "Name" = 'TimeInForce'
	else
		insert "VersionControl" ("Name", "Revision") select 'TimeInForce', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'TimeInForce'
	print convert(varchar, getdate(), 120) + 'Z Table: "TimeInForce", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'TimeInForce'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "TimeInForce", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The TimeUnit Table */
if not exists (select * from "VersionControl" where "Name" = 'TimeUnit')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "TimeUnit" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'TimeUnit'
	print convert(varchar, getdate(), 120) + 'Z Table: "TimeUnit", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'TimeUnit'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'TimeUnit'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'TimeUnit')
		drop table "TimeUnit"

	/* Create the table. */
	create table "TimeUnit" (
		"ExternalId0" "nvarchar"(128) null,
		"InDays" "decimal"(19,7) not null,
		"Name" "nvarchar"(128) null,
		"RowVersion" "bigint" not null,
		"TimeUnitCode" "int" not null,
		"TimeUnitId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "TimeUnit" with nocheck add 
		constraint "TimeUnitKey" primary key clustered
		(
			"TimeUnitId"
		)  on "PRIMARY" ,
		constraint "TimeUnitKeyTimeUnitCode" unique
		(
			"TimeUnitCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "TimeUnitKeyExternalId0"
		on "TimeUnit"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "TimeUnit" with nocheck add 
		constraint "DefaultTimeUnitIsArchived" default (0) for "IsArchived",
		constraint "DefaultTimeUnitIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'TimeUnit')
		update "VersionControl" set "Revision" = 0 where "Name" = 'TimeUnit'
	else
		insert "VersionControl" ("Name", "Revision") select 'TimeUnit', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'TimeUnit'
	print convert(varchar, getdate(), 120) + 'Z Table: "TimeUnit", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'TimeUnit'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "TimeUnit", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The DebtRule Table */
if not exists (select * from "VersionControl" where "Name" = 'DebtRule')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "DebtRule" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'DebtRule'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtRule", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'DebtRule'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'DebtRule'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_SettlementUnit_DebtRule')
		alter table "DebtRule" drop constraint "FK_SettlementUnit_DebtRule"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_TimeUnit_DebtRule')
		alter table "DebtRule" drop constraint "FK_TimeUnit_DebtRule"
	if exists (select * from sysobjects where type = 'U' and name = 'DebtRule')
		drop table "DebtRule"

	/* Create the table. */
	create table "DebtRule" (
		"DebtRuleId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"IsAutoSettled" "bit" not null,
		"Name" "nvarchar"(max) not null,
		"PaymentLength" "decimal"(19,7) not null,
		"PaymentStartDateLength" "decimal"(19,7) not null,
		"PaymentStartDateUnitId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"SettlementUnitId" "uniqueIdentifier" not null,
		"SettlementValue" "decimal"(19,7) not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "DebtRule" with nocheck add 
		constraint "DebtRuleKey" primary key clustered
		(
			"DebtRuleId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "DebtRuleKeyExternalId0"
		on "DebtRule"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "DebtRule" add 
		constraint "FK_SettlementUnit_DebtRule" foreign key 
		(
			"SettlementUnitId"
		) references "SettlementUnit" (
			"SettlementUnitId"
		),

		constraint "FK_TimeUnit_DebtRule" foreign key 
		(
			"PaymentStartDateUnitId"
		) references "TimeUnit" (
			"TimeUnitId"
		)

	/* Defaults */
	alter table "DebtRule" with nocheck add 
		constraint "DefaultDebtRuleIsArchived" default (0) for "IsArchived",
		constraint "DefaultDebtRuleIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'DebtRule')
		update "VersionControl" set "Revision" = 0 where "Name" = 'DebtRule'
	else
		insert "VersionControl" ("Name", "Revision") select 'DebtRule', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'DebtRule'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtRule", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'DebtRule'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtRule", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The DebtRulePaymentMethod Table */
if not exists (select * from "VersionControl" where "Name" = 'DebtRulePaymentMethod')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "DebtRulePaymentMethod" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'DebtRulePaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtRulePaymentMethod", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'DebtRulePaymentMethod'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'DebtRulePaymentMethod'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_DebtRule_DebtRulePaymentMethod')
		alter table "DebtRulePaymentMethod" drop constraint "FK_DebtRule_DebtRulePaymentMethod"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_PaymentMethodType_DebtRulePaymentMethod')
		alter table "DebtRulePaymentMethod" drop constraint "FK_PaymentMethodType_DebtRulePaymentMethod"
	if exists (select * from sysobjects where type = 'U' and name = 'DebtRulePaymentMethod')
		drop table "DebtRulePaymentMethod"

	/* Create the table. */
	create table "DebtRulePaymentMethod" (
		"DebtRuleId" "uniqueIdentifier" not null,
		"DebtRulePaymentMethodId" "uniqueIdentifier" not null,
		"PaymentMethodTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "DebtRulePaymentMethod" with nocheck add 
		constraint "DebtRulePaymentMethodKey" primary key clustered
		(
			"DebtRulePaymentMethodId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "DebtRulePaymentMethod" add 
		constraint "FK_DebtRule_DebtRulePaymentMethod" foreign key 
		(
			"DebtRuleId"
		) references "DebtRule" (
			"DebtRuleId"
		),

		constraint "FK_PaymentMethodType_DebtRulePaymentMethod" foreign key 
		(
			"PaymentMethodTypeId"
		) references "PaymentMethodType" (
			"PaymentMethodTypeId"
		)

	/* Defaults */
	alter table "DebtRulePaymentMethod" with nocheck add 
		constraint "DefaultDebtRulePaymentMethodIsArchived" default (0) for "IsArchived",
		constraint "DefaultDebtRulePaymentMethodIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'DebtRulePaymentMethod')
		update "VersionControl" set "Revision" = 0 where "Name" = 'DebtRulePaymentMethod'
	else
		insert "VersionControl" ("Name", "Revision") select 'DebtRulePaymentMethod', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'DebtRulePaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtRulePaymentMethod", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'DebtRulePaymentMethod'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtRulePaymentMethod", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Type Table */
if not exists (select * from "VersionControl" where "Name" = 'Type')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Type" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Type'
	print convert(varchar, getdate(), 120) + 'Z Table: "Type", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Type'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Type'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Image_Type')
		alter table "Type" drop constraint "FK_Image_Type"
	if exists (select * from sysobjects where type = 'U' and name = 'Type')
		drop table "Type"

	/* Create the table. */
	create table "Type" (
		"Description" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ImageId" "uniqueIdentifier" null,
		"NotifyingType" "nvarchar"(1024) null,
		"RowVersion" "bigint" not null,
		"Type" "nvarchar"(max) not null,
		"TypeId" "uniqueIdentifier" not null,
		"ViewerType" "nvarchar"(1024) null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Type" with nocheck add 
		constraint "TypeKey" primary key clustered
		(
			"TypeId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "TypeKeyExternalId0"
		on "Type"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "Type" add 
		constraint "FK_Image_Type" foreign key 
		(
			"ImageId"
		) references "Image" (
			"ImageId"
		)

	/* Defaults */
	alter table "Type" with nocheck add 
		constraint "DefaultTypeIsArchived" default (0) for "IsArchived",
		constraint "DefaultTypeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Type')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Type'
	else
		insert "VersionControl" ("Name", "Revision") select 'Type', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Type'
	print convert(varchar, getdate(), 120) + 'Z Table: "Type", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Type'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Type", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The AssetViewerTemplate Table */
if not exists (select * from "VersionControl" where "Name" = 'AssetViewerTemplate')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "AssetViewerTemplate" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'AssetViewerTemplate'
	print convert(varchar, getdate(), 120) + 'Z Table: "AssetViewerTemplate", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'AssetViewerTemplate'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'AssetViewerTemplate'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Report_AssetViewerTemplate')
		alter table "AssetViewerTemplate" drop constraint "FK_Report_AssetViewerTemplate"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ReportType_AssetViewerTemplate')
		alter table "AssetViewerTemplate" drop constraint "FK_ReportType_AssetViewerTemplate"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Type_AssetViewerTemplate')
		alter table "AssetViewerTemplate" drop constraint "FK_Type_AssetViewerTemplate"
	if exists (select * from sysobjects where type = 'U' and name = 'AssetViewerTemplate')
		drop table "AssetViewerTemplate"

	/* Create the table. */
	create table "AssetViewerTemplate" (
		"AssetViewerTemplateId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ReportId" "uniqueIdentifier" null,
		"ReportTypeId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"TypeId" "uniqueIdentifier" null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "AssetViewerTemplate" with nocheck add 
		constraint "AssetViewerTemplateKey" primary key clustered
		(
			"AssetViewerTemplateId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "AssetViewerTemplateKeyExternalId0"
		on "AssetViewerTemplate"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "AssetViewerTemplateKeyTypeIdReportTypeId"
		on "AssetViewerTemplate"
		(
			"TypeId",
			"ReportTypeId"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "AssetViewerTemplate" add 
		constraint "FK_Report_AssetViewerTemplate" foreign key 
		(
			"ReportId"
		) references "Report" (
			"ReportId"
		),

		constraint "FK_ReportType_AssetViewerTemplate" foreign key 
		(
			"ReportTypeId"
		) references "ReportType" (
			"ReportTypeId"
		),

		constraint "FK_Type_AssetViewerTemplate" foreign key 
		(
			"TypeId"
		) references "Type" (
			"TypeId"
		)

	/* Defaults */
	alter table "AssetViewerTemplate" with nocheck add 
		constraint "DefaultAssetViewerTemplateIsArchived" default (0) for "IsArchived",
		constraint "DefaultAssetViewerTemplateIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'AssetViewerTemplate')
		update "VersionControl" set "Revision" = 0 where "Name" = 'AssetViewerTemplate'
	else
		insert "VersionControl" ("Name", "Revision") select 'AssetViewerTemplate', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'AssetViewerTemplate'
	print convert(varchar, getdate(), 120) + 'Z Table: "AssetViewerTemplate", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'AssetViewerTemplate'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "AssetViewerTemplate", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Entity Table */
if not exists (select * from "VersionControl" where "Name" = 'Entity')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Entity" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Entity'
	print convert(varchar, getdate(), 120) + 'Z Table: "Entity", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Entity'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Entity'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Image_Entity')
		alter table "Entity" drop constraint "FK_Image_Entity"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_Entity')
		alter table "Entity" drop constraint "FK_Tenant_Entity"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Type_Entity')
		alter table "Entity" drop constraint "FK_Type_Entity"
	if exists (select * from sysobjects where type = 'U' and name = 'Entity')
		drop table "Entity"

	/* Create the table. */
	create table "Entity" (
		"CreatedTime" "datetime" not null,
		"Description" "nvarchar"(max) null,
		"EntityId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"ExternalId4" "nvarchar"(128) null,
		"ExternalId5" "nvarchar"(128) null,
		"ExternalId6" "nvarchar"(128) null,
		"ExternalId7" "nvarchar"(128) null,
		"ImageId" "uniqueIdentifier" not null,
		"IsHidden" "bit" not null,
		"IsReadOnly" "bit" not null,
		"ModifiedTime" "datetime" not null,
		"Name" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"TypeId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Entity" with nocheck add 
		constraint "EntityKey" primary key clustered
		(
			"EntityId"
		)  on "PRIMARY" ,
		constraint "EntityKeyExternalId7" unique
		(
			"ExternalId7",
			"TenantId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "EntityKeyExternalId0"
		on "Entity"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "EntityKeyExternalId1"
		on "Entity"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "EntityKeyExternalId2"
		on "Entity"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "EntityKeyExternalId3"
		on "Entity"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	create index "EntityKeyExternalId4"
		on "Entity"
		(
			"ExternalId4"
		)  on "PRIMARY" 

	create index "EntityKeyExternalId5"
		on "Entity"
		(
			"ExternalId5"
		)  on "PRIMARY" 

	create index "EntityKeyExternalId6"
		on "Entity"
		(
			"ExternalId6"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "Entity" add 
		constraint "FK_Image_Entity" foreign key 
		(
			"ImageId"
		) references "Image" (
			"ImageId"
		),

		constraint "FK_Tenant_Entity" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		),

		constraint "FK_Type_Entity" foreign key 
		(
			"TypeId"
		) references "Type" (
			"TypeId"
		)

	/* Defaults */
	alter table "Entity" with nocheck add 
		constraint "DefaultEntityIsArchived" default (0) for "IsArchived",
		constraint "DefaultEntityIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Entity')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Entity'
	else
		insert "VersionControl" ("Name", "Revision") select 'Entity', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Entity'
	print convert(varchar, getdate(), 120) + 'Z Table: "Entity", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Entity'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Entity", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Blotter Table */
if not exists (select * from "VersionControl" where "Name" = 'Blotter')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Blotter" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Blotter'
	print convert(varchar, getdate(), 120) + 'Z Table: "Blotter", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Blotter'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Blotter'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Entity_Blotter')
		alter table "Blotter" drop constraint "FK_Entity_Blotter"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_PartyType_Blotter')
		alter table "Blotter" drop constraint "FK_PartyType_Blotter"
	if exists (select * from sysobjects where type = 'U' and name = 'Blotter')
		drop table "Blotter"

	/* Create the table. */
	create table "Blotter" (
		"BlotterId" "uniqueIdentifier" not null,
		"PartyTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Blotter" with nocheck add 
		constraint "BlotterKey" primary key clustered
		(
			"BlotterId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Blotter" add 
		constraint "FK_Entity_Blotter" foreign key 
		(
			"BlotterId"
		) references "Entity" (
			"EntityId"
		),

		constraint "FK_PartyType_Blotter" foreign key 
		(
			"PartyTypeId"
		) references "PartyType" (
			"PartyTypeId"
		)

	/* Defaults */
	alter table "Blotter" with nocheck add 
		constraint "DefaultBlotterIsArchived" default (0) for "IsArchived",
		constraint "DefaultBlotterIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Blotter')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Blotter'
	else
		insert "VersionControl" ("Name", "Revision") select 'Blotter', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Blotter'
	print convert(varchar, getdate(), 120) + 'Z Table: "Blotter", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Blotter'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Blotter", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The BlotterConfiguration Table */
if not exists (select * from "VersionControl" where "Name" = 'BlotterConfiguration')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "BlotterConfiguration" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'BlotterConfiguration'
	print convert(varchar, getdate(), 120) + 'Z Table: "BlotterConfiguration", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'BlotterConfiguration'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'BlotterConfiguration'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_BlotterConfiguration')
		alter table "BlotterConfiguration" drop constraint "FK_Blotter_BlotterConfiguration"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Report_BlotterConfiguration')
		alter table "BlotterConfiguration" drop constraint "FK_Report_BlotterConfiguration"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ReportType_BlotterConfiguration')
		alter table "BlotterConfiguration" drop constraint "FK_ReportType_BlotterConfiguration"
	if exists (select * from sysobjects where type = 'U' and name = 'BlotterConfiguration')
		drop table "BlotterConfiguration"

	/* Create the table. */
	create table "BlotterConfiguration" (
		"BlotterConfigurationId" "uniqueIdentifier" not null,
		"BlotterId" "uniqueIdentifier" null,
		"ExternalId0" "nvarchar"(128) null,
		"ReportId" "uniqueIdentifier" null,
		"ReportTypeId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "BlotterConfiguration" with nocheck add 
		constraint "BlotterConfigurationKey" primary key clustered
		(
			"BlotterConfigurationId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "BlotterConfigurationKeyBlotterIdReportTypeId"
		on "BlotterConfiguration"
		(
			"BlotterId",
			"ReportTypeId"
		)  on "PRIMARY" 

	create index "BlotterConfigurationKeyExternalId0"
		on "BlotterConfiguration"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "BlotterConfiguration" add 
		constraint "FK_Blotter_BlotterConfiguration" foreign key 
		(
			"BlotterId"
		) references "Blotter" (
			"BlotterId"
		),

		constraint "FK_Report_BlotterConfiguration" foreign key 
		(
			"ReportId"
		) references "Report" (
			"ReportId"
		),

		constraint "FK_ReportType_BlotterConfiguration" foreign key 
		(
			"ReportTypeId"
		) references "ReportType" (
			"ReportTypeId"
		)

	/* Defaults */
	alter table "BlotterConfiguration" with nocheck add 
		constraint "DefaultBlotterConfigurationIsArchived" default (0) for "IsArchived",
		constraint "DefaultBlotterConfigurationIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'BlotterConfiguration')
		update "VersionControl" set "Revision" = 0 where "Name" = 'BlotterConfiguration'
	else
		insert "VersionControl" ("Name", "Revision") select 'BlotterConfiguration', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'BlotterConfiguration'
	print convert(varchar, getdate(), 120) + 'Z Table: "BlotterConfiguration", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'BlotterConfiguration'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "BlotterConfiguration", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The BlotterDestinationMap Table */
if not exists (select * from "VersionControl" where "Name" = 'BlotterDestinationMap')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "BlotterDestinationMap" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'BlotterDestinationMap'
	print convert(varchar, getdate(), 120) + 'Z Table: "BlotterDestinationMap", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'BlotterDestinationMap'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'BlotterDestinationMap'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_BlotterDestinationMap')
		alter table "BlotterDestinationMap" drop constraint "FK_Blotter_BlotterDestinationMap"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Destination_BlotterDestinationMap')
		alter table "BlotterDestinationMap" drop constraint "FK_Destination_BlotterDestinationMap"
	if exists (select * from sysobjects where type = 'U' and name = 'BlotterDestinationMap')
		drop table "BlotterDestinationMap"

	/* Create the table. */
	create table "BlotterDestinationMap" (
		"BlotterDestinationMapId" "uniqueIdentifier" not null,
		"BlotterId" "uniqueIdentifier" null,
		"DestinationId" "uniqueIdentifier" null,
		"ExternalId0" "nvarchar"(128) null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "BlotterDestinationMap" with nocheck add 
		constraint "BlotterDestinationMapKey" primary key clustered
		(
			"BlotterDestinationMapId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "BlotterDestinationMapKeyBlotterIdDestinationId"
		on "BlotterDestinationMap"
		(
			"BlotterId",
			"DestinationId"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "BlotterDestinationMap" add 
		constraint "FK_Blotter_BlotterDestinationMap" foreign key 
		(
			"BlotterId"
		) references "Blotter" (
			"BlotterId"
		),

		constraint "FK_Destination_BlotterDestinationMap" foreign key 
		(
			"DestinationId"
		) references "Destination" (
			"DestinationId"
		)

	/* Defaults */
	alter table "BlotterDestinationMap" with nocheck add 
		constraint "DefaultBlotterDestinationMapIsArchived" default (0) for "IsArchived",
		constraint "DefaultBlotterDestinationMapIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'BlotterDestinationMap')
		update "VersionControl" set "Revision" = 0 where "Name" = 'BlotterDestinationMap'
	else
		insert "VersionControl" ("Name", "Revision") select 'BlotterDestinationMap', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'BlotterDestinationMap'
	print convert(varchar, getdate(), 120) + 'Z Table: "BlotterDestinationMap", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'BlotterDestinationMap'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "BlotterDestinationMap", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Branch Table */
if not exists (select * from "VersionControl" where "Name" = 'Branch')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Branch" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Branch'
	print convert(varchar, getdate(), 120) + 'Z Table: "Branch", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Branch'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Branch'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_Branch')
		alter table "Branch" drop constraint "FK_Blotter_Branch"
	if exists (select * from sysobjects where type = 'U' and name = 'Branch')
		drop table "Branch"

	/* Create the table. */
	create table "Branch" (
		"BranchId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"ShortName" "nvarchar"(max) not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Branch" with nocheck add 
		constraint "BranchKey" primary key clustered
		(
			"BranchId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Branch" add 
		constraint "FK_Blotter_Branch" foreign key 
		(
			"BranchId"
		) references "Blotter" (
			"BlotterId"
		)

	/* Defaults */
	alter table "Branch" with nocheck add 
		constraint "DefaultBranchIsArchived" default (0) for "IsArchived",
		constraint "DefaultBranchIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Branch')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Branch'
	else
		insert "VersionControl" ("Name", "Revision") select 'Branch', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Branch'
	print convert(varchar, getdate(), 120) + 'Z Table: "Branch", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Branch'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Branch", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The DebtBlotter Table */
if not exists (select * from "VersionControl" where "Name" = 'DebtBlotter')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "DebtBlotter" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'DebtBlotter'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtBlotter", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'DebtBlotter'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'DebtBlotter'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_DebtBlotter')
		alter table "DebtBlotter" drop constraint "FK_Blotter_DebtBlotter"
	if exists (select * from sysobjects where type = 'U' and name = 'DebtBlotter')
		drop table "DebtBlotter"

	/* Create the table. */
	create table "DebtBlotter" (
		"DebtBlotterId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "DebtBlotter" with nocheck add 
		constraint "DebtBlotterKey" primary key clustered
		(
			"DebtBlotterId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "DebtBlotter" add 
		constraint "FK_Blotter_DebtBlotter" foreign key 
		(
			"DebtBlotterId"
		) references "Blotter" (
			"BlotterId"
		)

	/* Defaults */
	alter table "DebtBlotter" with nocheck add 
		constraint "DefaultDebtBlotterIsArchived" default (0) for "IsArchived",
		constraint "DefaultDebtBlotterIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'DebtBlotter')
		update "VersionControl" set "Revision" = 0 where "Name" = 'DebtBlotter'
	else
		insert "VersionControl" ("Name", "Revision") select 'DebtBlotter', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'DebtBlotter'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtBlotter", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'DebtBlotter'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtBlotter", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The DebtClass Table */
if not exists (select * from "VersionControl" where "Name" = 'DebtClass')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "DebtClass" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'DebtClass'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtClass", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'DebtClass'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'DebtClass'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_DebtClass')
		alter table "DebtClass" drop constraint "FK_Blotter_DebtClass"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_CommissionSchedule_DebtClass')
		alter table "DebtClass" drop constraint "FK_CommissionSchedule_DebtClass"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_DebtRule_DebtClass')
		alter table "DebtClass" drop constraint "FK_DebtRule_DebtClass"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Province_DebtClass')
		alter table "DebtClass" drop constraint "FK_Province_DebtClass"
	if exists (select * from sysobjects where type = 'U' and name = 'DebtClass')
		drop table "DebtClass"

	/* Create the table. */
	create table "DebtClass" (
		"Address1" "nvarchar"(max) null,
		"Address2" "nvarchar"(max) null,
		"BankAccountNumber" "nvarchar"(max) null,
		"BankRoutingNumber" "nvarchar"(max) null,
		"City" "nvarchar"(max) null,
		"CommissionScheduleId" "uniqueIdentifier" null,
		"CompanyName" "nvarchar"(max) null,
		"ContactName" "nvarchar"(max) null,
		"DebtClassId" "uniqueIdentifier" not null,
		"DebtRuleId" "uniqueIdentifier" null,
		"Department" "nvarchar"(max) null,
		"Email" "nvarchar"(max) null,
		"Fax" "nvarchar"(max) null,
		"ForBenefitOf" "nvarchar"(max) null,
		"Phone" "nvarchar"(max) null,
		"PostalCode" "nvarchar"(max) null,
		"ProvinceId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"SettlementTemplate" "nvarchar"(max) null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "DebtClass" with nocheck add 
		constraint "DebtClassKey" primary key clustered
		(
			"DebtClassId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "DebtClass" add 
		constraint "FK_Blotter_DebtClass" foreign key 
		(
			"DebtClassId"
		) references "Blotter" (
			"BlotterId"
		),

		constraint "FK_CommissionSchedule_DebtClass" foreign key 
		(
			"CommissionScheduleId"
		) references "CommissionSchedule" (
			"CommissionScheduleId"
		),

		constraint "FK_DebtRule_DebtClass" foreign key 
		(
			"DebtRuleId"
		) references "DebtRule" (
			"DebtRuleId"
		),

		constraint "FK_Province_DebtClass" foreign key 
		(
			"ProvinceId"
		) references "Province" (
			"ProvinceId"
		)

	/* Defaults */
	alter table "DebtClass" with nocheck add 
		constraint "DefaultDebtClassIsArchived" default (0) for "IsArchived",
		constraint "DefaultDebtClassIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'DebtClass')
		update "VersionControl" set "Revision" = 0 where "Name" = 'DebtClass'
	else
		insert "VersionControl" ("Name", "Revision") select 'DebtClass', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'DebtClass'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtClass", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'DebtClass'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtClass", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The DebtHolder Table */
if not exists (select * from "VersionControl" where "Name" = 'DebtHolder')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "DebtHolder" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'DebtHolder'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtHolder", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'DebtHolder'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'DebtHolder'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_DebtClass_DebtHolder')
		alter table "DebtHolder" drop constraint "FK_DebtClass_DebtHolder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_DebtHolderImportTranslation_DebtHolder')
		alter table "DebtHolder" drop constraint "FK_DebtHolderImportTranslation_DebtHolder"
	if exists (select * from sysobjects where type = 'U' and name = 'DebtHolder')
		drop table "DebtHolder"

	/* Create the table. */
	create table "DebtHolder" (
		"DebtHolderId" "uniqueIdentifier" not null,
		"DebtHolderImportTranslationId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "DebtHolder" with nocheck add 
		constraint "DebtHolderKey" primary key clustered
		(
			"DebtHolderId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "DebtHolder" add 
		constraint "FK_DebtClass_DebtHolder" foreign key 
		(
			"DebtHolderId"
		) references "DebtClass" (
			"DebtClassId"
		),

		constraint "FK_DebtHolderImportTranslation_DebtHolder" foreign key 
		(
			"DebtHolderImportTranslationId"
		) references "DebtHolderImportTranslation" (
			"DebtHolderImportTranslationId"
		)

	/* Defaults */
	alter table "DebtHolder" with nocheck add 
		constraint "DefaultDebtHolderIsArchived" default (0) for "IsArchived",
		constraint "DefaultDebtHolderIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'DebtHolder')
		update "VersionControl" set "Revision" = 0 where "Name" = 'DebtHolder'
	else
		insert "VersionControl" ("Name", "Revision") select 'DebtHolder', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'DebtHolder'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtHolder", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'DebtHolder'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtHolder", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The DebtNegotiator Table */
if not exists (select * from "VersionControl" where "Name" = 'DebtNegotiator')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "DebtNegotiator" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'DebtNegotiator'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtNegotiator", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'DebtNegotiator'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'DebtNegotiator'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_DebtClass_DebtNegotiator')
		alter table "DebtNegotiator" drop constraint "FK_DebtClass_DebtNegotiator"
	if exists (select * from sysobjects where type = 'U' and name = 'DebtNegotiator')
		drop table "DebtNegotiator"

	/* Create the table. */
	create table "DebtNegotiator" (
		"DebtNegotiatorId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "DebtNegotiator" with nocheck add 
		constraint "DebtNegotiatorKey" primary key clustered
		(
			"DebtNegotiatorId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "DebtNegotiator" add 
		constraint "FK_DebtClass_DebtNegotiator" foreign key 
		(
			"DebtNegotiatorId"
		) references "DebtClass" (
			"DebtClassId"
		)

	/* Defaults */
	alter table "DebtNegotiator" with nocheck add 
		constraint "DefaultDebtNegotiatorIsArchived" default (0) for "IsArchived",
		constraint "DefaultDebtNegotiatorIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'DebtNegotiator')
		update "VersionControl" set "Revision" = 0 where "Name" = 'DebtNegotiator'
	else
		insert "VersionControl" ("Name", "Revision") select 'DebtNegotiator', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'DebtNegotiator'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtNegotiator", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'DebtNegotiator'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtNegotiator", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The DebtRuleMap Table */
if not exists (select * from "VersionControl" where "Name" = 'DebtRuleMap')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "DebtRuleMap" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'DebtRuleMap'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtRuleMap", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'DebtRuleMap'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'DebtRuleMap'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_DebtClass_DebtRuleMap')
		alter table "DebtRuleMap" drop constraint "FK_DebtClass_DebtRuleMap"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_DebtRule_DebtRuleMap')
		alter table "DebtRuleMap" drop constraint "FK_DebtRule_DebtRuleMap"
	if exists (select * from sysobjects where type = 'U' and name = 'DebtRuleMap')
		drop table "DebtRuleMap"

	/* Create the table. */
	create table "DebtRuleMap" (
		"DebtClassId" "uniqueIdentifier" not null,
		"DebtRuleId" "uniqueIdentifier" not null,
		"DebtRuleMapId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "DebtRuleMap" with nocheck add 
		constraint "DebtRuleMapKey" primary key clustered
		(
			"DebtRuleMapId"
		)  on "PRIMARY" ,
		constraint "DebtRuleMapKeyDebtClassIdDebtRuleId" unique
		(
			"DebtClassId",
			"DebtRuleId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "DebtRuleMapKeyExternalId0"
		on "DebtRuleMap"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "DebtRuleMap" add 
		constraint "FK_DebtClass_DebtRuleMap" foreign key 
		(
			"DebtClassId"
		) references "DebtClass" (
			"DebtClassId"
		),

		constraint "FK_DebtRule_DebtRuleMap" foreign key 
		(
			"DebtRuleId"
		) references "DebtRule" (
			"DebtRuleId"
		)

	/* Defaults */
	alter table "DebtRuleMap" with nocheck add 
		constraint "DefaultDebtRuleMapIsArchived" default (0) for "IsArchived",
		constraint "DefaultDebtRuleMapIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'DebtRuleMap')
		update "VersionControl" set "Revision" = 0 where "Name" = 'DebtRuleMap'
	else
		insert "VersionControl" ("Name", "Revision") select 'DebtRuleMap', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'DebtRuleMap'
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtRuleMap", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'DebtRuleMap'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "DebtRuleMap", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The EntityTree Table */
if not exists (select * from "VersionControl" where "Name" = 'EntityTree')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "EntityTree" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'EntityTree'
	print convert(varchar, getdate(), 120) + 'Z Table: "EntityTree", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'EntityTree'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'EntityTree'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Entity_EntityTree_ChildId')
		alter table "EntityTree" drop constraint "FK_Entity_EntityTree_ChildId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Entity_EntityTree_ParentId')
		alter table "EntityTree" drop constraint "FK_Entity_EntityTree_ParentId"
	if exists (select * from sysobjects where type = 'U' and name = 'EntityTree')
		drop table "EntityTree"

	/* Create the table. */
	create table "EntityTree" (
		"ChildId" "uniqueIdentifier" not null,
		"EntityTreeId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ParentId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "EntityTree" with nocheck add 
		constraint "EntityTreeKey" primary key clustered
		(
			"EntityTreeId"
		)  on "PRIMARY" ,
		constraint "EntityTreeKeyChildIdParentId" unique
		(
			"ChildId",
			"ParentId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "EntityTreeKeyExternalId0"
		on "EntityTree"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "EntityTree" add 
		constraint "FK_Entity_EntityTree_ChildId" foreign key 
		(
			"ChildId"
		) references "Entity" (
			"EntityId"
		),

		constraint "FK_Entity_EntityTree_ParentId" foreign key 
		(
			"ParentId"
		) references "Entity" (
			"EntityId"
		)

	/* Defaults */
	alter table "EntityTree" with nocheck add 
		constraint "DefaultEntityTreeIsArchived" default (0) for "IsArchived",
		constraint "DefaultEntityTreeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'EntityTree')
		update "VersionControl" set "Revision" = 0 where "Name" = 'EntityTree'
	else
		insert "VersionControl" ("Name", "Revision") select 'EntityTree', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'EntityTree'
	print convert(varchar, getdate(), 120) + 'Z Table: "EntityTree", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'EntityTree'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "EntityTree", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The EquityBlotter Table */
if not exists (select * from "VersionControl" where "Name" = 'EquityBlotter')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "EquityBlotter" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'EquityBlotter'
	print convert(varchar, getdate(), 120) + 'Z Table: "EquityBlotter", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'EquityBlotter'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'EquityBlotter'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_EquityBlotter')
		alter table "EquityBlotter" drop constraint "FK_Blotter_EquityBlotter"
	if exists (select * from sysobjects where type = 'U' and name = 'EquityBlotter')
		drop table "EquityBlotter"

	/* Create the table. */
	create table "EquityBlotter" (
		"EquityBlotterId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "EquityBlotter" with nocheck add 
		constraint "EquityBlotterKey" primary key clustered
		(
			"EquityBlotterId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "EquityBlotter" add 
		constraint "FK_Blotter_EquityBlotter" foreign key 
		(
			"EquityBlotterId"
		) references "Blotter" (
			"BlotterId"
		)

	/* Defaults */
	alter table "EquityBlotter" with nocheck add 
		constraint "DefaultEquityBlotterIsArchived" default (0) for "IsArchived",
		constraint "DefaultEquityBlotterIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'EquityBlotter')
		update "VersionControl" set "Revision" = 0 where "Name" = 'EquityBlotter'
	else
		insert "VersionControl" ("Name", "Revision") select 'EquityBlotter', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'EquityBlotter'
	print convert(varchar, getdate(), 120) + 'Z Table: "EquityBlotter", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'EquityBlotter'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "EquityBlotter", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Folder Table */
if not exists (select * from "VersionControl" where "Name" = 'Folder')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Folder" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Folder'
	print convert(varchar, getdate(), 120) + 'Z Table: "Folder", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Folder'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Folder'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Entity_Folder')
		alter table "Folder" drop constraint "FK_Entity_Folder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_Folder')
		alter table "Folder" drop constraint "FK_Tenant_Folder"
	if exists (select * from sysobjects where type = 'U' and name = 'Folder')
		drop table "Folder"

	/* Create the table. */
	create table "Folder" (
		"FolderId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Folder" with nocheck add 
		constraint "FolderKey" primary key clustered
		(
			"FolderId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Folder" add 
		constraint "FK_Entity_Folder" foreign key 
		(
			"FolderId"
		) references "Entity" (
			"EntityId"
		),

		constraint "FK_Tenant_Folder" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "Folder" with nocheck add 
		constraint "DefaultFolderIsArchived" default (0) for "IsArchived",
		constraint "DefaultFolderIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Folder')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Folder'
	else
		insert "VersionControl" ("Name", "Revision") select 'Folder', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Folder'
	print convert(varchar, getdate(), 120) + 'Z Table: "Folder", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Folder'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Folder", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Issuer Table */
if not exists (select * from "VersionControl" where "Name" = 'Issuer')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Issuer" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Issuer'
	print convert(varchar, getdate(), 120) + 'Z Table: "Issuer", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Issuer'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Issuer'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Entity_Issuer')
		alter table "Issuer" drop constraint "FK_Entity_Issuer"
	if exists (select * from sysobjects where type = 'U' and name = 'Issuer')
		drop table "Issuer"

	/* Create the table. */
	create table "Issuer" (
		"Address0" "nvarchar"(max) null,
		"Address1" "nvarchar"(max) null,
		"Address2" "nvarchar"(max) null,
		"City" "nvarchar"(max) null,
		"CountryId" "uniqueIdentifier" null,
		"IssuerId" "uniqueIdentifier" not null,
		"PostalCode" "nvarchar"(max) null,
		"ProvinceId" "uniqueIdentifier" null,
		"Rating0" "decimal"(19,7) null,
		"Rating1" "decimal"(19,7) null,
		"Rating2" "decimal"(19,7) null,
		"Rating3" "decimal"(19,7) null,
		"RowVersion" "bigint" not null,
		"UserData0" "decimal"(19,7) null,
		"UserData1" "decimal"(19,7) null,
		"UserData2" "decimal"(19,7) null,
		"UserData3" "decimal"(19,7) null,
		"UserData4" "nvarchar"(max) null,
		"UserData5" "nvarchar"(max) null,
		"UserData6" "nvarchar"(max) null,
		"UserData7" "nvarchar"(max) null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Issuer" with nocheck add 
		constraint "IssuerKey" primary key clustered
		(
			"IssuerId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Issuer" add 
		constraint "FK_Entity_Issuer" foreign key 
		(
			"IssuerId"
		) references "Entity" (
			"EntityId"
		)

	/* Defaults */
	alter table "Issuer" with nocheck add 
		constraint "DefaultIssuerIsArchived" default (0) for "IsArchived",
		constraint "DefaultIssuerIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Issuer')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Issuer'
	else
		insert "VersionControl" ("Name", "Revision") select 'Issuer', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Issuer'
	print convert(varchar, getdate(), 120) + 'Z Table: "Issuer", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Issuer'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Issuer", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The RightsHolder Table */
if not exists (select * from "VersionControl" where "Name" = 'RightsHolder')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "RightsHolder" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'RightsHolder'
	print convert(varchar, getdate(), 120) + 'Z Table: "RightsHolder", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'RightsHolder'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'RightsHolder'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Entity_RightsHolder')
		alter table "RightsHolder" drop constraint "FK_Entity_RightsHolder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_RightsHolderOrganizationId')
		alter table "RightsHolder" drop constraint "FK_Tenant_RightsHolderOrganizationId"
	if exists (select * from sysobjects where type = 'U' and name = 'RightsHolder')
		drop table "RightsHolder"

	/* Create the table. */
	create table "RightsHolder" (
		"RightsHolderId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "RightsHolder" with nocheck add 
		constraint "RightsHolderKey" primary key clustered
		(
			"RightsHolderId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "RightsHolder" add 
		constraint "FK_Entity_RightsHolder" foreign key 
		(
			"RightsHolderId"
		) references "Entity" (
			"EntityId"
		),

		constraint "FK_Tenant_RightsHolderOrganizationId" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "RightsHolder" with nocheck add 
		constraint "DefaultRightsHolderIsArchived" default (0) for "IsArchived",
		constraint "DefaultRightsHolderIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'RightsHolder')
		update "VersionControl" set "Revision" = 0 where "Name" = 'RightsHolder'
	else
		insert "VersionControl" ("Name", "Revision") select 'RightsHolder', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'RightsHolder'
	print convert(varchar, getdate(), 120) + 'Z Table: "RightsHolder", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'RightsHolder'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "RightsHolder", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The AccessControl Table */
if not exists (select * from "VersionControl" where "Name" = 'AccessControl')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "AccessControl" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'AccessControl'
	print convert(varchar, getdate(), 120) + 'Z Table: "AccessControl", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'AccessControl'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'AccessControl'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_AccessRight_AccessControl')
		alter table "AccessControl" drop constraint "FK_AccessRight_AccessControl"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Entity_AccessControl')
		alter table "AccessControl" drop constraint "FK_Entity_AccessControl"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_RightsHolder_AccessControl')
		alter table "AccessControl" drop constraint "FK_RightsHolder_AccessControl"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_AccessControl')
		alter table "AccessControl" drop constraint "FK_Tenant_AccessControl"
	if exists (select * from sysobjects where type = 'U' and name = 'AccessControl')
		drop table "AccessControl"

	/* Create the table. */
	create table "AccessControl" (
		"AccessControlId" "uniqueIdentifier" not null,
		"AccessRightId" "uniqueIdentifier" not null,
		"EntityId" "uniqueIdentifier" not null,
		"RightsHolderId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "AccessControl" with nocheck add 
		constraint "AccessControlKey" primary key clustered
		(
			"AccessControlId"
		)  on "PRIMARY" ,
		constraint "AccessControlKeyRightsHolderIdEntityId" unique
		(
			"RightsHolderId",
			"EntityId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "AccessControl" add 
		constraint "FK_AccessRight_AccessControl" foreign key 
		(
			"AccessRightId"
		) references "AccessRight" (
			"AccessRightId"
		),

		constraint "FK_Entity_AccessControl" foreign key 
		(
			"EntityId"
		) references "Entity" (
			"EntityId"
		),

		constraint "FK_RightsHolder_AccessControl" foreign key 
		(
			"RightsHolderId"
		) references "RightsHolder" (
			"RightsHolderId"
		),

		constraint "FK_Tenant_AccessControl" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "AccessControl" with nocheck add 
		constraint "DefaultAccessControlIsArchived" default (0) for "IsArchived",
		constraint "DefaultAccessControlIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'AccessControl')
		update "VersionControl" set "Revision" = 0 where "Name" = 'AccessControl'
	else
		insert "VersionControl" ("Name", "Revision") select 'AccessControl', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'AccessControl'
	print convert(varchar, getdate(), 120) + 'Z Table: "AccessControl", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'AccessControl'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "AccessControl", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Group Table */
if not exists (select * from "VersionControl" where "Name" = 'Group')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Group" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Group'
	print convert(varchar, getdate(), 120) + 'Z Table: "Group", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Group'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Group'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_GroupType_Group')
		alter table "Group" drop constraint "FK_GroupType_Group"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_RightsHolder_Group')
		alter table "Group" drop constraint "FK_RightsHolder_Group"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_Group')
		alter table "Group" drop constraint "FK_Tenant_Group"
	if exists (select * from sysobjects where type = 'U' and name = 'Group')
		drop table "Group"

	/* Create the table. */
	create table "Group" (
		"GroupId" "uniqueIdentifier" not null,
		"GroupTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Group" with nocheck add 
		constraint "GroupKey" primary key clustered
		(
			"GroupId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Group" add 
		constraint "FK_GroupType_Group" foreign key 
		(
			"GroupTypeId"
		) references "GroupType" (
			"GroupTypeId"
		),

		constraint "FK_RightsHolder_Group" foreign key 
		(
			"GroupId"
		) references "RightsHolder" (
			"RightsHolderId"
		),

		constraint "FK_Tenant_Group" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "Group" with nocheck add 
		constraint "DefaultGroupIsArchived" default (0) for "IsArchived",
		constraint "DefaultGroupIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Group')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Group'
	else
		insert "VersionControl" ("Name", "Revision") select 'Group', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Group'
	print convert(varchar, getdate(), 120) + 'Z Table: "Group", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Group'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Group", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Source Table */
if not exists (select * from "VersionControl" where "Name" = 'Source')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Source" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Source'
	print convert(varchar, getdate(), 120) + 'Z Table: "Source", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Source'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Source'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_Source')
		alter table "Source" drop constraint "FK_Blotter_Source"
	if exists (select * from sysobjects where type = 'U' and name = 'Source')
		drop table "Source"

	/* Create the table. */
	create table "Source" (
		"AdvertisementSchemaId" "uniqueIdentifier" null,
		"BuyMarketValueThreshold" "decimal"(19,7) null,
		"BuyQuantityThreshold" "decimal"(19,7) null,
		"PartyTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"SellMarketValueThreshold" "decimal"(19,7) null,
		"SellQuantityThreshold" "decimal"(19,7) null,
		"ShortName" "nvarchar"(max) not null,
		"SourceId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Source" with nocheck add 
		constraint "SourceKey" primary key clustered
		(
			"SourceId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Source" add 
		constraint "FK_Blotter_Source" foreign key 
		(
			"SourceId"
		) references "Blotter" (
			"BlotterId"
		)

	/* Defaults */
	alter table "Source" with nocheck add 
		constraint "DefaultSourceIsArchived" default (0) for "IsArchived",
		constraint "DefaultSourceIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Source')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Source'
	else
		insert "VersionControl" ("Name", "Revision") select 'Source', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Source'
	print convert(varchar, getdate(), 120) + 'Z Table: "Source", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Source'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Source", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Broker Table */
if not exists (select * from "VersionControl" where "Name" = 'Broker')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Broker" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Broker'
	print convert(varchar, getdate(), 120) + 'Z Table: "Broker", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Broker'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Broker'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Source_Broker')
		alter table "Broker" drop constraint "FK_Source_Broker"
	if exists (select * from sysobjects where type = 'U' and name = 'Broker')
		drop table "Broker"

	/* Create the table. */
	create table "Broker" (
		"BrokerId" "uniqueIdentifier" not null,
		"Connected" "bit" not null,
		"Phone" "nvarchar"(max) null,
		"RowVersion" "bigint" not null,
		"Symbol" "nvarchar"(max) not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Broker" with nocheck add 
		constraint "BrokerKey" primary key clustered
		(
			"BrokerId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Broker" add 
		constraint "FK_Source_Broker" foreign key 
		(
			"BrokerId"
		) references "Source" (
			"SourceId"
		)

	/* Defaults */
	alter table "Broker" with nocheck add 
		constraint "DefaultBrokerIsArchived" default (0) for "IsArchived",
		constraint "DefaultBrokerIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Broker')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Broker'
	else
		insert "VersionControl" ("Name", "Revision") select 'Broker', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Broker'
	print convert(varchar, getdate(), 120) + 'Z Table: "Broker", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Broker'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Broker", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ClearingBroker Table */
if not exists (select * from "VersionControl" where "Name" = 'ClearingBroker')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ClearingBroker" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ClearingBroker'
	print convert(varchar, getdate(), 120) + 'Z Table: "ClearingBroker", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ClearingBroker'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ClearingBroker'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Broker_ClearingBroker')
		alter table "ClearingBroker" drop constraint "FK_Broker_ClearingBroker"
	if exists (select * from sysobjects where type = 'U' and name = 'ClearingBroker')
		drop table "ClearingBroker"

	/* Create the table. */
	create table "ClearingBroker" (
		"ClearingBrokerId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ClearingBroker" with nocheck add 
		constraint "ClearingBrokerKey" primary key clustered
		(
			"ClearingBrokerId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ClearingBroker" add 
		constraint "FK_Broker_ClearingBroker" foreign key 
		(
			"ClearingBrokerId"
		) references "Broker" (
			"BrokerId"
		)

	/* Defaults */
	alter table "ClearingBroker" with nocheck add 
		constraint "DefaultClearingBrokerIsArchived" default (0) for "IsArchived",
		constraint "DefaultClearingBrokerIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ClearingBroker')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ClearingBroker'
	else
		insert "VersionControl" ("Name", "Revision") select 'ClearingBroker', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ClearingBroker'
	print convert(varchar, getdate(), 120) + 'Z Table: "ClearingBroker", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ClearingBroker'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ClearingBroker", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Institution Table */
if not exists (select * from "VersionControl" where "Name" = 'Institution')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Institution" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Institution'
	print convert(varchar, getdate(), 120) + 'Z Table: "Institution", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Institution'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Institution'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Source_Institution')
		alter table "Institution" drop constraint "FK_Source_Institution"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_Institution')
		alter table "Institution" drop constraint "FK_Tenant_Institution"
	if exists (select * from sysobjects where type = 'U' and name = 'Institution')
		drop table "Institution"

	/* Create the table. */
	create table "Institution" (
		"InstitutionId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Institution" with nocheck add 
		constraint "InstitutionKey" primary key clustered
		(
			"InstitutionId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Institution" add 
		constraint "FK_Source_Institution" foreign key 
		(
			"InstitutionId"
		) references "Source" (
			"SourceId"
		),

		constraint "FK_Tenant_Institution" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "Institution" with nocheck add 
		constraint "DefaultInstitutionIsArchived" default (0) for "IsArchived",
		constraint "DefaultInstitutionIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Institution')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Institution'
	else
		insert "VersionControl" ("Name", "Revision") select 'Institution', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Institution'
	print convert(varchar, getdate(), 120) + 'Z Table: "Institution", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Institution'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Institution", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The SystemFolder Table */
if not exists (select * from "VersionControl" where "Name" = 'SystemFolder')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "SystemFolder" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'SystemFolder'
	print convert(varchar, getdate(), 120) + 'Z Table: "SystemFolder", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'SystemFolder'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'SystemFolder'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Folder_SystemFolder')
		alter table "SystemFolder" drop constraint "FK_Folder_SystemFolder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_SystemFolder')
		alter table "SystemFolder" drop constraint "FK_Tenant_SystemFolder"
	if exists (select * from sysobjects where type = 'U' and name = 'SystemFolder')
		drop table "SystemFolder"

	/* Create the table. */
	create table "SystemFolder" (
		"RowVersion" "bigint" not null,
		"SystemFolderId" "uniqueIdentifier" not null,
		"TenantId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "SystemFolder" with nocheck add 
		constraint "SystemFolderKey" primary key clustered
		(
			"SystemFolderId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "SystemFolder" add 
		constraint "FK_Folder_SystemFolder" foreign key 
		(
			"SystemFolderId"
		) references "Folder" (
			"FolderId"
		),

		constraint "FK_Tenant_SystemFolder" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "SystemFolder" with nocheck add 
		constraint "DefaultSystemFolderIsArchived" default (0) for "IsArchived",
		constraint "DefaultSystemFolderIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'SystemFolder')
		update "VersionControl" set "Revision" = 0 where "Name" = 'SystemFolder'
	else
		insert "VersionControl" ("Name", "Revision") select 'SystemFolder', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'SystemFolder'
	print convert(varchar, getdate(), 120) + 'Z Table: "SystemFolder", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'SystemFolder'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "SystemFolder", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The TypeTree Table */
if not exists (select * from "VersionControl" where "Name" = 'TypeTree')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "TypeTree" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'TypeTree'
	print convert(varchar, getdate(), 120) + 'Z Table: "TypeTree", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'TypeTree'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'TypeTree'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Type_TypeTreeChildId')
		alter table "TypeTree" drop constraint "FK_Type_TypeTreeChildId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Type_TypeTreeParentId')
		alter table "TypeTree" drop constraint "FK_Type_TypeTreeParentId"
	if exists (select * from sysobjects where type = 'U' and name = 'TypeTree')
		drop table "TypeTree"

	/* Create the table. */
	create table "TypeTree" (
		"ChildId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ParentId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"TypeTreeId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "TypeTree" with nocheck add 
		constraint "TypeTreeKey" primary key clustered
		(
			"TypeTreeId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "TypeTreeKeyExternalId0"
		on "TypeTree"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "TypeTree" add 
		constraint "FK_Type_TypeTreeChildId" foreign key 
		(
			"ChildId"
		) references "Type" (
			"TypeId"
		),

		constraint "FK_Type_TypeTreeParentId" foreign key 
		(
			"ParentId"
		) references "Type" (
			"TypeId"
		)

	/* Defaults */
	alter table "TypeTree" with nocheck add 
		constraint "DefaultTypeTreeIsArchived" default (0) for "IsArchived",
		constraint "DefaultTypeTreeIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'TypeTree')
		update "VersionControl" set "Revision" = 0 where "Name" = 'TypeTree'
	else
		insert "VersionControl" ("Name", "Revision") select 'TypeTree', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'TypeTree'
	print convert(varchar, getdate(), 120) + 'Z Table: "TypeTree", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'TypeTree'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "TypeTree", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The User Table */
if not exists (select * from "VersionControl" where "Name" = 'User')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "User" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'User'
	print convert(varchar, getdate(), 120) + 'Z Table: "User", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'User'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'User'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_RightsHolder_User')
		alter table "User" drop constraint "FK_RightsHolder_User"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_User')
		alter table "User" drop constraint "FK_Tenant_User"
	if exists (select * from sysobjects where type = 'U' and name = 'User')
		drop table "User"

	/* Create the table. */
	create table "User" (
		"IdentityName" "nvarchar"(256) not null,
		"IsRemoved" "bit" not null,
		"Preferences" "varbinary"(max) null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"UserId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "User" with nocheck add 
		constraint "UserKey" primary key clustered
		(
			"UserId"
		)  on "PRIMARY" ,
		constraint "UserKeyIdentityName" unique
		(
			"IdentityName"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "User" add 
		constraint "FK_RightsHolder_User" foreign key 
		(
			"UserId"
		) references "RightsHolder" (
			"RightsHolderId"
		),

		constraint "FK_Tenant_User" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "User" with nocheck add 
		constraint "DefaultUserIsArchived" default (0) for "IsArchived",
		constraint "DefaultUserIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'User')
		update "VersionControl" set "Revision" = 0 where "Name" = 'User'
	else
		insert "VersionControl" ("Name", "Revision") select 'User', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'User'
	print convert(varchar, getdate(), 120) + 'Z Table: "User", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'User'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "User", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ComplianceOfficer Table */
if not exists (select * from "VersionControl" where "Name" = 'ComplianceOfficer')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ComplianceOfficer" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ComplianceOfficer'
	print convert(varchar, getdate(), 120) + 'Z Table: "ComplianceOfficer", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ComplianceOfficer'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ComplianceOfficer'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_ComplianceOfficer')
		alter table "ComplianceOfficer" drop constraint "FK_Tenant_ComplianceOfficer"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_ComplianceOfficer')
		alter table "ComplianceOfficer" drop constraint "FK_User_ComplianceOfficer"
	if exists (select * from sysobjects where type = 'U' and name = 'ComplianceOfficer')
		drop table "ComplianceOfficer"

	/* Create the table. */
	create table "ComplianceOfficer" (
		"ComplianceOfficerId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ComplianceOfficer" with nocheck add 
		constraint "ComplianceOfficerKey" primary key clustered
		(
			"ComplianceOfficerId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ComplianceOfficer" add 
		constraint "FK_Tenant_ComplianceOfficer" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		),

		constraint "FK_User_ComplianceOfficer" foreign key 
		(
			"ComplianceOfficerId"
		) references "User" (
			"UserId"
		)

	/* Defaults */
	alter table "ComplianceOfficer" with nocheck add 
		constraint "DefaultComplianceOfficerIsArchived" default (0) for "IsArchived",
		constraint "DefaultComplianceOfficerIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ComplianceOfficer')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ComplianceOfficer'
	else
		insert "VersionControl" ("Name", "Revision") select 'ComplianceOfficer', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ComplianceOfficer'
	print convert(varchar, getdate(), 120) + 'Z Table: "ComplianceOfficer", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ComplianceOfficer'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ComplianceOfficer", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The GroupUsers Table */
if not exists (select * from "VersionControl" where "Name" = 'GroupUsers')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "GroupUsers" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'GroupUsers'
	print convert(varchar, getdate(), 120) + 'Z Table: "GroupUsers", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'GroupUsers'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'GroupUsers'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Group_GroupUsers')
		alter table "GroupUsers" drop constraint "FK_Group_GroupUsers"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_GroupUsers')
		alter table "GroupUsers" drop constraint "FK_Tenant_GroupUsers"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_GroupUsers')
		alter table "GroupUsers" drop constraint "FK_User_GroupUsers"
	if exists (select * from sysobjects where type = 'U' and name = 'GroupUsers')
		drop table "GroupUsers"

	/* Create the table. */
	create table "GroupUsers" (
		"ExternalId0" "nvarchar"(128) null,
		"GroupId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"UserId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "GroupUsers" with nocheck add 
		constraint "GroupUsersKey" primary key clustered
		(
			"GroupId",
			"UserId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "GroupUsersKeyExternalId0"
		on "GroupUsers"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "GroupUsers" add 
		constraint "FK_Group_GroupUsers" foreign key 
		(
			"GroupId"
		) references "Group" (
			"GroupId"
		),

		constraint "FK_Tenant_GroupUsers" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		),

		constraint "FK_User_GroupUsers" foreign key 
		(
			"UserId"
		) references "User" (
			"UserId"
		)

	/* Defaults */
	alter table "GroupUsers" with nocheck add 
		constraint "DefaultGroupUsersIsArchived" default (0) for "IsArchived",
		constraint "DefaultGroupUsersIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'GroupUsers')
		update "VersionControl" set "Revision" = 0 where "Name" = 'GroupUsers'
	else
		insert "VersionControl" ("Name", "Revision") select 'GroupUsers', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'GroupUsers'
	print convert(varchar, getdate(), 120) + 'Z Table: "GroupUsers", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'GroupUsers'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "GroupUsers", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Trader Table */
if not exists (select * from "VersionControl" where "Name" = 'Trader')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Trader" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Trader'
	print convert(varchar, getdate(), 120) + 'Z Table: "Trader", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Trader'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Trader'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_Trader')
		alter table "Trader" drop constraint "FK_Blotter_Trader"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_Trader')
		alter table "Trader" drop constraint "FK_Tenant_Trader"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_Trader')
		alter table "Trader" drop constraint "FK_User_Trader"
	if exists (select * from sysobjects where type = 'U' and name = 'Trader')
		drop table "Trader"

	/* Create the table. */
	create table "Trader" (
		"Address1" "nvarchar"(max) null,
		"Address2" "nvarchar"(max) null,
		"Address3" "nvarchar"(max) null,
		"CommissionMaximum" "decimal"(19,7) null,
		"CommissionMinimum" "decimal"(19,7) null,
		"CommissionRate" "decimal"(19,7) null,
		"CommissionRateTypeCode" "int" null,
		"CrossingId" "uniqueIdentifier" not null,
		"DefaultAccountId" "uniqueIdentifier" null,
		"DefaultBlotterId" "uniqueIdentifier" null,
		"EmailAddress" "nvarchar"(max) null,
		"FixAccountId" "nvarchar"(max) null,
		"IsAgencyMatch" "bit" not null,
		"IsBrokerMatch" "bit" not null,
		"IsCommissionChangeAllowed" "bit" not null,
		"IsEditExecutionsAllowed" "bit" not null,
		"IsHedgeMatch" "bit" not null,
		"IsHeld" "bit" not null,
		"IsInstitutionMatch" "bit" not null,
		"LastDeletedOrder" "datetime" null,
		"LastFilledOrder" "datetime" null,
		"LastFilledSourceOrder" "datetime" null,
		"LastTrade" "datetime" null,
		"LotSizeDefault" "int" not null,
		"MarketSleep" "int" not null,
		"MaximumVolatilityDefault" "decimal"(19,7) null,
		"NewsFreeTimeDefault" "int" null,
		"OatsAccountType" "nvarchar"(max) null,
		"OatsOrigDeptId" "nvarchar"(max) null,
		"OrderMaximumLimitDelta" "decimal"(19,7) null,
		"OrderMaximumMarketValue" "decimal"(19,7) null,
		"OrderMaximumQuantity" "decimal"(19,7) null,
		"OrderWarningMarketValue" "decimal"(19,7) null,
		"OrderWarningQuantity" "decimal"(19,7) null,
		"Phone" "nvarchar"(max) null,
		"ReviewWindow" "int" not null,
		"RowVersion" "bigint" not null,
		"ScraperConfigurationString" "nvarchar"(max) null,
		"StartTimeDefault" "datetime" null,
		"StopTimeDefault" "datetime" null,
		"TagId" "nvarchar"(max) null,
		"TenantId" "uniqueIdentifier" not null,
		"TraderId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Trader" with nocheck add 
		constraint "TraderKey" primary key clustered
		(
			"TraderId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Trader" add 
		constraint "FK_Blotter_Trader" foreign key 
		(
			"DefaultBlotterId"
		) references "Blotter" (
			"BlotterId"
		),

		constraint "FK_Tenant_Trader" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		),

		constraint "FK_User_Trader" foreign key 
		(
			"TraderId"
		) references "User" (
			"UserId"
		)

	/* Defaults */
	alter table "Trader" with nocheck add 
		constraint "DefaultTraderIsArchived" default (0) for "IsArchived",
		constraint "DefaultTraderIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Trader')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Trader'
	else
		insert "VersionControl" ("Name", "Revision") select 'Trader', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Trader'
	print convert(varchar, getdate(), 120) + 'Z Table: "Trader", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Trader'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Trader", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The BrokerAccount Table */
if not exists (select * from "VersionControl" where "Name" = 'BrokerAccount')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "BrokerAccount" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'BrokerAccount'
	print convert(varchar, getdate(), 120) + 'Z Table: "BrokerAccount", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'BrokerAccount'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'BrokerAccount'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Broker_BrokerAccount')
		alter table "BrokerAccount" drop constraint "FK_Broker_BrokerAccount"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Trader_BrokerAccount')
		alter table "BrokerAccount" drop constraint "FK_Trader_BrokerAccount"
	if exists (select * from sysobjects where type = 'U' and name = 'BrokerAccount')
		drop table "BrokerAccount"

	/* Create the table. */
	create table "BrokerAccount" (
		"BrokerAccountId" "uniqueIdentifier" not null,
		"BrokerId" "uniqueIdentifier" not null,
		"Description" "nvarchar"(max) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"Mnemonic" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"TraderId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "BrokerAccount" with nocheck add 
		constraint "BrokerAccountKey" primary key clustered
		(
			"BrokerAccountId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "BrokerAccountKeyExternalId0"
		on "BrokerAccount"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "BrokerAccountKeyExternalId1"
		on "BrokerAccount"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "BrokerAccountKeyExternalId2"
		on "BrokerAccount"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "BrokerAccountKeyExternalId3"
		on "BrokerAccount"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "BrokerAccount" add 
		constraint "FK_Broker_BrokerAccount" foreign key 
		(
			"BrokerId"
		) references "Broker" (
			"BrokerId"
		),

		constraint "FK_Trader_BrokerAccount" foreign key 
		(
			"TraderId"
		) references "Trader" (
			"TraderId"
		)

	/* Defaults */
	alter table "BrokerAccount" with nocheck add 
		constraint "DefaultBrokerAccountIsArchived" default (0) for "IsArchived",
		constraint "DefaultBrokerAccountIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'BrokerAccount')
		update "VersionControl" set "Revision" = 0 where "Name" = 'BrokerAccount'
	else
		insert "VersionControl" ("Name", "Revision") select 'BrokerAccount', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'BrokerAccount'
	print convert(varchar, getdate(), 120) + 'Z Table: "BrokerAccount", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'BrokerAccount'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "BrokerAccount", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The VolumeCategory Table */
if not exists (select * from "VersionControl" where "Name" = 'VolumeCategory')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "VolumeCategory" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'VolumeCategory'
	print convert(varchar, getdate(), 120) + 'Z Table: "VolumeCategory", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'VolumeCategory'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'VolumeCategory'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'VolumeCategory')
		drop table "VolumeCategory"

	/* Create the table. */
	create table "VolumeCategory" (
		"Description" "nvarchar"(max) null,
		"ExternalId0" "nvarchar"(128) null,
		"HighVolumeRange" "decimal"(19,7) null,
		"LowVolumeRange" "decimal"(19,7) null,
		"Mnemonic" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"VolumeCategoryCode" "int" not null,
		"VolumeCategoryId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "VolumeCategory" with nocheck add 
		constraint "VolumeCategoryKey" primary key clustered
		(
			"VolumeCategoryId"
		)  on "PRIMARY" ,
		constraint "VolumeCategoryKeyVolumeCategoryCode" unique
		(
			"VolumeCategoryCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "VolumeCategoryKeyExternalId0"
		on "VolumeCategory"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "VolumeCategory" with nocheck add 
		constraint "DefaultVolumeCategoryIsArchived" default (0) for "IsArchived",
		constraint "DefaultVolumeCategoryIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'VolumeCategory')
		update "VersionControl" set "Revision" = 0 where "Name" = 'VolumeCategory'
	else
		insert "VersionControl" ("Name", "Revision") select 'VolumeCategory', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'VolumeCategory'
	print convert(varchar, getdate(), 120) + 'Z Table: "VolumeCategory", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'VolumeCategory'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "VolumeCategory", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Security Table */
if not exists (select * from "VersionControl" where "Name" = 'Security')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Security" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Security'
	print convert(varchar, getdate(), 120) + 'Z Table: "Security", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Security'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Security'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Country_Security')
		alter table "Security" drop constraint "FK_Country_Security"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Entity_Security')
		alter table "Security" drop constraint "FK_Entity_Security"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_Security')
		alter table "Security" drop constraint "FK_Tenant_Security"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_VolumeCategory_Security')
		alter table "Security" drop constraint "FK_VolumeCategory_Security"
	if exists (select * from sysobjects where type = 'U' and name = 'Security')
		drop table "Security"

	/* Create the table. */
	create table "Security" (
		"AverageDailyVolume" "decimal"(19,7) null,
		"CountryId" "uniqueIdentifier" not null,
		"Logo" "nvarchar"(max) null,
		"MarketCapitalization" "decimal"(19,7) null,
		"MinimumQuantity" "decimal"(19,7) null,
		"PriceFactor" "decimal"(19,7) not null,
		"QuantityFactor" "decimal"(19,7) not null,
		"RowVersion" "bigint" not null,
		"SecurityId" "uniqueIdentifier" not null,
		"Symbol" "nvarchar"(max) not null,
		"TenantId" "uniqueIdentifier" not null,
		"VolumeCategoryId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Security" with nocheck add 
		constraint "SecurityKey" primary key clustered
		(
			"SecurityId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Security" add 
		constraint "FK_Country_Security" foreign key 
		(
			"CountryId"
		) references "Country" (
			"CountryId"
		),

		constraint "FK_Entity_Security" foreign key 
		(
			"SecurityId"
		) references "Entity" (
			"EntityId"
		),

		constraint "FK_Tenant_Security" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		),

		constraint "FK_VolumeCategory_Security" foreign key 
		(
			"VolumeCategoryId"
		) references "VolumeCategory" (
			"VolumeCategoryId"
		)

	/* Defaults */
	alter table "Security" with nocheck add 
		constraint "DefaultSecurityIsArchived" default (0) for "IsArchived",
		constraint "DefaultSecurityIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Security')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Security'
	else
		insert "VersionControl" ("Name", "Revision") select 'Security', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Security'
	print convert(varchar, getdate(), 120) + 'Z Table: "Security", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Security'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Security", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerDebt Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerDebt')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerDebt" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebt'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebt", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerDebt'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerDebt'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Consumer_ConsumerDebt')
		alter table "ConsumerDebt" drop constraint "FK_Consumer_ConsumerDebt"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_CreditCard_ConsumerDebt')
		alter table "ConsumerDebt" drop constraint "FK_CreditCard_ConsumerDebt"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_DebtRule_ConsumerDebt')
		alter table "ConsumerDebt" drop constraint "FK_DebtRule_ConsumerDebt"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_ConsumerDebt')
		alter table "ConsumerDebt" drop constraint "FK_Security_ConsumerDebt"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_ConsumerDebt')
		alter table "ConsumerDebt" drop constraint "FK_Tenant_ConsumerDebt"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerDebt')
		drop table "ConsumerDebt"

	/* Create the table. */
	create table "ConsumerDebt" (
		"CollectionDate" "datetime" null,
		"ConsumerDebtId" "uniqueIdentifier" not null,
		"ConsumerId" "uniqueIdentifier" not null,
		"CreditCardId" "uniqueIdentifier" not null,
		"DateOfDelinquency" "datetime" null,
		"DebtRuleId" "uniqueIdentifier" null,
		"ExternalId0" "nvarchar"(128) null,
		"Representative" "nvarchar"(max) null,
		"RowVersion" "bigint" not null,
		"Tag" "nvarchar"(max) null,
		"TenantId" "uniqueIdentifier" not null,
		"VendorCode" "nvarchar"(max) not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerDebt" with nocheck add 
		constraint "ConsumerDebtKey" primary key clustered
		(
			"ConsumerDebtId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerDebt" add 
		constraint "FK_Consumer_ConsumerDebt" foreign key 
		(
			"ConsumerId"
		) references "Consumer" (
			"ConsumerId"
		),

		constraint "FK_CreditCard_ConsumerDebt" foreign key 
		(
			"CreditCardId"
		) references "CreditCard" (
			"CreditCardId"
		),

		constraint "FK_DebtRule_ConsumerDebt" foreign key 
		(
			"DebtRuleId"
		) references "DebtRule" (
			"DebtRuleId"
		),

		constraint "FK_Security_ConsumerDebt" foreign key 
		(
			"ConsumerDebtId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Tenant_ConsumerDebt" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "ConsumerDebt" with nocheck add 
		constraint "DefaultConsumerDebtIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerDebtIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerDebt')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerDebt'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerDebt', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebt'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebt", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerDebt'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebt", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerTrust Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerTrust')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerTrust" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrust'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrust", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerTrust'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerTrust'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Consumer_ConsumerTrust')
		alter table "ConsumerTrust" drop constraint "FK_Consumer_ConsumerTrust"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_DebtRule_ConsumerTrust')
		alter table "ConsumerTrust" drop constraint "FK_DebtRule_ConsumerTrust"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_ConsumerTrust')
		alter table "ConsumerTrust" drop constraint "FK_Security_ConsumerTrust"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_ConsumerTrust')
		alter table "ConsumerTrust" drop constraint "FK_Tenant_ConsumerTrust"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerTrust')
		drop table "ConsumerTrust"

	/* Create the table. */
	create table "ConsumerTrust" (
		"ConsumerId" "uniqueIdentifier" not null,
		"ConsumerTrustId" "uniqueIdentifier" not null,
		"DebtRuleId" "uniqueIdentifier" null,
		"ExternalId0" "nvarchar"(128) null,
		"RowVersion" "bigint" not null,
		"SavingsAccount" "nvarchar"(max) null,
		"SavingsBalance" "decimal"(19,7) not null,
		"Tag" "nvarchar"(max) null,
		"TenantId" "uniqueIdentifier" not null,
		"VendorCode" "nvarchar"(max) not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerTrust" with nocheck add 
		constraint "ConsumerTrustKey" primary key clustered
		(
			"ConsumerTrustId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerTrust" add 
		constraint "FK_Consumer_ConsumerTrust" foreign key 
		(
			"ConsumerId"
		) references "Consumer" (
			"ConsumerId"
		),

		constraint "FK_DebtRule_ConsumerTrust" foreign key 
		(
			"DebtRuleId"
		) references "DebtRule" (
			"DebtRuleId"
		),

		constraint "FK_Security_ConsumerTrust" foreign key 
		(
			"ConsumerTrustId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Tenant_ConsumerTrust" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "ConsumerTrust" with nocheck add 
		constraint "DefaultConsumerTrustIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerTrustIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerTrust')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerTrust'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerTrust', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrust'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrust", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerTrust'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrust", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Currency Table */
if not exists (select * from "VersionControl" where "Name" = 'Currency')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Currency" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Currency'
	print convert(varchar, getdate(), 120) + 'Z Table: "Currency", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Currency'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Currency'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_Currency')
		alter table "Currency" drop constraint "FK_Security_Currency"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Tenant_Currency')
		alter table "Currency" drop constraint "FK_Tenant_Currency"
	if exists (select * from sysobjects where type = 'U' and name = 'Currency')
		drop table "Currency"

	/* Create the table. */
	create table "Currency" (
		"CurrencyId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"TenantId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Currency" with nocheck add 
		constraint "CurrencyKey" primary key clustered
		(
			"CurrencyId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Currency" add 
		constraint "FK_Security_Currency" foreign key 
		(
			"CurrencyId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Tenant_Currency" foreign key 
		(
			"TenantId"
		) references "Tenant" (
			"TenantId"
		)

	/* Defaults */
	alter table "Currency" with nocheck add 
		constraint "DefaultCurrencyIsArchived" default (0) for "IsArchived",
		constraint "DefaultCurrencyIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Currency')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Currency'
	else
		insert "VersionControl" ("Name", "Revision") select 'Currency', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Currency'
	print convert(varchar, getdate(), 120) + 'Z Table: "Currency", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Currency'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Currency", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The AccountBase Table */
if not exists (select * from "VersionControl" where "Name" = 'AccountBase')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "AccountBase" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'AccountBase'
	print convert(varchar, getdate(), 120) + 'Z Table: "AccountBase", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'AccountBase'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'AccountBase'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Country_AccountBase')
		alter table "AccountBase" drop constraint "FK_Country_AccountBase"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Currency_AccountBase')
		alter table "AccountBase" drop constraint "FK_Currency_AccountBase"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Entity_AccountBase')
		alter table "AccountBase" drop constraint "FK_Entity_AccountBase"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Province_AccountBase')
		alter table "AccountBase" drop constraint "FK_Province_AccountBase"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_AccountBase')
		alter table "AccountBase" drop constraint "FK_User_AccountBase"
	if exists (select * from sysobjects where type = 'U' and name = 'AccountBase')
		drop table "AccountBase"

	/* Create the table. */
	create table "AccountBase" (
		"AccountBaseId" "uniqueIdentifier" not null,
		"Address0" "nvarchar"(max) null,
		"Address1" "nvarchar"(max) null,
		"Address2" "nvarchar"(max) null,
		"City" "nvarchar"(max) null,
		"CountryId" "uniqueIdentifier" null,
		"CurrencyId" "uniqueIdentifier" not null,
		"Mnemonic" "nvarchar"(max) null,
		"PostalCode" "nvarchar"(max) null,
		"ProvinceId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"UserData0" "decimal"(19,7) null,
		"UserData1" "decimal"(19,7) null,
		"UserData2" "decimal"(19,7) null,
		"UserData3" "decimal"(19,7) null,
		"UserData4" "nvarchar"(max) null,
		"UserData5" "nvarchar"(max) null,
		"UserData6" "nvarchar"(max) null,
		"UserData7" "nvarchar"(max) null,
		"UserId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "AccountBase" with nocheck add 
		constraint "AccountBaseKey" primary key clustered
		(
			"AccountBaseId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "AccountBase" add 
		constraint "FK_Country_AccountBase" foreign key 
		(
			"CountryId"
		) references "Country" (
			"CountryId"
		),

		constraint "FK_Currency_AccountBase" foreign key 
		(
			"CurrencyId"
		) references "Currency" (
			"CurrencyId"
		),

		constraint "FK_Entity_AccountBase" foreign key 
		(
			"AccountBaseId"
		) references "Entity" (
			"EntityId"
		),

		constraint "FK_Province_AccountBase" foreign key 
		(
			"ProvinceId"
		) references "Province" (
			"ProvinceId"
		),

		constraint "FK_User_AccountBase" foreign key 
		(
			"UserId"
		) references "User" (
			"UserId"
		)

	/* Defaults */
	alter table "AccountBase" with nocheck add 
		constraint "DefaultAccountBaseIsArchived" default (0) for "IsArchived",
		constraint "DefaultAccountBaseIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'AccountBase')
		update "VersionControl" set "Revision" = 0 where "Name" = 'AccountBase'
	else
		insert "VersionControl" ("Name", "Revision") select 'AccountBase', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'AccountBase'
	print convert(varchar, getdate(), 120) + 'Z Table: "AccountBase", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'AccountBase'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "AccountBase", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Account Table */
if not exists (select * from "VersionControl" where "Name" = 'Account')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Account" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Account'
	print convert(varchar, getdate(), 120) + 'Z Table: "Account", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Account'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Account'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_AccountBase_Account')
		alter table "Account" drop constraint "FK_AccountBase_Account"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_LotHandling_Account')
		alter table "Account" drop constraint "FK_LotHandling_Account"
	if exists (select * from sysobjects where type = 'U' and name = 'Account')
		drop table "Account"

	/* Create the table. */
	create table "Account" (
		"AccountId" "uniqueIdentifier" not null,
		"LotHandlingId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Account" with nocheck add 
		constraint "AccountKey" primary key clustered
		(
			"AccountId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Account" add 
		constraint "FK_AccountBase_Account" foreign key 
		(
			"AccountId"
		) references "AccountBase" (
			"AccountBaseId"
		),

		constraint "FK_LotHandling_Account" foreign key 
		(
			"LotHandlingId"
		) references "LotHandling" (
			"LotHandlingId"
		)

	/* Defaults */
	alter table "Account" with nocheck add 
		constraint "DefaultAccountIsArchived" default (0) for "IsArchived",
		constraint "DefaultAccountIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Account')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Account'
	else
		insert "VersionControl" ("Name", "Revision") select 'Account', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Account'
	print convert(varchar, getdate(), 120) + 'Z Table: "Account", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Account'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Account", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The AccountGroup Table */
if not exists (select * from "VersionControl" where "Name" = 'AccountGroup')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "AccountGroup" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'AccountGroup'
	print convert(varchar, getdate(), 120) + 'Z Table: "AccountGroup", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'AccountGroup'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'AccountGroup'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_AccountBase_AccountGroup')
		alter table "AccountGroup" drop constraint "FK_AccountBase_AccountGroup"
	if exists (select * from sysobjects where type = 'U' and name = 'AccountGroup')
		drop table "AccountGroup"

	/* Create the table. */
	create table "AccountGroup" (
		"AccountGroupId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "AccountGroup" with nocheck add 
		constraint "AccountGroupKey" primary key clustered
		(
			"AccountGroupId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "AccountGroup" add 
		constraint "FK_AccountBase_AccountGroup" foreign key 
		(
			"AccountGroupId"
		) references "AccountBase" (
			"AccountBaseId"
		)

	/* Defaults */
	alter table "AccountGroup" with nocheck add 
		constraint "DefaultAccountGroupIsArchived" default (0) for "IsArchived",
		constraint "DefaultAccountGroupIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'AccountGroup')
		update "VersionControl" set "Revision" = 0 where "Name" = 'AccountGroup'
	else
		insert "VersionControl" ("Name", "Revision") select 'AccountGroup', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'AccountGroup'
	print convert(varchar, getdate(), 120) + 'Z Table: "AccountGroup", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'AccountGroup'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "AccountGroup", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Equity Table */
if not exists (select * from "VersionControl" where "Name" = 'Equity')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Equity" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Equity'
	print convert(varchar, getdate(), 120) + 'Z Table: "Equity", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Equity'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Equity'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Exchange_Equity')
		alter table "Equity" drop constraint "FK_Exchange_Equity"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_Equity_EquityId')
		alter table "Equity" drop constraint "FK_Security_Equity_EquityId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_Equity_SettlementId')
		alter table "Equity" drop constraint "FK_Security_Equity_SettlementId"
	if exists (select * from sysobjects where type = 'U' and name = 'Equity')
		drop table "Equity"

	/* Create the table. */
	create table "Equity" (
		"EquityId" "uniqueIdentifier" not null,
		"ExchangeId" "uniqueIdentifier" null,
		"IssuerId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"SettlementId" "uniqueIdentifier" not null,
		"SharesOutstanding" "decimal"(19,7) null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Equity" with nocheck add 
		constraint "EquityKey" primary key clustered
		(
			"EquityId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Equity" add 
		constraint "FK_Exchange_Equity" foreign key 
		(
			"ExchangeId"
		) references "Exchange" (
			"ExchangeId"
		),

		constraint "FK_Security_Equity_EquityId" foreign key 
		(
			"EquityId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Security_Equity_SettlementId" foreign key 
		(
			"SettlementId"
		) references "Security" (
			"SecurityId"
		)

	/* Defaults */
	alter table "Equity" with nocheck add 
		constraint "DefaultEquityIsArchived" default (0) for "IsArchived",
		constraint "DefaultEquityIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Equity')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Equity'
	else
		insert "VersionControl" ("Name", "Revision") select 'Equity', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Equity'
	print convert(varchar, getdate(), 120) + 'Z Table: "Equity", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Equity'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Equity", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Position Table */
if not exists (select * from "VersionControl" where "Name" = 'Position')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Position" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Position'
	print convert(varchar, getdate(), 120) + 'Z Table: "Position", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Position'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Position'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Account_Position')
		alter table "Position" drop constraint "FK_Account_Position"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_PositionType_Position')
		alter table "Position" drop constraint "FK_PositionType_Position"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_Position')
		alter table "Position" drop constraint "FK_Security_Position"
	if exists (select * from sysobjects where type = 'U' and name = 'Position')
		drop table "Position"

	/* Create the table. */
	create table "Position" (
		"AccountId" "uniqueIdentifier" not null,
		"PositionTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"SecurityId" "uniqueIdentifier" not null,
		"UserData0" "decimal"(19,7) null,
		"UserData1" "decimal"(19,7) null,
		"UserData2" "decimal"(19,7) null,
		"UserData3" "decimal"(19,7) null,
		"UserData4" "decimal"(19,7) null,
		"UserData5" "decimal"(19,7) null,
		"UserData6" "decimal"(19,7) null,
		"UserData7" "decimal"(19,7) null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Position" with nocheck add 
		constraint "PositionKey" primary key clustered
		(
			"AccountId",
			"SecurityId",
			"PositionTypeId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Position" add 
		constraint "FK_Account_Position" foreign key 
		(
			"AccountId"
		) references "Account" (
			"AccountId"
		),

		constraint "FK_PositionType_Position" foreign key 
		(
			"PositionTypeId"
		) references "PositionType" (
			"PositionTypeId"
		),

		constraint "FK_Security_Position" foreign key 
		(
			"SecurityId"
		) references "Security" (
			"SecurityId"
		)

	/* Defaults */
	alter table "Position" with nocheck add 
		constraint "DefaultPositionIsArchived" default (0) for "IsArchived",
		constraint "DefaultPositionIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Position')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Position'
	else
		insert "VersionControl" ("Name", "Revision") select 'Position', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Position'
	print convert(varchar, getdate(), 120) + 'Z Table: "Position", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Position'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Position", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Price Table */
if not exists (select * from "VersionControl" where "Name" = 'Price')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Price" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Price'
	print convert(varchar, getdate(), 120) + 'Z Table: "Price", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Price'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Price'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_Price_CurrencyId')
		alter table "Price" drop constraint "FK_Security_Price_CurrencyId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_Price_SecurityId')
		alter table "Price" drop constraint "FK_Security_Price_SecurityId"
	if exists (select * from sysobjects where type = 'U' and name = 'Price')
		drop table "Price"

	/* Create the table. */
	create table "Price" (
		"AskPrice" "decimal"(19,7) not null,
		"AskSize" "decimal"(19,7) not null,
		"BidPrice" "decimal"(19,7) not null,
		"BidSize" "decimal"(19,7) not null,
		"ClosePrice" "decimal"(19,7) not null,
		"CurrencyId" "uniqueIdentifier" not null,
		"HighPrice" "decimal"(19,7) not null,
		"LastPrice" "decimal"(19,7) not null,
		"LastSize" "decimal"(19,7) not null,
		"LowPrice" "decimal"(19,7) not null,
		"OpenPrice" "decimal"(19,7) not null,
		"PriceChange" "decimal"(19,7) not null,
		"RowVersion" "bigint" not null,
		"SecurityId" "uniqueIdentifier" not null,
		"Volume" "decimal"(19,7) not null,
		"VolumeWeightedAveragePrice" "decimal"(19,7) not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Price" with nocheck add 
		constraint "PriceKey" primary key clustered
		(
			"SecurityId",
			"CurrencyId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Price" add 
		constraint "FK_Security_Price_CurrencyId" foreign key 
		(
			"CurrencyId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Security_Price_SecurityId" foreign key 
		(
			"SecurityId"
		) references "Security" (
			"SecurityId"
		)

	/* Defaults */
	alter table "Price" with nocheck add 
		constraint "DefaultPriceIsArchived" default (0) for "IsArchived",
		constraint "DefaultPriceIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Price')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Price'
	else
		insert "VersionControl" ("Name", "Revision") select 'Price', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Price'
	print convert(varchar, getdate(), 120) + 'Z Table: "Price", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Price'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Price", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The TaxLot Table */
if not exists (select * from "VersionControl" where "Name" = 'TaxLot')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "TaxLot" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'TaxLot'
	print convert(varchar, getdate(), 120) + 'Z Table: "TaxLot", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'TaxLot'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'TaxLot'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Account_TaxLot')
		alter table "TaxLot" drop constraint "FK_Account_TaxLot"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_PositionType_TaxLot')
		alter table "TaxLot" drop constraint "FK_PositionType_TaxLot"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_TaxLot')
		alter table "TaxLot" drop constraint "FK_Security_TaxLot"
	if exists (select * from sysobjects where type = 'U' and name = 'TaxLot')
		drop table "TaxLot"

	/* Create the table. */
	create table "TaxLot" (
		"AccountId" "uniqueIdentifier" not null,
		"Cost" "decimal"(19,7) not null,
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"ExternalId2" "nvarchar"(128) null,
		"ExternalId3" "nvarchar"(128) null,
		"LocalCost" "decimal"(19,7) not null,
		"PositionTypeId" "uniqueIdentifier" not null,
		"Quantity" "decimal"(19,7) not null,
		"RowVersion" "bigint" not null,
		"SecurityId" "uniqueIdentifier" not null,
		"SettlementDate" "datetime" null,
		"TaxLotId" "uniqueIdentifier" not null,
		"TradeDate" "datetime" null,
		"UserData0" "decimal"(19,7) null,
		"UserData1" "decimal"(19,7) null,
		"UserData2" "decimal"(19,7) null,
		"UserData3" "decimal"(19,7) null,
		"UserData4" "decimal"(19,7) null,
		"UserData5" "decimal"(19,7) null,
		"UserData6" "decimal"(19,7) null,
		"UserData7" "decimal"(19,7) null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "TaxLot" with nocheck add 
		constraint "TaxLotKey" primary key clustered
		(
			"TaxLotId"
		)  on "PRIMARY" ,
		constraint "TaxLotKeyAccountIdSecurityIdPositionTypeCode" unique
		(
			"AccountId",
			"SecurityId",
			"PositionTypeId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "TaxLotKeyExternalId0"
		on "TaxLot"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "TaxLotKeyExternalId1"
		on "TaxLot"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	create index "TaxLotKeyExternalId2"
		on "TaxLot"
		(
			"ExternalId2"
		)  on "PRIMARY" 

	create index "TaxLotKeyExternalId3"
		on "TaxLot"
		(
			"ExternalId3"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "TaxLot" add 
		constraint "FK_Account_TaxLot" foreign key 
		(
			"AccountId"
		) references "Account" (
			"AccountId"
		),

		constraint "FK_PositionType_TaxLot" foreign key 
		(
			"PositionTypeId"
		) references "PositionType" (
			"PositionTypeId"
		),

		constraint "FK_Security_TaxLot" foreign key 
		(
			"SecurityId"
		) references "Security" (
			"SecurityId"
		)

	/* Defaults */
	alter table "TaxLot" with nocheck add 
		constraint "DefaultTaxLotIsArchived" default (0) for "IsArchived",
		constraint "DefaultTaxLotIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'TaxLot')
		update "VersionControl" set "Revision" = 0 where "Name" = 'TaxLot'
	else
		insert "VersionControl" ("Name", "Revision") select 'TaxLot', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'TaxLot'
	print convert(varchar, getdate(), 120) + 'Z Table: "TaxLot", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'TaxLot'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "TaxLot", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The TraderVolumeSetting Table */
if not exists (select * from "VersionControl" where "Name" = 'TraderVolumeSetting')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "TraderVolumeSetting" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'TraderVolumeSetting'
	print convert(varchar, getdate(), 120) + 'Z Table: "TraderVolumeSetting", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'TraderVolumeSetting'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'TraderVolumeSetting'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Trader_TraderVolumeSetting')
		alter table "TraderVolumeSetting" drop constraint "FK_Trader_TraderVolumeSetting"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_VolumeCategory_TraderVolumeSetting')
		alter table "TraderVolumeSetting" drop constraint "FK_VolumeCategory_TraderVolumeSetting"
	if exists (select * from sysobjects where type = 'U' and name = 'TraderVolumeSetting')
		drop table "TraderVolumeSetting"

	/* Create the table. */
	create table "TraderVolumeSetting" (
		"AutoExecuteQuantity" "decimal"(19,7) not null,
		"ExternalId0" "nvarchar"(128) null,
		"RowVersion" "bigint" not null,
		"ThresholdQuantity" "decimal"(19,7) not null,
		"TraderId" "uniqueIdentifier" not null,
		"TraderVolumeSettingId" "uniqueIdentifier" not null,
		"VolumeCategoryId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "TraderVolumeSetting" with nocheck add 
		constraint "TraderVolumeSettingKey" primary key clustered
		(
			"TraderVolumeSettingId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "TraderVolumeSettingKeyExternalId0"
		on "TraderVolumeSetting"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "TraderVolumeSetting" add 
		constraint "FK_Trader_TraderVolumeSetting" foreign key 
		(
			"TraderId"
		) references "Trader" (
			"TraderId"
		),

		constraint "FK_VolumeCategory_TraderVolumeSetting" foreign key 
		(
			"VolumeCategoryId"
		) references "VolumeCategory" (
			"VolumeCategoryId"
		)

	/* Defaults */
	alter table "TraderVolumeSetting" with nocheck add 
		constraint "DefaultTraderVolumeSettingIsArchived" default (0) for "IsArchived",
		constraint "DefaultTraderVolumeSettingIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'TraderVolumeSetting')
		update "VersionControl" set "Revision" = 0 where "Name" = 'TraderVolumeSetting'
	else
		insert "VersionControl" ("Name", "Revision") select 'TraderVolumeSetting', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'TraderVolumeSetting'
	print convert(varchar, getdate(), 120) + 'Z Table: "TraderVolumeSetting", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'TraderVolumeSetting'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "TraderVolumeSetting", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Weekend Table */
if not exists (select * from "VersionControl" where "Name" = 'Weekend')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Weekend" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Weekend'
	print convert(varchar, getdate(), 120) + 'Z Table: "Weekend", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Weekend'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Weekend'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'Weekend')
		drop table "Weekend"

	/* Create the table. */
	create table "Weekend" (
		"ExternalId0" "nvarchar"(128) null,
		"ExternalId1" "nvarchar"(128) null,
		"RowVersion" "bigint" not null,
		"UserCode0" "int" null,
		"UserCode1" "int" null,
		"WeekendCode" "int" not null,
		"WeekendId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Weekend" with nocheck add 
		constraint "WeekendKey" primary key clustered
		(
			"WeekendId"
		)  on "PRIMARY" ,
		constraint "WeekendKeyWeekendCode" unique
		(
			"WeekendCode"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "WeekendKeyExternalId0"
		on "Weekend"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	create index "WeekendKeyExternalId1"
		on "Weekend"
		(
			"ExternalId1"
		)  on "PRIMARY" 

	/* Defaults */
	alter table "Weekend" with nocheck add 
		constraint "DefaultWeekendIsArchived" default (0) for "IsArchived",
		constraint "DefaultWeekendIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Weekend')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Weekend'
	else
		insert "VersionControl" ("Name", "Revision") select 'Weekend', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Weekend'
	print convert(varchar, getdate(), 120) + 'Z Table: "Weekend", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Weekend'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Weekend", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Debt Table */
if not exists (select * from "VersionControl" where "Name" = 'Debt')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Debt" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Debt'
	print convert(varchar, getdate(), 120) + 'Z Table: "Debt", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Debt'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Debt'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Issuer_Debt')
		alter table "Debt" drop constraint "FK_Issuer_Debt"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_Debt_DebtId')
		alter table "Debt" drop constraint "FK_Security_Debt_DebtId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_Debt_SettlementId')
		alter table "Debt" drop constraint "FK_Security_Debt_SettlementId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Weekend_Debt')
		alter table "Debt" drop constraint "FK_Weekend_Debt"
	if exists (select * from sysobjects where type = 'U' and name = 'Debt')
		drop table "Debt"

	/* Create the table. */
	create table "Debt" (
		"CapitalGainsTaxRate" "decimal"(19,7) not null,
		"Coupon" "decimal"(19,7) not null,
		"DataArchiveId" "int" not null,
		"DatedDate" "datetime" null,
		"DebtId" "uniqueIdentifier" not null,
		"ExdividendDays" "int" null,
		"FaceOutstanding" "decimal"(19,7) not null,
		"FirstCoupon" "datetime" null,
		"Frequency" "int" not null,
		"IncomeTaxRate" "decimal"(19,7) not null,
		"IssuePrice" "int" not null,
		"IssuerId" "uniqueIdentifier" null,
		"MaturityDate" "datetime" not null,
		"Rating0" "int" null,
		"Rating1" "int" null,
		"Rating2" "int" null,
		"Rating3" "int" null,
		"RedemptionValue" "decimal"(19,7) not null,
		"RowVersion" "bigint" not null,
		"SettlementId" "uniqueIdentifier" not null,
		"TrueYield" "bit" not null,
		"WeekendId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Debt" with nocheck add 
		constraint "DebtKey" primary key clustered
		(
			"DebtId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Debt" add 
		constraint "FK_Issuer_Debt" foreign key 
		(
			"IssuerId"
		) references "Issuer" (
			"IssuerId"
		),

		constraint "FK_Security_Debt_DebtId" foreign key 
		(
			"DebtId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Security_Debt_SettlementId" foreign key 
		(
			"SettlementId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Weekend_Debt" foreign key 
		(
			"WeekendId"
		) references "Weekend" (
			"WeekendId"
		)

	/* Defaults */
	alter table "Debt" with nocheck add 
		constraint "DefaultDebtIsArchived" default (0) for "IsArchived",
		constraint "DefaultDebtIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Debt')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Debt'
	else
		insert "VersionControl" ("Name", "Revision") select 'Debt', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Debt'
	print convert(varchar, getdate(), 120) + 'Z Table: "Debt", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Debt'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Debt", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The WorkingOrder Table */
if not exists (select * from "VersionControl" where "Name" = 'WorkingOrder')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "WorkingOrder" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'WorkingOrder'
	print convert(varchar, getdate(), 120) + 'Z Table: "WorkingOrder", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'WorkingOrder'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'WorkingOrder'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_WorkingOrder')
		alter table "WorkingOrder" drop constraint "FK_Blotter_WorkingOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Crossing_WorkingOrder')
		alter table "WorkingOrder" drop constraint "FK_Crossing_WorkingOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Destination_WorkingOrder')
		alter table "WorkingOrder" drop constraint "FK_Destination_WorkingOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_OrderType_WorkingOrder')
		alter table "WorkingOrder" drop constraint "FK_OrderType_WorkingOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_WorkingOrder_SecurityId')
		alter table "WorkingOrder" drop constraint "FK_Security_WorkingOrder_SecurityId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_WorkingOrder_SettlementId')
		alter table "WorkingOrder" drop constraint "FK_Security_WorkingOrder_SettlementId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Side_WorkingOrder')
		alter table "WorkingOrder" drop constraint "FK_Side_WorkingOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Status_WorkingOrder')
		alter table "WorkingOrder" drop constraint "FK_Status_WorkingOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_TimeInForce_WorkingOrder')
		alter table "WorkingOrder" drop constraint "FK_TimeInForce_WorkingOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_WorkingOrder_CreatedUserId')
		alter table "WorkingOrder" drop constraint "FK_User_WorkingOrder_CreatedUserId"
	if exists (select * from sysobjects where type = 'U' and name = 'WorkingOrder')
		drop table "WorkingOrder"

	/* Create the table. */
	create table "WorkingOrder" (
		"AutomaticQuantity" "decimal"(19,7) null,
		"BlotterId" "uniqueIdentifier" not null,
		"CreatedTime" "datetime" not null,
		"CreatedUserId" "uniqueIdentifier" not null,
		"CrossingId" "uniqueIdentifier" not null,
		"DestinationId" "uniqueIdentifier" null,
		"ExternalId0" "nvarchar"(128) null,
		"IsAutomatic" "bit" not null,
		"IsAwake" "bit" not null,
		"IsBrokerMatch" "bit" not null,
		"IsHedgeMatch" "bit" not null,
		"IsInstitutionMatch" "bit" not null,
		"LimitPrice" "decimal"(19,7) null,
		"ModifiedTime" "datetime" not null,
		"ModifiedUserId" "uniqueIdentifier" not null,
		"OrderTypeId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"SecurityId" "uniqueIdentifier" not null,
		"SettlementDate" "datetime" not null,
		"SettlementId" "uniqueIdentifier" null,
		"SideId" "uniqueIdentifier" not null,
		"StartTime" "datetime" null,
		"StatusId" "uniqueIdentifier" not null,
		"StopPrice" "decimal"(19,7) null,
		"StopTime" "datetime" null,
		"SubmittedQuantity" "decimal"(19,7) not null,
		"SubmittedTime" "datetime" null,
		"TimeInForceId" "uniqueIdentifier" not null,
		"TradeDate" "datetime" not null,
		"UploadedTime" "datetime" null,
		"WorkingOrderId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "WorkingOrder" with nocheck add 
		constraint "WorkingOrderKey" primary key clustered
		(
			"WorkingOrderId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "WorkingOrderKeyExternalId0"
		on "WorkingOrder"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "WorkingOrder" add 
		constraint "FK_Blotter_WorkingOrder" foreign key 
		(
			"BlotterId"
		) references "Blotter" (
			"BlotterId"
		),

		constraint "FK_Crossing_WorkingOrder" foreign key 
		(
			"CrossingId"
		) references "Crossing" (
			"CrossingId"
		),

		constraint "FK_Destination_WorkingOrder" foreign key 
		(
			"DestinationId"
		) references "Destination" (
			"DestinationId"
		),

		constraint "FK_OrderType_WorkingOrder" foreign key 
		(
			"OrderTypeId"
		) references "OrderType" (
			"OrderTypeId"
		),

		constraint "FK_Security_WorkingOrder_SecurityId" foreign key 
		(
			"SecurityId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Security_WorkingOrder_SettlementId" foreign key 
		(
			"SettlementId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Side_WorkingOrder" foreign key 
		(
			"SideId"
		) references "Side" (
			"SideId"
		),

		constraint "FK_Status_WorkingOrder" foreign key 
		(
			"StatusId"
		) references "Status" (
			"StatusId"
		),

		constraint "FK_TimeInForce_WorkingOrder" foreign key 
		(
			"TimeInForceId"
		) references "TimeInForce" (
			"TimeInForceId"
		),

		constraint "FK_User_WorkingOrder_CreatedUserId" foreign key 
		(
			"CreatedUserId"
		) references "User" (
			"UserId"
		)

	/* Defaults */
	alter table "WorkingOrder" with nocheck add 
		constraint "DefaultWorkingOrderIsArchived" default (0) for "IsArchived",
		constraint "DefaultWorkingOrderIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'WorkingOrder')
		update "VersionControl" set "Revision" = 0 where "Name" = 'WorkingOrder'
	else
		insert "VersionControl" ("Name", "Revision") select 'WorkingOrder', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'WorkingOrder'
	print convert(varchar, getdate(), 120) + 'Z Table: "WorkingOrder", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'WorkingOrder'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "WorkingOrder", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Allocation Table */
if not exists (select * from "VersionControl" where "Name" = 'Allocation')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Allocation" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Allocation'
	print convert(varchar, getdate(), 120) + 'Z Table: "Allocation", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Allocation'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Allocation'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Account_Allocation')
		alter table "Allocation" drop constraint "FK_Account_Allocation"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_Allocation_SecurityId')
		alter table "Allocation" drop constraint "FK_Security_Allocation_SecurityId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_Allocation_SettlementId')
		alter table "Allocation" drop constraint "FK_Security_Allocation_SettlementId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Side_Allocation')
		alter table "Allocation" drop constraint "FK_Side_Allocation"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_Allocation_CreatedUserId')
		alter table "Allocation" drop constraint "FK_User_Allocation_CreatedUserId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_Allocation_ModifiedUserId')
		alter table "Allocation" drop constraint "FK_User_Allocation_ModifiedUserId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_WorkingOrder_Allocation')
		alter table "Allocation" drop constraint "FK_WorkingOrder_Allocation"
	if exists (select * from sysobjects where type = 'U' and name = 'Allocation')
		drop table "Allocation"

	/* Create the table. */
	create table "Allocation" (
		"AccountId" "uniqueIdentifier" not null,
		"AccruedInterest" "decimal"(19,7) not null,
		"AllocationId" "uniqueIdentifier" not null,
		"Commission" "decimal"(19,7) not null,
		"CreatedTime" "datetime" not null,
		"CreatedUserId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"ModifiedTime" "datetime" not null,
		"ModifiedUserId" "uniqueIdentifier" not null,
		"PositionTypeId" "uniqueIdentifier" not null,
		"Price" "decimal"(19,7) not null,
		"Quantity" "decimal"(19,7) not null,
		"RowVersion" "bigint" not null,
		"SecurityId" "uniqueIdentifier" not null,
		"SettlementDate" "datetime" not null,
		"SettlementId" "uniqueIdentifier" not null,
		"SideId" "uniqueIdentifier" not null,
		"TradeDate" "datetime" not null,
		"UserFee0" "decimal"(19,7) not null,
		"UserFee1" "decimal"(19,7) not null,
		"UserFee2" "decimal"(19,7) not null,
		"UserFee3" "decimal"(19,7) not null,
		"WorkingOrderId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Allocation" with nocheck add 
		constraint "AllocationKey" primary key clustered
		(
			"AllocationId"
		)  on "PRIMARY" ,
		constraint "AllocationKeyAccountIdSecurityIdPositionTypeCode" unique
		(
			"AccountId",
			"SecurityId",
			"PositionTypeId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Allocation" add 
		constraint "FK_Account_Allocation" foreign key 
		(
			"AccountId"
		) references "Account" (
			"AccountId"
		),

		constraint "FK_Security_Allocation_SecurityId" foreign key 
		(
			"SecurityId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Security_Allocation_SettlementId" foreign key 
		(
			"SettlementId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Side_Allocation" foreign key 
		(
			"SideId"
		) references "Side" (
			"SideId"
		),

		constraint "FK_User_Allocation_CreatedUserId" foreign key 
		(
			"CreatedUserId"
		) references "User" (
			"UserId"
		),

		constraint "FK_User_Allocation_ModifiedUserId" foreign key 
		(
			"ModifiedUserId"
		) references "User" (
			"UserId"
		),

		constraint "FK_WorkingOrder_Allocation" foreign key 
		(
			"WorkingOrderId"
		) references "WorkingOrder" (
			"WorkingOrderId"
		)

	/* Defaults */
	alter table "Allocation" with nocheck add 
		constraint "DefaultAllocationIsArchived" default (0) for "IsArchived",
		constraint "DefaultAllocationIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Allocation')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Allocation'
	else
		insert "VersionControl" ("Name", "Revision") select 'Allocation', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Allocation'
	print convert(varchar, getdate(), 120) + 'Z Table: "Allocation", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Allocation'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Allocation", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The DestinationOrder Table */
if not exists (select * from "VersionControl" where "Name" = 'DestinationOrder')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "DestinationOrder" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'DestinationOrder'
	print convert(varchar, getdate(), 120) + 'Z Table: "DestinationOrder", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'DestinationOrder'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'DestinationOrder'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_DestinationOrder')
		alter table "DestinationOrder" drop constraint "FK_Blotter_DestinationOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Destination_DestinationOrder')
		alter table "DestinationOrder" drop constraint "FK_Destination_DestinationOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_FixMessage_DestinationOrder')
		alter table "DestinationOrder" drop constraint "FK_FixMessage_DestinationOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_OrderType_DestinationOrder')
		alter table "DestinationOrder" drop constraint "FK_OrderType_DestinationOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_DestinationOrder_SecurityId')
		alter table "DestinationOrder" drop constraint "FK_Security_DestinationOrder_SecurityId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_DestinationOrder_SettlementId')
		alter table "DestinationOrder" drop constraint "FK_Security_DestinationOrder_SettlementId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Side_DestinationOrder')
		alter table "DestinationOrder" drop constraint "FK_Side_DestinationOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_State_DestinationOrder')
		alter table "DestinationOrder" drop constraint "FK_State_DestinationOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Status_DestinationOrder')
		alter table "DestinationOrder" drop constraint "FK_Status_DestinationOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_TimeInForce_DestinationOrder')
		alter table "DestinationOrder" drop constraint "FK_TimeInForce_DestinationOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Trader_DestinationOrder')
		alter table "DestinationOrder" drop constraint "FK_Trader_DestinationOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_DestinationOrder_CreatedUserId')
		alter table "DestinationOrder" drop constraint "FK_User_DestinationOrder_CreatedUserId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_WorkingOrder_DestinationOrder')
		alter table "DestinationOrder" drop constraint "FK_WorkingOrder_DestinationOrder"
	if exists (select * from sysobjects where type = 'U' and name = 'DestinationOrder')
		drop table "DestinationOrder"

	/* Create the table. */
	create table "DestinationOrder" (
		"BlotterId" "uniqueIdentifier" not null,
		"CanceledQuantity" "decimal"(19,7) not null,
		"CanceledTime" "datetime" null,
		"CreatedTime" "datetime" not null,
		"CreatedUserId" "uniqueIdentifier" not null,
		"DestinationId" "uniqueIdentifier" not null,
		"DestinationOrderId" "uniqueIdentifier" not null,
		"ExternalId0" "nvarchar"(128) null,
		"FixMessageId" "uniqueIdentifier" null,
		"IsCanceledByUser" "bit" not null,
		"IsHidden" "bit" not null,
		"LimitPrice" "decimal"(19,7) null,
		"ModifiedTime" "datetime" not null,
		"ModifiedUserId" "uniqueIdentifier" not null,
		"OrderedQuantity" "decimal"(19,7) not null,
		"OrderTypeId" "uniqueIdentifier" null,
		"RowVersion" "bigint" not null,
		"SecurityId" "uniqueIdentifier" null,
		"SettlementDate" "datetime" not null,
		"SettlementId" "uniqueIdentifier" null,
		"SideId" "uniqueIdentifier" not null,
		"StateId" "uniqueIdentifier" not null,
		"StatusId" "uniqueIdentifier" not null,
		"StopPrice" "decimal"(19,7) null,
		"TimeInForceId" "uniqueIdentifier" not null,
		"TradeDate" "datetime" not null,
		"TraderId" "uniqueIdentifier" null,
		"WorkingOrderId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "DestinationOrder" with nocheck add 
		constraint "DestinationOrderKey" primary key clustered
		(
			"DestinationOrderId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "DestinationOrderKeyExternalId0"
		on "DestinationOrder"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "DestinationOrder" add 
		constraint "FK_Blotter_DestinationOrder" foreign key 
		(
			"BlotterId"
		) references "Blotter" (
			"BlotterId"
		),

		constraint "FK_Destination_DestinationOrder" foreign key 
		(
			"DestinationId"
		) references "Destination" (
			"DestinationId"
		),

		constraint "FK_FixMessage_DestinationOrder" foreign key 
		(
			"FixMessageId"
		) references "FixMessage" (
			"FixMessageId"
		),

		constraint "FK_OrderType_DestinationOrder" foreign key 
		(
			"OrderTypeId"
		) references "OrderType" (
			"OrderTypeId"
		),

		constraint "FK_Security_DestinationOrder_SecurityId" foreign key 
		(
			"SecurityId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Security_DestinationOrder_SettlementId" foreign key 
		(
			"SettlementId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Side_DestinationOrder" foreign key 
		(
			"SideId"
		) references "Side" (
			"SideId"
		),

		constraint "FK_State_DestinationOrder" foreign key 
		(
			"StateId"
		) references "State" (
			"StateId"
		),

		constraint "FK_Status_DestinationOrder" foreign key 
		(
			"StatusId"
		) references "Status" (
			"StatusId"
		),

		constraint "FK_TimeInForce_DestinationOrder" foreign key 
		(
			"TimeInForceId"
		) references "TimeInForce" (
			"TimeInForceId"
		),

		constraint "FK_Trader_DestinationOrder" foreign key 
		(
			"TraderId"
		) references "Trader" (
			"TraderId"
		),

		constraint "FK_User_DestinationOrder_CreatedUserId" foreign key 
		(
			"CreatedUserId"
		) references "User" (
			"UserId"
		),

		constraint "FK_WorkingOrder_DestinationOrder" foreign key 
		(
			"WorkingOrderId"
		) references "WorkingOrder" (
			"WorkingOrderId"
		)

	/* Defaults */
	alter table "DestinationOrder" with nocheck add 
		constraint "DefaultDestinationOrderIsArchived" default (0) for "IsArchived",
		constraint "DefaultDestinationOrderIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'DestinationOrder')
		update "VersionControl" set "Revision" = 0 where "Name" = 'DestinationOrder'
	else
		insert "VersionControl" ("Name", "Revision") select 'DestinationOrder', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'DestinationOrder'
	print convert(varchar, getdate(), 120) + 'Z Table: "DestinationOrder", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'DestinationOrder'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "DestinationOrder", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Execution Table */
if not exists (select * from "VersionControl" where "Name" = 'Execution')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Execution" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Execution'
	print convert(varchar, getdate(), 120) + 'Z Table: "Execution", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Execution'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Execution'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_Execution')
		alter table "Execution" drop constraint "FK_Blotter_Execution"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Broker_Execution')
		alter table "Execution" drop constraint "FK_Broker_Execution"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_BrokerAccount_Execution')
		alter table "Execution" drop constraint "FK_BrokerAccount_Execution"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_DestinationOrder_Execution')
		alter table "Execution" drop constraint "FK_DestinationOrder_Execution"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_FixMessage_Execution')
		alter table "Execution" drop constraint "FK_FixMessage_Execution"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_State_Execution_DestinationStateId')
		alter table "Execution" drop constraint "FK_State_Execution_DestinationStateId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_State_Execution_SourceStateId')
		alter table "Execution" drop constraint "FK_State_Execution_SourceStateId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_Execution_CreatedUserId')
		alter table "Execution" drop constraint "FK_User_Execution_CreatedUserId"
	if exists (select * from sysobjects where type = 'U' and name = 'Execution')
		drop table "Execution"

	/* Create the table. */
	create table "Execution" (
		"AccruedInterest" "decimal"(19,7) not null,
		"BlotterId" "uniqueIdentifier" not null,
		"BrokerAccountId" "uniqueIdentifier" null,
		"BrokerId" "uniqueIdentifier" null,
		"Commission" "decimal"(19,7) not null,
		"CreatedTime" "datetime" not null,
		"CreatedUserId" "uniqueIdentifier" not null,
		"DestinationOrderId" "uniqueIdentifier" not null,
		"DestinationStateId" "uniqueIdentifier" not null,
		"ExecutionId" "uniqueIdentifier" not null,
		"ExecutionPrice" "decimal"(19,7) not null,
		"ExecutionQuantity" "decimal"(19,7) not null,
		"ExternalId0" "nvarchar"(128) null,
		"FixMessageId" "uniqueIdentifier" null,
		"IsHidden" "bit" not null,
		"ModifiedTime" "datetime" null,
		"ModifiedUserId" "uniqueIdentifier" null,
		"OriginalDestinationOrderId" "uniqueIdentifier" null,
		"OriginalPrice" "decimal"(19,7) null,
		"OriginalQuantity" "decimal"(19,7) null,
		"RowVersion" "bigint" not null,
		"SourceExecutionId" "nvarchar"(max) null,
		"SourceStateId" "uniqueIdentifier" null,
		"UserFee0" "decimal"(19,7) not null,
		"UserFee1" "decimal"(19,7) not null,
		"UserFee2" "decimal"(19,7) not null,
		"UserFee3" "decimal"(19,7) not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Execution" with nocheck add 
		constraint "ExecutionKey" primary key clustered
		(
			"ExecutionId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "ExecutionKeyExternalId0"
		on "Execution"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "Execution" add 
		constraint "FK_Blotter_Execution" foreign key 
		(
			"BlotterId"
		) references "Blotter" (
			"BlotterId"
		),

		constraint "FK_Broker_Execution" foreign key 
		(
			"BrokerId"
		) references "Broker" (
			"BrokerId"
		),

		constraint "FK_BrokerAccount_Execution" foreign key 
		(
			"BrokerAccountId"
		) references "BrokerAccount" (
			"BrokerAccountId"
		),

		constraint "FK_DestinationOrder_Execution" foreign key 
		(
			"DestinationOrderId"
		) references "DestinationOrder" (
			"DestinationOrderId"
		),

		constraint "FK_FixMessage_Execution" foreign key 
		(
			"FixMessageId"
		) references "FixMessage" (
			"FixMessageId"
		),

		constraint "FK_State_Execution_DestinationStateId" foreign key 
		(
			"DestinationStateId"
		) references "State" (
			"StateId"
		),

		constraint "FK_State_Execution_SourceStateId" foreign key 
		(
			"SourceStateId"
		) references "State" (
			"StateId"
		),

		constraint "FK_User_Execution_CreatedUserId" foreign key 
		(
			"CreatedUserId"
		) references "User" (
			"UserId"
		)

	/* Defaults */
	alter table "Execution" with nocheck add 
		constraint "DefaultExecutionIsArchived" default (0) for "IsArchived",
		constraint "DefaultExecutionIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Execution')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Execution'
	else
		insert "VersionControl" ("Name", "Revision") select 'Execution', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Execution'
	print convert(varchar, getdate(), 120) + 'Z Table: "Execution", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Execution'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Execution", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Match Table */
if not exists (select * from "VersionControl" where "Name" = 'Match')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Match" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Match'
	print convert(varchar, getdate(), 120) + 'Z Table: "Match", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Match'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Match'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_Match')
		alter table "Match" drop constraint "FK_Blotter_Match"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Status_Match')
		alter table "Match" drop constraint "FK_Status_Match"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_WorkingOrder_Match')
		alter table "Match" drop constraint "FK_WorkingOrder_Match"
	if exists (select * from sysobjects where type = 'U' and name = 'Match')
		drop table "Match"

	/* Create the table. */
	create table "Match" (
		"BlotterId" "uniqueIdentifier" not null,
		"ContraMatchId" "uniqueIdentifier" not null,
		"ContraOrderId" "uniqueIdentifier" not null,
		"HeatIndex" "decimal"(19,7) not null,
		"HeatIndexDetails" "nvarchar"(max) null,
		"MatchedTime" "datetime" not null,
		"MatchId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"StatusId" "uniqueIdentifier" not null,
		"WorkingOrderId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Match" with nocheck add 
		constraint "MatchKey" primary key clustered
		(
			"MatchId"
		)  on "PRIMARY" ,
		constraint "MatchKeyWorkingOrderIdContraOrderId" unique
		(
			"WorkingOrderId",
			"ContraOrderId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Match" add 
		constraint "FK_Blotter_Match" foreign key 
		(
			"BlotterId"
		) references "Blotter" (
			"BlotterId"
		),

		constraint "FK_Status_Match" foreign key 
		(
			"StatusId"
		) references "Status" (
			"StatusId"
		),

		constraint "FK_WorkingOrder_Match" foreign key 
		(
			"WorkingOrderId"
		) references "WorkingOrder" (
			"WorkingOrderId"
		)

	/* Defaults */
	alter table "Match" with nocheck add 
		constraint "DefaultMatchIsArchived" default (0) for "IsArchived",
		constraint "DefaultMatchIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Match')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Match'
	else
		insert "VersionControl" ("Name", "Revision") select 'Match', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Match'
	print convert(varchar, getdate(), 120) + 'Z Table: "Match", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Match'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Match", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Chat Table */
if not exists (select * from "VersionControl" where "Name" = 'Chat')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Chat" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Chat'
	print convert(varchar, getdate(), 120) + 'Z Table: "Chat", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Chat'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Chat'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Match_Chat')
		alter table "Chat" drop constraint "FK_Match_Chat"
	if exists (select * from sysobjects where type = 'U' and name = 'Chat')
		drop table "Chat"

	/* Create the table. */
	create table "Chat" (
		"BlotterId" "uniqueIdentifier" not null,
		"ChatId" "uniqueIdentifier" not null,
		"CreatedTime" "datetime" not null,
		"IsReply" "bit" not null,
		"MatchId" "uniqueIdentifier" not null,
		"Message" "nvarchar"(max) not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Chat" with nocheck add 
		constraint "ChatKey" primary key clustered
		(
			"ChatId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Chat" add 
		constraint "FK_Match_Chat" foreign key 
		(
			"MatchId"
		) references "Match" (
			"MatchId"
		)

	/* Defaults */
	alter table "Chat" with nocheck add 
		constraint "DefaultChatIsArchived" default (0) for "IsArchived",
		constraint "DefaultChatIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Chat')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Chat'
	else
		insert "VersionControl" ("Name", "Revision") select 'Chat', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Chat'
	print convert(varchar, getdate(), 120) + 'Z Table: "Chat", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Chat'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Chat", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerDebtNegotiation Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerDebtNegotiation')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerDebtNegotiation" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtNegotiation'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtNegotiation", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerDebtNegotiation'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerDebtNegotiation'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Match_ConsumerDebtNegotiation')
		alter table "ConsumerDebtNegotiation" drop constraint "FK_Match_ConsumerDebtNegotiation"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_SettlementUnit_ConsumerDebtNegotiation_CounterSettlementUnitId')
		alter table "ConsumerDebtNegotiation" drop constraint "FK_SettlementUnit_ConsumerDebtNegotiation_CounterSettlementUnitId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_SettlementUnit_ConsumerDebtNegotiation_OfferSettlementUnitId')
		alter table "ConsumerDebtNegotiation" drop constraint "FK_SettlementUnit_ConsumerDebtNegotiation_OfferSettlementUnitId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Status_ConsumerDebtNegotiation')
		alter table "ConsumerDebtNegotiation" drop constraint "FK_Status_ConsumerDebtNegotiation"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_TimeUnit_ConsumerDebtNegotiation_CounterPaymentStartDateUnit')
		alter table "ConsumerDebtNegotiation" drop constraint "FK_TimeUnit_ConsumerDebtNegotiation_CounterPaymentStartDateUnit"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_TimeUnit_ConsumerDebtNegotiation_OfferPaymentStartDateUnit')
		alter table "ConsumerDebtNegotiation" drop constraint "FK_TimeUnit_ConsumerDebtNegotiation_OfferPaymentStartDateUnit"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_ConsumerDebtNegotiation_CreatedUserId')
		alter table "ConsumerDebtNegotiation" drop constraint "FK_User_ConsumerDebtNegotiation_CreatedUserId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_ConsumerDebtNegotiation_ModifiedUserId')
		alter table "ConsumerDebtNegotiation" drop constraint "FK_User_ConsumerDebtNegotiation_ModifiedUserId"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerDebtNegotiation')
		drop table "ConsumerDebtNegotiation"

	/* Create the table. */
	create table "ConsumerDebtNegotiation" (
		"AccountBalance" "decimal"(19,7) not null,
		"BlotterId" "uniqueIdentifier" not null,
		"ConsumerDebtNegotiationId" "uniqueIdentifier" not null,
		"CounterPaymentLength" "decimal"(19,7) not null,
		"CounterPaymentStartDateLength" "decimal"(19,7) not null,
		"CounterPaymentStartDateUnitId" "uniqueIdentifier" not null,
		"CounterSettlementUnitId" "uniqueIdentifier" not null,
		"CounterSettlementValue" "decimal"(19,7) not null,
		"CreatedTime" "datetime" not null,
		"CreatedUserId" "uniqueIdentifier" not null,
		"IsRead" "bit" not null,
		"IsReply" "bit" not null,
		"MatchId" "uniqueIdentifier" not null,
		"ModifiedTime" "datetime" not null,
		"ModifiedUserId" "uniqueIdentifier" not null,
		"OfferPaymentLength" "decimal"(19,7) not null,
		"OfferPaymentStartDateLength" "decimal"(19,7) not null,
		"OfferPaymentStartDateUnitId" "uniqueIdentifier" not null,
		"OfferSettlementUnitId" "uniqueIdentifier" not null,
		"OfferSettlementValue" "decimal"(19,7) not null,
		"RowVersion" "bigint" not null,
		"StatusId" "uniqueIdentifier" not null,
		"Version" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerDebtNegotiation" with nocheck add 
		constraint "ConsumerDebtNegotiationKey" primary key clustered
		(
			"ConsumerDebtNegotiationId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerDebtNegotiation" add 
		constraint "FK_Match_ConsumerDebtNegotiation" foreign key 
		(
			"MatchId"
		) references "Match" (
			"MatchId"
		),

		constraint "FK_SettlementUnit_ConsumerDebtNegotiation_CounterSettlementUnitId" foreign key 
		(
			"CounterSettlementUnitId"
		) references "SettlementUnit" (
			"SettlementUnitId"
		),

		constraint "FK_SettlementUnit_ConsumerDebtNegotiation_OfferSettlementUnitId" foreign key 
		(
			"OfferSettlementUnitId"
		) references "SettlementUnit" (
			"SettlementUnitId"
		),

		constraint "FK_Status_ConsumerDebtNegotiation" foreign key 
		(
			"StatusId"
		) references "Status" (
			"StatusId"
		),

		constraint "FK_TimeUnit_ConsumerDebtNegotiation_CounterPaymentStartDateUnit" foreign key 
		(
			"CounterPaymentStartDateUnitId"
		) references "TimeUnit" (
			"TimeUnitId"
		),

		constraint "FK_TimeUnit_ConsumerDebtNegotiation_OfferPaymentStartDateUnit" foreign key 
		(
			"OfferPaymentStartDateUnitId"
		) references "TimeUnit" (
			"TimeUnitId"
		),

		constraint "FK_User_ConsumerDebtNegotiation_CreatedUserId" foreign key 
		(
			"CreatedUserId"
		) references "User" (
			"UserId"
		),

		constraint "FK_User_ConsumerDebtNegotiation_ModifiedUserId" foreign key 
		(
			"ModifiedUserId"
		) references "User" (
			"UserId"
		)

	/* Defaults */
	alter table "ConsumerDebtNegotiation" with nocheck add 
		constraint "DefaultConsumerDebtNegotiationIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerDebtNegotiationIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerDebtNegotiation')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerDebtNegotiation'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerDebtNegotiation', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtNegotiation'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtNegotiation", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerDebtNegotiation'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtNegotiation", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerDebtNegotiationCounterPaymentMethod Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerDebtNegotiationCounterPaymentMethod')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerDebtNegotiationCounterPaymentMethod" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtNegotiationCounterPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtNegotiationCounterPaymentMethod", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerDebtNegotiationCounterPaymentMethod'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerDebtNegotiationCounterPaymentMethod'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ConsumerDebtNegotiation_ConsumerDebtNegotiationCounterPaymentMethod')
		alter table "ConsumerDebtNegotiationCounterPaymentMethod" drop constraint "FK_ConsumerDebtNegotiation_ConsumerDebtNegotiationCounterPaymentMethod"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_PaymentMethodType_ConsumerDebtNegotiationCounterPaymentMethod')
		alter table "ConsumerDebtNegotiationCounterPaymentMethod" drop constraint "FK_PaymentMethodType_ConsumerDebtNegotiationCounterPaymentMethod"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerDebtNegotiationCounterPaymentMethod')
		drop table "ConsumerDebtNegotiationCounterPaymentMethod"

	/* Create the table. */
	create table "ConsumerDebtNegotiationCounterPaymentMethod" (
		"BlotterId" "uniqueIdentifier" not null,
		"ConsumerDebtNegotiationCounterPaymentMethodId" "uniqueIdentifier" not null,
		"ConsumerDebtNegotiationId" "uniqueIdentifier" not null,
		"PaymentMethodTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerDebtNegotiationCounterPaymentMethod" with nocheck add 
		constraint "ConsumerDebtNegotiationCounterPaymentMethodKey" primary key clustered
		(
			"ConsumerDebtNegotiationCounterPaymentMethodId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerDebtNegotiationCounterPaymentMethod" add 
		constraint "FK_ConsumerDebtNegotiation_ConsumerDebtNegotiationCounterPaymentMethod" foreign key 
		(
			"ConsumerDebtNegotiationId"
		) references "ConsumerDebtNegotiation" (
			"ConsumerDebtNegotiationId"
		),

		constraint "FK_PaymentMethodType_ConsumerDebtNegotiationCounterPaymentMethod" foreign key 
		(
			"PaymentMethodTypeId"
		) references "PaymentMethodType" (
			"PaymentMethodTypeId"
		)

	/* Defaults */
	alter table "ConsumerDebtNegotiationCounterPaymentMethod" with nocheck add 
		constraint "DefaultConsumerDebtNegotiationCounterPaymentMethodIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerDebtNegotiationCounterPaymentMethodIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerDebtNegotiationCounterPaymentMethod')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerDebtNegotiationCounterPaymentMethod'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerDebtNegotiationCounterPaymentMethod', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtNegotiationCounterPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtNegotiationCounterPaymentMethod", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerDebtNegotiationCounterPaymentMethod'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtNegotiationCounterPaymentMethod", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerDebtNegotiationOfferPaymentMethod Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerDebtNegotiationOfferPaymentMethod')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerDebtNegotiationOfferPaymentMethod" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtNegotiationOfferPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtNegotiationOfferPaymentMethod", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerDebtNegotiationOfferPaymentMethod'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerDebtNegotiationOfferPaymentMethod'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ConsumerDebtNegotiation_ConsumerDebtNegotiationOfferPaymentMethod')
		alter table "ConsumerDebtNegotiationOfferPaymentMethod" drop constraint "FK_ConsumerDebtNegotiation_ConsumerDebtNegotiationOfferPaymentMethod"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_PaymentMethodType_ConsumerDebtNegotiationOfferPaymentMethod')
		alter table "ConsumerDebtNegotiationOfferPaymentMethod" drop constraint "FK_PaymentMethodType_ConsumerDebtNegotiationOfferPaymentMethod"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerDebtNegotiationOfferPaymentMethod')
		drop table "ConsumerDebtNegotiationOfferPaymentMethod"

	/* Create the table. */
	create table "ConsumerDebtNegotiationOfferPaymentMethod" (
		"BlotterId" "uniqueIdentifier" not null,
		"ConsumerDebtNegotiationId" "uniqueIdentifier" not null,
		"ConsumerDebtNegotiationOfferPaymentMethodId" "uniqueIdentifier" not null,
		"PaymentMethodTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerDebtNegotiationOfferPaymentMethod" with nocheck add 
		constraint "ConsumerDebtNegotiationOfferPaymentMethodKey" primary key clustered
		(
			"ConsumerDebtNegotiationOfferPaymentMethodId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerDebtNegotiationOfferPaymentMethod" add 
		constraint "FK_ConsumerDebtNegotiation_ConsumerDebtNegotiationOfferPaymentMethod" foreign key 
		(
			"ConsumerDebtNegotiationId"
		) references "ConsumerDebtNegotiation" (
			"ConsumerDebtNegotiationId"
		),

		constraint "FK_PaymentMethodType_ConsumerDebtNegotiationOfferPaymentMethod" foreign key 
		(
			"PaymentMethodTypeId"
		) references "PaymentMethodType" (
			"PaymentMethodTypeId"
		)

	/* Defaults */
	alter table "ConsumerDebtNegotiationOfferPaymentMethod" with nocheck add 
		constraint "DefaultConsumerDebtNegotiationOfferPaymentMethodIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerDebtNegotiationOfferPaymentMethodIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerDebtNegotiationOfferPaymentMethod')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerDebtNegotiationOfferPaymentMethod'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerDebtNegotiationOfferPaymentMethod', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtNegotiationOfferPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtNegotiationOfferPaymentMethod", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerDebtNegotiationOfferPaymentMethod'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtNegotiationOfferPaymentMethod", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerDebtSettlement Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerDebtSettlement')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerDebtSettlement" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtSettlement'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtSettlement", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerDebtSettlement'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerDebtSettlement'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ConsumerDebtNegotiation_ConsumerDebtSettlement')
		alter table "ConsumerDebtSettlement" drop constraint "FK_ConsumerDebtNegotiation_ConsumerDebtSettlement"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Province_ConsumerDebtSettlement_DebtorProvinceId')
		alter table "ConsumerDebtSettlement" drop constraint "FK_Province_ConsumerDebtSettlement_DebtorProvinceId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Province_ConsumerDebtSettlement_PayeeProvinceId')
		alter table "ConsumerDebtSettlement" drop constraint "FK_Province_ConsumerDebtSettlement_PayeeProvinceId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Status_ConsumerDebtSettlement')
		alter table "ConsumerDebtSettlement" drop constraint "FK_Status_ConsumerDebtSettlement"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_ConsumerDebtSettlement_CreatedUserId')
		alter table "ConsumerDebtSettlement" drop constraint "FK_User_ConsumerDebtSettlement_CreatedUserId"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerDebtSettlement')
		drop table "ConsumerDebtSettlement"

	/* Create the table. */
	create table "ConsumerDebtSettlement" (
		"AccountBalance" "decimal"(19,7) not null,
		"BlotterId" "uniqueIdentifier" not null,
		"ConsumerDebtNegotiationId" "uniqueIdentifier" not null,
		"ConsumerDebtSettlementId" "uniqueIdentifier" not null,
		"CreatedTime" "datetime" not null,
		"CreatedUserId" "uniqueIdentifier" not null,
		"DebtorAccountNumber" "nvarchar"(max) null,
		"DebtorAddress1" "nvarchar"(max) null,
		"DebtorAddress2" "nvarchar"(max) null,
		"DebtorBankAccountNumber" "nvarchar"(max) null,
		"DebtorBankRoutingNumber" "nvarchar"(max) null,
		"DebtorCity" "nvarchar"(max) null,
		"DebtorFirstName" "nvarchar"(max) null,
		"DebtorLastName" "nvarchar"(max) null,
		"DebtorMiddleName" "nvarchar"(max) null,
		"DebtorOriginalAccountNumber" "nvarchar"(max) null,
		"DebtorPostalCode" "nvarchar"(max) null,
		"DebtorProvinceId" "uniqueIdentifier" null,
		"DebtorSalutation" "nvarchar"(max) null,
		"DebtorSuffix" "nvarchar"(max) null,
		"ExternalId0" "nvarchar"(128) null,
		"ModifiedTime" "datetime" not null,
		"ModifiedUserId" "uniqueIdentifier" not null,
		"PayeeAddress1" "nvarchar"(max) null,
		"PayeeAddress2" "nvarchar"(max) null,
		"PayeeBankAccountNumber" "nvarchar"(max) null,
		"PayeeBankRoutingNumber" "nvarchar"(max) null,
		"PayeeCity" "nvarchar"(max) null,
		"PayeeCompanyName" "nvarchar"(max) null,
		"PayeeContactName" "nvarchar"(max) null,
		"PayeeDepartment" "nvarchar"(max) null,
		"PayeeEmail" "nvarchar"(max) null,
		"PayeeFax" "nvarchar"(max) null,
		"PayeeForBenefitOf" "nvarchar"(max) null,
		"PayeePhone" "nvarchar"(max) null,
		"PayeePostalCode" "nvarchar"(max) null,
		"PayeeProvinceId" "uniqueIdentifier" null,
		"PaymentLength" "decimal"(19,7) not null,
		"PaymentStartDate" "datetime" not null,
		"RowVersion" "bigint" not null,
		"SettlementAmount" "decimal"(19,7) not null,
		"SettlementLetter" "nvarchar"(max) null,
		"StatusId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerDebtSettlement" with nocheck add 
		constraint "ConsumerDebtSettlementKey" primary key clustered
		(
			"ConsumerDebtSettlementId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerDebtSettlement" add 
		constraint "FK_ConsumerDebtNegotiation_ConsumerDebtSettlement" foreign key 
		(
			"ConsumerDebtNegotiationId"
		) references "ConsumerDebtNegotiation" (
			"ConsumerDebtNegotiationId"
		),

		constraint "FK_Province_ConsumerDebtSettlement_DebtorProvinceId" foreign key 
		(
			"DebtorProvinceId"
		) references "Province" (
			"ProvinceId"
		),

		constraint "FK_Province_ConsumerDebtSettlement_PayeeProvinceId" foreign key 
		(
			"PayeeProvinceId"
		) references "Province" (
			"ProvinceId"
		),

		constraint "FK_Status_ConsumerDebtSettlement" foreign key 
		(
			"StatusId"
		) references "Status" (
			"StatusId"
		),

		constraint "FK_User_ConsumerDebtSettlement_CreatedUserId" foreign key 
		(
			"CreatedUserId"
		) references "User" (
			"UserId"
		)

	/* Defaults */
	alter table "ConsumerDebtSettlement" with nocheck add 
		constraint "DefaultConsumerDebtSettlementIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerDebtSettlementIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerDebtSettlement')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerDebtSettlement'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerDebtSettlement', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtSettlement'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtSettlement", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerDebtSettlement'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtSettlement", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerDebtPayment Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerDebtPayment')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerDebtPayment" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtPayment'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtPayment", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerDebtPayment'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerDebtPayment'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ConsumerDebtSettlement_ConsumerDebtPayment')
		alter table "ConsumerDebtPayment" drop constraint "FK_ConsumerDebtSettlement_ConsumerDebtPayment"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_DebtHolder_ConsumerDebtPayment')
		alter table "ConsumerDebtPayment" drop constraint "FK_DebtHolder_ConsumerDebtPayment"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Status_ConsumerDebtPayment')
		alter table "ConsumerDebtPayment" drop constraint "FK_Status_ConsumerDebtPayment"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerDebtPayment')
		drop table "ConsumerDebtPayment"

	/* Create the table. */
	create table "ConsumerDebtPayment" (
		"ActualPaymentDate" "datetime" null,
		"ActualPaymentValue" "decimal"(19,7) null,
		"BlotterId" "uniqueIdentifier" not null,
		"CheckId" "nvarchar"(max) null,
		"ClearedDate" "datetime" not null,
		"ConsumerDebtPaymentId" "uniqueIdentifier" not null,
		"ConsumerDebtSettlementId" "uniqueIdentifier" not null,
		"CreatedTime" "datetime" not null,
		"CreatedUserId" "uniqueIdentifier" not null,
		"DebtHolderId" "uniqueIdentifier" not null,
		"EffectivePaymentDate" "datetime" not null,
		"EffectivePaymentValue" "decimal"(19,7) not null,
		"Fee0" "decimal"(19,7) null,
		"Fee1" "decimal"(19,7) null,
		"Fee2" "decimal"(19,7) null,
		"Fee3" "decimal"(19,7) null,
		"IsActive" "bit" not null,
		"IsCleared" "bit" not null,
		"Memo0" "nvarchar"(max) null,
		"Memo1" "nvarchar"(max) null,
		"Memo2" "nvarchar"(max) null,
		"Memo3" "nvarchar"(max) null,
		"ModifiedTime" "datetime" not null,
		"ModifiedUserId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"StatusId" "uniqueIdentifier" not null,
		"TrackingNumber" "nvarchar"(max) null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerDebtPayment" with nocheck add 
		constraint "ConsumerDebtPaymentKey" primary key clustered
		(
			"ConsumerDebtPaymentId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerDebtPayment" add 
		constraint "FK_ConsumerDebtSettlement_ConsumerDebtPayment" foreign key 
		(
			"ConsumerDebtSettlementId"
		) references "ConsumerDebtSettlement" (
			"ConsumerDebtSettlementId"
		),

		constraint "FK_DebtHolder_ConsumerDebtPayment" foreign key 
		(
			"DebtHolderId"
		) references "DebtHolder" (
			"DebtHolderId"
		),

		constraint "FK_Status_ConsumerDebtPayment" foreign key 
		(
			"StatusId"
		) references "Status" (
			"StatusId"
		)

	/* Defaults */
	alter table "ConsumerDebtPayment" with nocheck add 
		constraint "DefaultConsumerDebtPaymentIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerDebtPaymentIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerDebtPayment')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerDebtPayment'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerDebtPayment', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtPayment'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtPayment", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerDebtPayment'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtPayment", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerDebtSettlementPaymentMethod Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerDebtSettlementPaymentMethod')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerDebtSettlementPaymentMethod" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtSettlementPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtSettlementPaymentMethod", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerDebtSettlementPaymentMethod'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerDebtSettlementPaymentMethod'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ConsumerDebtSettlement_ConsumerDebtSettlementPaymentMethod')
		alter table "ConsumerDebtSettlementPaymentMethod" drop constraint "FK_ConsumerDebtSettlement_ConsumerDebtSettlementPaymentMethod"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerDebtSettlementPaymentMethod')
		drop table "ConsumerDebtSettlementPaymentMethod"

	/* Create the table. */
	create table "ConsumerDebtSettlementPaymentMethod" (
		"BlotterId" "uniqueIdentifier" not null,
		"ConsumerDebtSettlementId" "uniqueIdentifier" not null,
		"ConsumerDebtSettlementPaymentMethodId" "uniqueIdentifier" not null,
		"PaymentMethodTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerDebtSettlementPaymentMethod" with nocheck add 
		constraint "ConsumerDebtSettlementPaymentMethodKey" primary key clustered
		(
			"ConsumerDebtSettlementPaymentMethodId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerDebtSettlementPaymentMethod" add 
		constraint "FK_ConsumerDebtSettlement_ConsumerDebtSettlementPaymentMethod" foreign key 
		(
			"ConsumerDebtSettlementId"
		) references "ConsumerDebtSettlement" (
			"ConsumerDebtSettlementId"
		)

	/* Defaults */
	alter table "ConsumerDebtSettlementPaymentMethod" with nocheck add 
		constraint "DefaultConsumerDebtSettlementPaymentMethodIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerDebtSettlementPaymentMethodIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerDebtSettlementPaymentMethod')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerDebtSettlementPaymentMethod'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerDebtSettlementPaymentMethod', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerDebtSettlementPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtSettlementPaymentMethod", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerDebtSettlementPaymentMethod'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerDebtSettlementPaymentMethod", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerTrustNegotiation Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerTrustNegotiation')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerTrustNegotiation" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustNegotiation'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustNegotiation", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerTrustNegotiation'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerTrustNegotiation'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_CreditCard_ConsumerTrustNegotiation')
		alter table "ConsumerTrustNegotiation" drop constraint "FK_CreditCard_ConsumerTrustNegotiation"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Match_ConsumerTrustNegotiation')
		alter table "ConsumerTrustNegotiation" drop constraint "FK_Match_ConsumerTrustNegotiation"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_SettlementUnit_ConsumerTrustNegotiation_CounterSettlementUnitId')
		alter table "ConsumerTrustNegotiation" drop constraint "FK_SettlementUnit_ConsumerTrustNegotiation_CounterSettlementUnitId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_SettlementUnit_ConsumerTrustNegotiation_OfferSettlementUnitId')
		alter table "ConsumerTrustNegotiation" drop constraint "FK_SettlementUnit_ConsumerTrustNegotiation_OfferSettlementUnitId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Status_ConsumerTrustNegotiation')
		alter table "ConsumerTrustNegotiation" drop constraint "FK_Status_ConsumerTrustNegotiation"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_TimeUnit_ConsumerTrustNegotiation_CounterPaymentStartDateUnit')
		alter table "ConsumerTrustNegotiation" drop constraint "FK_TimeUnit_ConsumerTrustNegotiation_CounterPaymentStartDateUnit"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_TimeUnit_ConsumerTrustNegotiation_OfferPaymentStartDateUnit')
		alter table "ConsumerTrustNegotiation" drop constraint "FK_TimeUnit_ConsumerTrustNegotiation_OfferPaymentStartDateUnit"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_ConsumerTrustNegotiation_CreatedUserId')
		alter table "ConsumerTrustNegotiation" drop constraint "FK_User_ConsumerTrustNegotiation_CreatedUserId"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerTrustNegotiation')
		drop table "ConsumerTrustNegotiation"

	/* Create the table. */
	create table "ConsumerTrustNegotiation" (
		"AccountBalance" "decimal"(19,7) not null,
		"BlotterId" "uniqueIdentifier" not null,
		"ConsumerTrustNegotiationId" "uniqueIdentifier" not null,
		"CounterPaymentLength" "decimal"(19,7) not null,
		"CounterPaymentStartDateLength" "decimal"(19,7) not null,
		"CounterPaymentStartDateUnitId" "uniqueIdentifier" not null,
		"CounterSettlementUnitId" "uniqueIdentifier" not null,
		"CounterSettlementValue" "decimal"(19,7) not null,
		"CreatedTime" "datetime" not null,
		"CreatedUserId" "uniqueIdentifier" not null,
		"CreditCardId" "uniqueIdentifier" not null,
		"IsRead" "bit" not null,
		"IsReply" "bit" not null,
		"MatchId" "uniqueIdentifier" not null,
		"ModifiedTime" "datetime" not null,
		"ModifiedUserId" "uniqueIdentifier" not null,
		"OfferPaymentLength" "decimal"(19,7) not null,
		"OfferPaymentStartDateLength" "decimal"(19,7) not null,
		"OfferPaymentStartDateUnitId" "uniqueIdentifier" not null,
		"OfferSettlementUnitId" "uniqueIdentifier" not null,
		"OfferSettlementValue" "decimal"(19,7) not null,
		"RowVersion" "bigint" not null,
		"StatusId" "uniqueIdentifier" not null,
		"Version" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerTrustNegotiation" with nocheck add 
		constraint "ConsumerTrustNegotiationKey" primary key clustered
		(
			"ConsumerTrustNegotiationId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerTrustNegotiation" add 
		constraint "FK_CreditCard_ConsumerTrustNegotiation" foreign key 
		(
			"CreditCardId"
		) references "CreditCard" (
			"CreditCardId"
		),

		constraint "FK_Match_ConsumerTrustNegotiation" foreign key 
		(
			"MatchId"
		) references "Match" (
			"MatchId"
		),

		constraint "FK_SettlementUnit_ConsumerTrustNegotiation_CounterSettlementUnitId" foreign key 
		(
			"CounterSettlementUnitId"
		) references "SettlementUnit" (
			"SettlementUnitId"
		),

		constraint "FK_SettlementUnit_ConsumerTrustNegotiation_OfferSettlementUnitId" foreign key 
		(
			"OfferSettlementUnitId"
		) references "SettlementUnit" (
			"SettlementUnitId"
		),

		constraint "FK_Status_ConsumerTrustNegotiation" foreign key 
		(
			"StatusId"
		) references "Status" (
			"StatusId"
		),

		constraint "FK_TimeUnit_ConsumerTrustNegotiation_CounterPaymentStartDateUnit" foreign key 
		(
			"CounterPaymentStartDateUnitId"
		) references "TimeUnit" (
			"TimeUnitId"
		),

		constraint "FK_TimeUnit_ConsumerTrustNegotiation_OfferPaymentStartDateUnit" foreign key 
		(
			"OfferPaymentStartDateUnitId"
		) references "TimeUnit" (
			"TimeUnitId"
		),

		constraint "FK_User_ConsumerTrustNegotiation_CreatedUserId" foreign key 
		(
			"CreatedUserId"
		) references "User" (
			"UserId"
		)

	/* Defaults */
	alter table "ConsumerTrustNegotiation" with nocheck add 
		constraint "DefaultConsumerTrustNegotiationIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerTrustNegotiationIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerTrustNegotiation')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerTrustNegotiation'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerTrustNegotiation', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustNegotiation'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustNegotiation", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerTrustNegotiation'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustNegotiation", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerTrustNegotiationCounterPaymentMethod Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerTrustNegotiationCounterPaymentMethod')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerTrustNegotiationCounterPaymentMethod" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustNegotiationCounterPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustNegotiationCounterPaymentMethod", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerTrustNegotiationCounterPaymentMethod'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerTrustNegotiationCounterPaymentMethod'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ConsumerTrustNegotiation_ConsumerTrustNegotiationCounterPaymentMethod')
		alter table "ConsumerTrustNegotiationCounterPaymentMethod" drop constraint "FK_ConsumerTrustNegotiation_ConsumerTrustNegotiationCounterPaymentMethod"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_PaymentMethodType_ConsumerTrustNegotiationCounterPaymentMethod')
		alter table "ConsumerTrustNegotiationCounterPaymentMethod" drop constraint "FK_PaymentMethodType_ConsumerTrustNegotiationCounterPaymentMethod"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerTrustNegotiationCounterPaymentMethod')
		drop table "ConsumerTrustNegotiationCounterPaymentMethod"

	/* Create the table. */
	create table "ConsumerTrustNegotiationCounterPaymentMethod" (
		"BlotterId" "uniqueIdentifier" not null,
		"ConsumerTrustNegotiationCounterPaymentMethodId" "uniqueIdentifier" not null,
		"ConsumerTrustNegotiationId" "uniqueIdentifier" not null,
		"PaymentMethodTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerTrustNegotiationCounterPaymentMethod" with nocheck add 
		constraint "ConsumerTrustNegotiationCounterPaymentMethodKey" primary key clustered
		(
			"ConsumerTrustNegotiationCounterPaymentMethodId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerTrustNegotiationCounterPaymentMethod" add 
		constraint "FK_ConsumerTrustNegotiation_ConsumerTrustNegotiationCounterPaymentMethod" foreign key 
		(
			"ConsumerTrustNegotiationId"
		) references "ConsumerTrustNegotiation" (
			"ConsumerTrustNegotiationId"
		),

		constraint "FK_PaymentMethodType_ConsumerTrustNegotiationCounterPaymentMethod" foreign key 
		(
			"PaymentMethodTypeId"
		) references "PaymentMethodType" (
			"PaymentMethodTypeId"
		)

	/* Defaults */
	alter table "ConsumerTrustNegotiationCounterPaymentMethod" with nocheck add 
		constraint "DefaultConsumerTrustNegotiationCounterPaymentMethodIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerTrustNegotiationCounterPaymentMethodIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerTrustNegotiationCounterPaymentMethod')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerTrustNegotiationCounterPaymentMethod'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerTrustNegotiationCounterPaymentMethod', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustNegotiationCounterPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustNegotiationCounterPaymentMethod", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerTrustNegotiationCounterPaymentMethod'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustNegotiationCounterPaymentMethod", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerTrustNegotiationOfferPaymentMethod Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerTrustNegotiationOfferPaymentMethod')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerTrustNegotiationOfferPaymentMethod" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustNegotiationOfferPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustNegotiationOfferPaymentMethod", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerTrustNegotiationOfferPaymentMethod'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerTrustNegotiationOfferPaymentMethod'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ConsumerTrustNegotiation_ConsumerTrustNegotiationOfferPaymentMethod')
		alter table "ConsumerTrustNegotiationOfferPaymentMethod" drop constraint "FK_ConsumerTrustNegotiation_ConsumerTrustNegotiationOfferPaymentMethod"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_PaymentMethodType_ConsumerTrustNegotiationOfferPaymentMethod')
		alter table "ConsumerTrustNegotiationOfferPaymentMethod" drop constraint "FK_PaymentMethodType_ConsumerTrustNegotiationOfferPaymentMethod"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerTrustNegotiationOfferPaymentMethod')
		drop table "ConsumerTrustNegotiationOfferPaymentMethod"

	/* Create the table. */
	create table "ConsumerTrustNegotiationOfferPaymentMethod" (
		"BlotterId" "uniqueIdentifier" not null,
		"ConsumerTrustNegotiationId" "uniqueIdentifier" not null,
		"ConsumerTrustNegotiationOfferPaymentMethodId" "uniqueIdentifier" not null,
		"PaymentMethodTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerTrustNegotiationOfferPaymentMethod" with nocheck add 
		constraint "ConsumerTrustNegotiationOfferPaymentMethodKey" primary key clustered
		(
			"ConsumerTrustNegotiationOfferPaymentMethodId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerTrustNegotiationOfferPaymentMethod" add 
		constraint "FK_ConsumerTrustNegotiation_ConsumerTrustNegotiationOfferPaymentMethod" foreign key 
		(
			"ConsumerTrustNegotiationId"
		) references "ConsumerTrustNegotiation" (
			"ConsumerTrustNegotiationId"
		),

		constraint "FK_PaymentMethodType_ConsumerTrustNegotiationOfferPaymentMethod" foreign key 
		(
			"PaymentMethodTypeId"
		) references "PaymentMethodType" (
			"PaymentMethodTypeId"
		)

	/* Defaults */
	alter table "ConsumerTrustNegotiationOfferPaymentMethod" with nocheck add 
		constraint "DefaultConsumerTrustNegotiationOfferPaymentMethodIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerTrustNegotiationOfferPaymentMethodIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerTrustNegotiationOfferPaymentMethod')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerTrustNegotiationOfferPaymentMethod'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerTrustNegotiationOfferPaymentMethod', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustNegotiationOfferPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustNegotiationOfferPaymentMethod", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerTrustNegotiationOfferPaymentMethod'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustNegotiationOfferPaymentMethod", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerTrustSettlement Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerTrustSettlement')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerTrustSettlement" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustSettlement'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustSettlement", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerTrustSettlement'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerTrustSettlement'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ConsumerTrustNegotiation_ConsumerTrustSettlement')
		alter table "ConsumerTrustSettlement" drop constraint "FK_ConsumerTrustNegotiation_ConsumerTrustSettlement"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Province_ConsumerTrustSettlement_DebtorProvinceId')
		alter table "ConsumerTrustSettlement" drop constraint "FK_Province_ConsumerTrustSettlement_DebtorProvinceId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Province_ConsumerTrustSettlement_PayeeProvinceId')
		alter table "ConsumerTrustSettlement" drop constraint "FK_Province_ConsumerTrustSettlement_PayeeProvinceId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Status_ConsumerTrustSettlement')
		alter table "ConsumerTrustSettlement" drop constraint "FK_Status_ConsumerTrustSettlement"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_ConsumerTrustSettlement_CreatedUserId')
		alter table "ConsumerTrustSettlement" drop constraint "FK_User_ConsumerTrustSettlement_CreatedUserId"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerTrustSettlement')
		drop table "ConsumerTrustSettlement"

	/* Create the table. */
	create table "ConsumerTrustSettlement" (
		"AccountBalance" "decimal"(19,7) not null,
		"BlotterId" "uniqueIdentifier" not null,
		"ConsumerTrustNegotiationId" "uniqueIdentifier" not null,
		"ConsumerTrustSettlementId" "uniqueIdentifier" not null,
		"CreatedTime" "datetime" not null,
		"CreatedUserId" "uniqueIdentifier" not null,
		"DebtorAccountNumber" "nvarchar"(max) null,
		"DebtorAddress1" "nvarchar"(max) null,
		"DebtorAddress2" "nvarchar"(max) null,
		"DebtorBankAccountNumber" "nvarchar"(max) null,
		"DebtorBankRoutingNumber" "nvarchar"(max) null,
		"DebtorCity" "nvarchar"(max) null,
		"DebtorFirstName" "nvarchar"(max) null,
		"DebtorLastName" "nvarchar"(max) null,
		"DebtorMiddleName" "nvarchar"(max) null,
		"DebtorOriginalAccountNumber" "nvarchar"(max) null,
		"DebtorPostalCode" "nvarchar"(max) null,
		"DebtorProvinceId" "uniqueIdentifier" null,
		"DebtorSalutation" "nvarchar"(max) null,
		"DebtorSuffix" "nvarchar"(max) null,
		"ExternalId0" "nvarchar"(128) null,
		"ModifiedTime" "datetime" not null,
		"ModifiedUserId" "uniqueIdentifier" not null,
		"PayeeAddress1" "nvarchar"(max) null,
		"PayeeAddress2" "nvarchar"(max) null,
		"PayeeBankAccountNumber" "nvarchar"(max) null,
		"PayeeBankRoutingNumber" "nvarchar"(max) null,
		"PayeeCity" "nvarchar"(max) null,
		"PayeeCompanyName" "nvarchar"(max) null,
		"PayeeContactName" "nvarchar"(max) null,
		"PayeeDepartment" "nvarchar"(max) null,
		"PayeeEmail" "nvarchar"(max) null,
		"PayeeFax" "nvarchar"(max) null,
		"PayeeForBenefitOf" "nvarchar"(max) null,
		"PayeePhone" "nvarchar"(max) null,
		"PayeePostalCode" "nvarchar"(max) null,
		"PayeeProvinceId" "uniqueIdentifier" null,
		"PaymentLength" "decimal"(19,7) not null,
		"PaymentStartDate" "datetime" not null,
		"RowVersion" "bigint" not null,
		"SettlementAmount" "decimal"(19,7) not null,
		"SettlementLetter" "nvarchar"(max) null,
		"StatusId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerTrustSettlement" with nocheck add 
		constraint "ConsumerTrustSettlementKey" primary key clustered
		(
			"ConsumerTrustSettlementId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerTrustSettlement" add 
		constraint "FK_ConsumerTrustNegotiation_ConsumerTrustSettlement" foreign key 
		(
			"ConsumerTrustNegotiationId"
		) references "ConsumerTrustNegotiation" (
			"ConsumerTrustNegotiationId"
		),

		constraint "FK_Province_ConsumerTrustSettlement_DebtorProvinceId" foreign key 
		(
			"DebtorProvinceId"
		) references "Province" (
			"ProvinceId"
		),

		constraint "FK_Province_ConsumerTrustSettlement_PayeeProvinceId" foreign key 
		(
			"PayeeProvinceId"
		) references "Province" (
			"ProvinceId"
		),

		constraint "FK_Status_ConsumerTrustSettlement" foreign key 
		(
			"StatusId"
		) references "Status" (
			"StatusId"
		),

		constraint "FK_User_ConsumerTrustSettlement_CreatedUserId" foreign key 
		(
			"CreatedUserId"
		) references "User" (
			"UserId"
		)

	/* Defaults */
	alter table "ConsumerTrustSettlement" with nocheck add 
		constraint "DefaultConsumerTrustSettlementIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerTrustSettlementIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerTrustSettlement')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerTrustSettlement'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerTrustSettlement', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustSettlement'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustSettlement", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerTrustSettlement'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustSettlement", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerTrustPayment Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerTrustPayment')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerTrustPayment" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustPayment'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustPayment", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerTrustPayment'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerTrustPayment'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ConsumerTrustSettlement_ConsumerTrustPayment')
		alter table "ConsumerTrustPayment" drop constraint "FK_ConsumerTrustSettlement_ConsumerTrustPayment"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Status_ConsumerTrustPayment')
		alter table "ConsumerTrustPayment" drop constraint "FK_Status_ConsumerTrustPayment"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerTrustPayment')
		drop table "ConsumerTrustPayment"

	/* Create the table. */
	create table "ConsumerTrustPayment" (
		"ActualPaymentDate" "datetime" null,
		"ActualPaymentValue" "decimal"(19,7) null,
		"BlotterId" "uniqueIdentifier" not null,
		"CheckId" "nvarchar"(max) null,
		"ClearedDate" "datetime" not null,
		"ConsumerTrustPaymentId" "uniqueIdentifier" not null,
		"ConsumerTrustSettlementId" "uniqueIdentifier" not null,
		"CreatedTime" "datetime" not null,
		"CreatedUserId" "uniqueIdentifier" not null,
		"EffectivePaymentDate" "datetime" not null,
		"EffectivePaymentValue" "decimal"(19,7) not null,
		"Fee0" "decimal"(19,7) null,
		"Fee1" "decimal"(19,7) null,
		"Fee2" "decimal"(19,7) null,
		"Fee3" "decimal"(19,7) null,
		"IsActive" "bit" not null,
		"IsCleared" "bit" not null,
		"Memo0" "nvarchar"(max) null,
		"Memo1" "nvarchar"(max) null,
		"Memo2" "nvarchar"(max) null,
		"Memo3" "nvarchar"(max) null,
		"ModifiedTime" "datetime" not null,
		"ModifiedUserId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"StatusId" "uniqueIdentifier" not null,
		"TrackingNumber" "nvarchar"(max) null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerTrustPayment" with nocheck add 
		constraint "ConsumerTrustPaymentKey" primary key clustered
		(
			"ConsumerTrustPaymentId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerTrustPayment" add 
		constraint "FK_ConsumerTrustSettlement_ConsumerTrustPayment" foreign key 
		(
			"ConsumerTrustSettlementId"
		) references "ConsumerTrustSettlement" (
			"ConsumerTrustSettlementId"
		),

		constraint "FK_Status_ConsumerTrustPayment" foreign key 
		(
			"StatusId"
		) references "Status" (
			"StatusId"
		)

	/* Defaults */
	alter table "ConsumerTrustPayment" with nocheck add 
		constraint "DefaultConsumerTrustPaymentIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerTrustPaymentIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerTrustPayment')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerTrustPayment'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerTrustPayment', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustPayment'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustPayment", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerTrustPayment'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustPayment", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The ConsumerTrustSettlementPaymentMethod Table */
if not exists (select * from "VersionControl" where "Name" = 'ConsumerTrustSettlementPaymentMethod')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "ConsumerTrustSettlementPaymentMethod" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustSettlementPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustSettlementPaymentMethod", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'ConsumerTrustSettlementPaymentMethod'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'ConsumerTrustSettlementPaymentMethod'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_ConsumerTrustSettlement_ConsumerTrustSettlementPaymentMethod')
		alter table "ConsumerTrustSettlementPaymentMethod" drop constraint "FK_ConsumerTrustSettlement_ConsumerTrustSettlementPaymentMethod"
	if exists (select * from sysobjects where type = 'U' and name = 'ConsumerTrustSettlementPaymentMethod')
		drop table "ConsumerTrustSettlementPaymentMethod"

	/* Create the table. */
	create table "ConsumerTrustSettlementPaymentMethod" (
		"BlotterId" "uniqueIdentifier" not null,
		"ConsumerTrustSettlementId" "uniqueIdentifier" not null,
		"ConsumerTrustSettlementPaymentMethodId" "uniqueIdentifier" not null,
		"PaymentMethodTypeId" "uniqueIdentifier" not null,
		"RowVersion" "bigint" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "ConsumerTrustSettlementPaymentMethod" with nocheck add 
		constraint "ConsumerTrustSettlementPaymentMethodKey" primary key clustered
		(
			"ConsumerTrustSettlementPaymentMethodId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "ConsumerTrustSettlementPaymentMethod" add 
		constraint "FK_ConsumerTrustSettlement_ConsumerTrustSettlementPaymentMethod" foreign key 
		(
			"ConsumerTrustSettlementId"
		) references "ConsumerTrustSettlement" (
			"ConsumerTrustSettlementId"
		)

	/* Defaults */
	alter table "ConsumerTrustSettlementPaymentMethod" with nocheck add 
		constraint "DefaultConsumerTrustSettlementPaymentMethodIsArchived" default (0) for "IsArchived",
		constraint "DefaultConsumerTrustSettlementPaymentMethodIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'ConsumerTrustSettlementPaymentMethod')
		update "VersionControl" set "Revision" = 0 where "Name" = 'ConsumerTrustSettlementPaymentMethod'
	else
		insert "VersionControl" ("Name", "Revision") select 'ConsumerTrustSettlementPaymentMethod', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'ConsumerTrustSettlementPaymentMethod'
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustSettlementPaymentMethod", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'ConsumerTrustSettlementPaymentMethod'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "ConsumerTrustSettlementPaymentMethod", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The Negotiation Table */
if not exists (select * from "VersionControl" where "Name" = 'Negotiation')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "Negotiation" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'Negotiation'
	print convert(varchar, getdate(), 120) + 'Z Table: "Negotiation", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'Negotiation'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'Negotiation'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_Negotiation')
		alter table "Negotiation" drop constraint "FK_Blotter_Negotiation"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Execution_Negotiation')
		alter table "Negotiation" drop constraint "FK_Execution_Negotiation"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Match_Negotiation')
		alter table "Negotiation" drop constraint "FK_Match_Negotiation"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Status_Negotiation')
		alter table "Negotiation" drop constraint "FK_Status_Negotiation"
	if exists (select * from sysobjects where type = 'U' and name = 'Negotiation')
		drop table "Negotiation"

	/* Create the table. */
	create table "Negotiation" (
		"BlotterId" "uniqueIdentifier" not null,
		"ExecutionId" "uniqueIdentifier" null,
		"IsRead" "bit" not null,
		"MatchId" "uniqueIdentifier" not null,
		"NegotiationId" "uniqueIdentifier" not null,
		"Quantity" "decimal"(19,7) not null,
		"RowVersion" "bigint" not null,
		"StatusId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "Negotiation" with nocheck add 
		constraint "NegotiationKey" primary key clustered
		(
			"NegotiationId"
		)  on "PRIMARY" 


	/* Foreign Keys */
	alter table "Negotiation" add 
		constraint "FK_Blotter_Negotiation" foreign key 
		(
			"BlotterId"
		) references "Blotter" (
			"BlotterId"
		),

		constraint "FK_Execution_Negotiation" foreign key 
		(
			"ExecutionId"
		) references "Execution" (
			"ExecutionId"
		),

		constraint "FK_Match_Negotiation" foreign key 
		(
			"MatchId"
		) references "Match" (
			"MatchId"
		),

		constraint "FK_Status_Negotiation" foreign key 
		(
			"StatusId"
		) references "Status" (
			"StatusId"
		)

	/* Defaults */
	alter table "Negotiation" with nocheck add 
		constraint "DefaultNegotiationIsArchived" default (0) for "IsArchived",
		constraint "DefaultNegotiationIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'Negotiation')
		update "VersionControl" set "Revision" = 0 where "Name" = 'Negotiation'
	else
		insert "VersionControl" ("Name", "Revision") select 'Negotiation', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'Negotiation'
	print convert(varchar, getdate(), 120) + 'Z Table: "Negotiation", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'Negotiation'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "Negotiation", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The SourceOrder Table */
if not exists (select * from "VersionControl" where "Name" = 'SourceOrder')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "SourceOrder" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'SourceOrder'
	print convert(varchar, getdate(), 120) + 'Z Table: "SourceOrder", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'SourceOrder'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'SourceOrder'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Blotter_SourceOrder')
		alter table "SourceOrder" drop constraint "FK_Blotter_SourceOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Destination_SourceOrder')
		alter table "SourceOrder" drop constraint "FK_Destination_SourceOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_OrderType_SourceOrder')
		alter table "SourceOrder" drop constraint "FK_OrderType_SourceOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_SourceOrder_SecurityId')
		alter table "SourceOrder" drop constraint "FK_Security_SourceOrder_SecurityId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Security_SourceOrder_SettlementId')
		alter table "SourceOrder" drop constraint "FK_Security_SourceOrder_SettlementId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Side_SourceOrder')
		alter table "SourceOrder" drop constraint "FK_Side_SourceOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_Status_SourceOrder')
		alter table "SourceOrder" drop constraint "FK_Status_SourceOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_TimeInForce_SourceOrder')
		alter table "SourceOrder" drop constraint "FK_TimeInForce_SourceOrder"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_User_SourceOrder_CreatedUserId')
		alter table "SourceOrder" drop constraint "FK_User_SourceOrder_CreatedUserId"
	if exists (select * from sysobjects where type = 'F' and name = 'FK_WorkingOrder_SourceOrder')
		alter table "SourceOrder" drop constraint "FK_WorkingOrder_SourceOrder"
	if exists (select * from sysobjects where type = 'U' and name = 'SourceOrder')
		drop table "SourceOrder"

	/* Create the table. */
	create table "SourceOrder" (
		"BlotterId" "uniqueIdentifier" not null,
		"CreatedTime" "datetime" not null,
		"CreatedUserId" "uniqueIdentifier" not null,
		"DestinationId" "uniqueIdentifier" null,
		"ExternalId0" "nvarchar"(128) null,
		"IsAdvertised" "bit" not null,
		"IsAutoExecute" "bit" not null,
		"IsCanceled" "bit" not null,
		"IsHeld" "bit" not null,
		"IsSteppedIn" "bit" not null,
		"IsSubmitted" "bit" not null,
		"LimitPrice" "decimal"(19,7) null,
		"MaximumVolatility" "decimal"(19,7) null,
		"ModifiedTime" "datetime" not null,
		"ModifiedUserId" "uniqueIdentifier" not null,
		"NewsFreeTime" "int" null,
		"OrderedQuantity" "decimal"(19,7) not null,
		"OrderTypeId" "uniqueIdentifier" null,
		"ReceivedTime" "nvarchar"(max) null,
		"RowVersion" "bigint" not null,
		"SecurityId" "uniqueIdentifier" not null,
		"SettlementDate" "datetime" null,
		"SettlementId" "uniqueIdentifier" null,
		"SideId" "uniqueIdentifier" not null,
		"SourceOrderId" "uniqueIdentifier" not null,
		"StartTime" "datetime" null,
		"StatusId" "uniqueIdentifier" not null,
		"StopPrice" "decimal"(19,7) null,
		"StopTime" "datetime" null,
		"SubmittedQuantity" "decimal"(19,7) not null,
		"SubmittedTime" "nvarchar"(max) null,
		"TargetPrice" "decimal"(19,7) null,
		"TimeInForceId" "uniqueIdentifier" not null,
		"TradeDate" "datetime" null,
		"WorkingOrderId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "SourceOrder" with nocheck add 
		constraint "SourceOrderKey" primary key clustered
		(
			"SourceOrderId"
		)  on "PRIMARY" 


	/* Non-Unique Indices */
	create index "SourceOrderKeyExternalId0"
		on "SourceOrder"
		(
			"ExternalId0"
		)  on "PRIMARY" 

	/* Foreign Keys */
	alter table "SourceOrder" add 
		constraint "FK_Blotter_SourceOrder" foreign key 
		(
			"BlotterId"
		) references "Blotter" (
			"BlotterId"
		),

		constraint "FK_Destination_SourceOrder" foreign key 
		(
			"DestinationId"
		) references "Destination" (
			"DestinationId"
		),

		constraint "FK_OrderType_SourceOrder" foreign key 
		(
			"OrderTypeId"
		) references "OrderType" (
			"OrderTypeId"
		),

		constraint "FK_Security_SourceOrder_SecurityId" foreign key 
		(
			"SecurityId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Security_SourceOrder_SettlementId" foreign key 
		(
			"SettlementId"
		) references "Security" (
			"SecurityId"
		),

		constraint "FK_Side_SourceOrder" foreign key 
		(
			"SideId"
		) references "Side" (
			"SideId"
		),

		constraint "FK_Status_SourceOrder" foreign key 
		(
			"StatusId"
		) references "Status" (
			"StatusId"
		),

		constraint "FK_TimeInForce_SourceOrder" foreign key 
		(
			"TimeInForceId"
		) references "TimeInForce" (
			"TimeInForceId"
		),

		constraint "FK_User_SourceOrder_CreatedUserId" foreign key 
		(
			"CreatedUserId"
		) references "User" (
			"UserId"
		),

		constraint "FK_WorkingOrder_SourceOrder" foreign key 
		(
			"WorkingOrderId"
		) references "WorkingOrder" (
			"WorkingOrderId"
		)

	/* Defaults */
	alter table "SourceOrder" with nocheck add 
		constraint "DefaultSourceOrderIsArchived" default (0) for "IsArchived",
		constraint "DefaultSourceOrderIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'SourceOrder')
		update "VersionControl" set "Revision" = 0 where "Name" = 'SourceOrder'
	else
		insert "VersionControl" ("Name", "Revision") select 'SourceOrder', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'SourceOrder'
	print convert(varchar, getdate(), 120) + 'Z Table: "SourceOrder", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'SourceOrder'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "SourceOrder", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

/* The WorkingOrderTimer Table */
if not exists (select * from "VersionControl" where "Name" = 'WorkingOrderTimer')
	print convert(varchar, getdate(), 120) + 'Z <Undefined>: "WorkingOrderTimer" doesn''t exist in the catalogs.'
else
begin
	declare @revision "decimal"
	select @revision = "Revision" from "VersionControl" where "Name" = 'WorkingOrderTimer'
	print convert(varchar, getdate(), 120) + 'Z Table: "WorkingOrderTimer", Initial revision: ' + convert(varchar, @revision)
end

/* This checks the version control table to determine if an update is needed. */
declare @currentRevision "decimal"
declare @requiredRevision "decimal"
select @currentRevision = isnull((select "Revision" from "VersionControl" where "VersionControl"."Name" = 'WorkingOrderTimer'), -1.0)
select @requiredRevision = isnull((select "Revision" from "VersionHistory", "VersionTag"
	where "VersionHistory"."Active" = 1 and "VersionHistory"."Label" = "VersionTag"."Label" and	"VersionTag"."Name" = 'WorkingOrderTimer'), 0)
if @currentRevision < 0 and 0 <= @requiredRevision
begin

	/* The revision must be completed as a unit. */
	begin transaction

	/* Remove the object and any dependancies. */
	if exists (select * from sysobjects where type = 'U' and name = 'WorkingOrderTimer')
		drop table "WorkingOrderTimer"

	/* Create the table. */
	create table "WorkingOrderTimer" (
		"CurrentTime" "datetime" not null,
		"RowVersion" "bigint" not null,
		"StopTime" "datetime" not null,
		"WorkingOrderId" "uniqueIdentifier" not null,
		"WorkingOrderTimerId" "uniqueIdentifier" not null,
		"IsArchived" "bit" not null,
		"IsDeleted" "bit" not null,
	) on "PRIMARY"

	/* Unique Constraints */
	alter table "WorkingOrderTimer" with nocheck add 
		constraint "WorkingOrderTimerKey" primary key clustered
		(
			"WorkingOrderTimerId"
		)  on "PRIMARY" 


	/* Defaults */
	alter table "WorkingOrderTimer" with nocheck add 
		constraint "DefaultWorkingOrderTimerIsArchived" default (0) for "IsArchived",
		constraint "DefaultWorkingOrderTimerIsDeleted" default (0) for "IsDeleted"

	/* Update the versionControl table to reflect the change. */
	if exists (select * from "VersionControl" where "Name" = 'WorkingOrderTimer')
		update "VersionControl" set "Revision" = 0 where "Name" = 'WorkingOrderTimer'
	else
		insert "VersionControl" ("Name", "Revision") select 'WorkingOrderTimer', 0

	/* Commit the changes to the table. */
	commit transaction

end
go

if @@error = 0
begin
	declare @newRevision "decimal"
	select @newRevision = "Revision" from "VersionControl" where "Name" = 'WorkingOrderTimer'
	print convert(varchar, getdate(), 120) + 'Z Table: "WorkingOrderTimer", Final revision: ' + convert(varchar, @newRevision)
end
else
begin
	declare @oldRevision "decimal"
	select @oldRevision = isnull((select "Revision" from "VersionControl" where "Name" = 'WorkingOrderTimer'), 0.0)
	print convert(varchar, getdate(), 120) + 'Z Table: "WorkingOrderTimer", Error upgrading from revision: ' + convert(varchar, @oldRevision)
end
go

