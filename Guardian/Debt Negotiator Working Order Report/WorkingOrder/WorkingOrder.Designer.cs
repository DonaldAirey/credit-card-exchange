//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("urn:schemas-fluidtrade-com:guardian:consumer-trust-working-order", "FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder")]

namespace FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder
{


	/// <summary>
	/// This class provides the AccountBalance data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct AccountBalance : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal object balance;

		internal bool isActive;

		internal WorkingOrder workingOrder;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static AccountBalance()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance.SelectFromSelf);
		}

		/// <summary>
		/// Balance
		/// </summary>
		public object Balance
		{
			get
			{
				return this.balance;
			}
			set
			{

			}
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance accountBalance = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance)(iContent));
			if ((this.isActive != accountBalance.isActive))
			{
				this.isActive = accountBalance.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.balance != accountBalance.balance))
			{
				this.balance = accountBalance.balance;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Balance"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance accountBalance)
		{
			return accountBalance;
		}
	}

	/// <summary>
	/// This class provides the Address1 data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct Address1 : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1> selectSelf;

		internal object text;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Address1()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.Address1Column, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1 records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1.selectSelf;
			}
		}

		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1 to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1 address1 = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1)(iContent));
			if ((this.isActive != address1.isActive))
			{
				this.isActive = address1.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != address1.text))
			{
				this.text = address1.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1 SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1 address1)
		{
			return address1;
		}
	}

	/// <summary>
	/// This class provides the Address2 data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct Address2 : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2> selectSelf;

		internal object text;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Address2()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.Address2Column, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2 records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2.selectSelf;
			}
		}

		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2 to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2 address2 = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2)(iContent));
			if ((this.isActive != address2.isActive))
			{
				this.isActive = address2.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != address2.text))
			{
				this.text = address2.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2 SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2 address2)
		{
			return address2;
		}
	}

	/// <summary>
	/// This class provides the Blotter data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct Blotter : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal System.Guid blotterId;

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal string name;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Blotter()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter.SelectFromSelf);
		}

		/// <summary>
		/// BlotterId
		/// </summary>
		public System.Guid BlotterId
		{
			get
			{
				return this.blotterId;
			}
			set
			{

			}
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				return new FluidTrade.Core.DataTableCoordinate(workingOrderRow, DataModel.WorkingOrder.BlotterIdColumn);
			}
			set
			{
			}
		}

		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter blotter = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter)(iContent));
			if ((this.blotterId != blotter.blotterId))
			{
				this.blotterId = blotter.blotterId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("BlotterId"));
				}
			}
			if ((this.name != blotter.name))
			{
				this.name = blotter.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
			if ((this.isActive != blotter.isActive))
			{
				this.isActive = blotter.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter blotter)
		{
			return blotter;
		}
	}

	/// <summary>
	/// This class provides the City data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct City : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City> selectSelf;

		internal object text;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static City()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.CityColumn, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City.selectSelf;
			}
		}

		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City city = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City)(iContent));
			if ((this.isActive != city.isActive))
			{
				this.isActive = city.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != city.text))
			{
				this.text = city.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City city)
		{
			return city;
		}
	}

	/// <summary>
	/// This class provides the CreatedDateTime data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct CreatedDateTime : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal System.DateTime dateTime;

		internal bool isActive;

		internal WorkingOrder workingOrder;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static CreatedDateTime()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime.SelectFromSelf);
		}

		/// <summary>
		/// DateTime
		/// </summary>
		public System.DateTime DateTime
		{
			get
			{
				return this.dateTime;
			}
			set
			{

			}
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime createdDateTime = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime)(iContent));
			if ((this.isActive != createdDateTime.isActive))
			{
				this.isActive = createdDateTime.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.dateTime != createdDateTime.dateTime))
			{
				this.dateTime = createdDateTime.dateTime;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("DateTime"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime createdDateTime)
		{
			return createdDateTime;
		}
	}

	/// <summary>
	/// This class provides the DateOfBirth data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct DateOfBirth : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal System.Nullable<System.DateTime> dateTime;

		internal bool isActive;

		internal WorkingOrder workingOrder;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static DateOfBirth()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth.SelectFromSelf);
		}

		/// <summary>
		/// DateTime
		/// </summary>
		public System.Nullable<System.DateTime> DateTime
		{
			get
			{
				return this.dateTime;
			}
			set
			{

			}
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.DateOfBirthColumn);
			}
			set
			{
			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth dateOfBirth = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth)(iContent));
			if ((this.isActive != dateOfBirth.isActive))
			{
				this.isActive = dateOfBirth.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.dateTime != dateOfBirth.dateTime))
			{
				this.dateTime = dateOfBirth.dateTime;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("DateTime"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth dateOfBirth)
		{
			return dateOfBirth;
		}
	}

	/// <summary>
	/// This class provides the FirstName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct FirstName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal object name;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static FirstName()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.FirstNameColumn, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName firstName = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName)(iContent));
			if ((this.isActive != firstName.isActive))
			{
				this.isActive = firstName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != firstName.name))
			{
				this.name = firstName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName firstName)
		{
			return firstName;
		}
	}

	/// <summary>
	/// This class provides the LastName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct LastName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal object name;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static LastName()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.LastNameColumn, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName lastName = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName)(iContent));
			if ((this.isActive != lastName.isActive))
			{
				this.isActive = lastName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != lastName.name))
			{
				this.name = lastName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName lastName)
		{
			return lastName;
		}
	}

	/// <summary>
	/// This class provides the IsEmployed data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct IsEmployed : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal object employed;

		internal bool isActive;

		internal WorkingOrder workingOrder;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static IsEmployed()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed.SelectFromSelf);
		}

		/// <summary>
		/// Employed
		/// </summary>
		public object Employed
		{
			get
			{
				return this.employed;
			}
			set
			{

			}
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.IsEmployedColumn, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed isEmployed = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed)(iContent));
			if ((this.isActive != isEmployed.isActive))
			{
				this.isActive = isEmployed.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.employed != isEmployed.employed))
			{
				this.employed = isEmployed.employed;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Employed"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed isEmployed)
		{
			return isEmployed;
		}
	}

	/// <summary>
	/// This class provides the PostalCode data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct PostalCode : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal object code;

		internal bool isActive;

		internal WorkingOrder workingOrder;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static PostalCode()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode.SelectFromSelf);
		}

		/// <summary>
		/// Code
		/// </summary>
		public object Code
		{
			get
			{
				return this.code;
			}
			set
			{

			}
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.PostalCodeColumn, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode postalCode = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode)(iContent));
			if ((this.isActive != postalCode.isActive))
			{
				this.isActive = postalCode.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.code != postalCode.code))
			{
				this.code = postalCode.code;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Code"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode postalCode)
		{
			return postalCode;
		}
	}

	/// <summary>
	/// This class provides the MatchAggregation data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct MatchAggregation : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal object label;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation> selectSelf;

		internal int sortOrder;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static MatchAggregation()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		/// <summary>
		/// Label
		/// </summary>
		public object Label
		{
			get
			{
				return this.label;
			}
			set
			{

			}
		}

		public int SortOrder
		{
			get
			{
				return this.sortOrder;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation matchAggregation = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation)(iContent));
			if ((this.isActive != matchAggregation.isActive))
			{
				this.isActive = matchAggregation.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.label != matchAggregation.label))
			{
				this.label = matchAggregation.label;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Label"));
				}
			}
			if ((this.sortOrder != matchAggregation.sortOrder))
			{
				this.sortOrder = matchAggregation.sortOrder;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("SortOrder"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation matchAggregation)
		{
			return matchAggregation;
		}
	}

	/// <summary>
	/// This class provides the MiddleName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct MiddleName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal object name;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static MiddleName()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.MiddleNameColumn, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName middleName = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName)(iContent));
			if ((this.isActive != middleName.isActive))
			{
				this.isActive = middleName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != middleName.name))
			{
				this.name = middleName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName middleName)
		{
			return middleName;
		}
	}

	/// <summary>
	/// This class provides the ModifiedDateTime data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct ModifiedDateTime : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal System.DateTime dateTime;

		internal bool isActive;

		internal WorkingOrder workingOrder;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static ModifiedDateTime()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime.SelectFromSelf);
		}

		/// <summary>
		/// DateTime
		/// </summary>
		public System.DateTime DateTime
		{
			get
			{
				return this.dateTime;
			}
			set
			{

			}
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime modifiedDateTime = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime)(iContent));
			if ((this.isActive != modifiedDateTime.isActive))
			{
				this.isActive = modifiedDateTime.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.dateTime != modifiedDateTime.dateTime))
			{
				this.dateTime = modifiedDateTime.dateTime;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("DateTime"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime modifiedDateTime)
		{
			return modifiedDateTime;
		}
	}

	/// <summary>
	/// This class provides the Province data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct Province : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal System.Guid provinceId;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province> selectSelf;

		internal object text;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Province()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.ProvinceIdColumn, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// ProvinceId
		/// </summary>
		public System.Guid ProvinceId
		{
			get
			{
				return this.provinceId;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province.selectSelf;
			}
		}

		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province province = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province)(iContent));
			if ((this.isActive != province.isActive))
			{
				this.isActive = province.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != province.text))
			{
				this.text = province.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
			if ((this.provinceId != province.provinceId))
			{
				this.provinceId = province.provinceId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("ProvinceId"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province province)
		{
			return province;
		}
	}

	/// <summary>
	/// This class provides the RuleId data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct RuleId : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal System.Guid debtRuleId;

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal System.Guid parentId;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static RuleId()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId.SelectFromSelf);
		}

		/// <summary>
		/// DebtRuleId
		/// </summary>
		public System.Guid DebtRuleId
		{
			get
			{
				return this.debtRuleId;
			}
			set
			{

			}
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerTrustRow, DataModel.ConsumerTrust.DebtRuleIdColumn);
			}
			set
			{
			}
		}

		/// <summary>
		/// ParentId
		/// </summary>
		public System.Guid ParentId
		{
			get
			{
				return this.parentId;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId ruleId = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId)(iContent));
			if ((this.isActive != ruleId.isActive))
			{
				this.isActive = ruleId.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.parentId != ruleId.parentId))
			{
				this.parentId = ruleId.parentId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("ParentId"));
				}
			}
			if ((this.debtRuleId != ruleId.debtRuleId))
			{
				this.debtRuleId = ruleId.debtRuleId;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("DebtRuleId"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId ruleId)
		{
			return ruleId;
		}
	}

	/// <summary>
	/// This class provides the Salutation data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct Salutation : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal object name;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Salutation()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.SalutationColumn, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation salutation = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation)(iContent));
			if ((this.isActive != salutation.isActive))
			{
				this.isActive = salutation.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != salutation.name))
			{
				this.name = salutation.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation salutation)
		{
			return salutation;
		}
	}

	/// <summary>
	/// This class provides the SavingsBalance data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct SavingsBalance : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal object balance;

		internal bool isActive;

		internal WorkingOrder workingOrder;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SavingsBalance()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance.SelectFromSelf);
		}

		/// <summary>
		/// Balance
		/// </summary>
		public object Balance
		{
			get
			{
				return this.balance;
			}
			set
			{

			}
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				return new FluidTrade.Core.DataTableCoordinate(consumerTrustRow, DataModel.ConsumerTrust.SavingsBalanceColumn);
			}
			set
			{
			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance savingsBalance = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance)(iContent));
			if ((this.isActive != savingsBalance.isActive))
			{
				this.isActive = savingsBalance.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.balance != savingsBalance.balance))
			{
				this.balance = savingsBalance.balance;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Balance"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance savingsBalance)
		{
			return savingsBalance;
		}
	}

	/// <summary>
	/// This class provides the SecurityName data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct SecurityName : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal object name;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SecurityName()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				return new FluidTrade.Core.DataTableCoordinate(workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.EntityRow, DataModel.Entity.NameColumn);
			}
			set
			{
			}
		}

		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName securityName = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName)(iContent));
			if ((this.isActive != securityName.isActive))
			{
				this.isActive = securityName.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != securityName.name))
			{
				this.name = securityName.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName securityName)
		{
			return securityName;
		}
	}

	/// <summary>
	/// This class provides the SelectRow data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct SelectRow : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal string name;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SelectRow()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		/// <summary>
		/// Name
		/// </summary>
		public string Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow selectRow = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow)(iContent));
			if ((this.isActive != selectRow.isActive))
			{
				this.isActive = selectRow.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != selectRow.name))
			{
				this.name = selectRow.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow selectRow)
		{
			return selectRow;
		}
	}

	/// <summary>
	/// This class provides the SocialSecurityNumber data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct SocialSecurityNumber : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal object number;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static SocialSecurityNumber()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.SocialSecurityNumberColumn, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// Number
		/// </summary>
		public object Number
		{
			get
			{
				return this.number;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber socialSecurityNumber = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber)(iContent));
			if ((this.isActive != socialSecurityNumber.isActive))
			{
				this.isActive = socialSecurityNumber.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.number != socialSecurityNumber.number))
			{
				this.number = socialSecurityNumber.number;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Number"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber socialSecurityNumber)
		{
			return socialSecurityNumber;
		}
	}

	/// <summary>
	/// This class provides the MatchStatus data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct MatchStatus : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal string mnemonic;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus> selectSelf;

		internal object text;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static MatchStatus()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		/// <summary>
		/// Mnemonic
		/// </summary>
		public string Mnemonic
		{
			get
			{
				return this.mnemonic;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus.selectSelf;
			}
		}

		/// <summary>
		/// Text
		/// </summary>
		public object Text
		{
			get
			{
				return this.text;
			}
			set
			{

			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus matchStatus = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus)(iContent));
			if ((this.mnemonic != matchStatus.mnemonic))
			{
				this.mnemonic = matchStatus.mnemonic;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Mnemonic"));
				}
			}
			if ((this.isActive != matchStatus.isActive))
			{
				this.isActive = matchStatus.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.text != matchStatus.text))
			{
				this.text = matchStatus.text;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Text"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus matchStatus)
		{
			return matchStatus;
		}
	}

	/// <summary>
	/// This class provides the Suffix data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public struct Suffix : FluidTrade.Core.IContent, System.ComponentModel.INotifyPropertyChanged
	{

		internal bool isActive;

		internal WorkingOrder workingOrder;

		internal object name;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix> selectSelf;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static Suffix()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix.SelectFromSelf);
		}

		/// <summary>
		/// IsActive
		/// </summary>
		public bool IsActive
		{
			get
			{
				return this.isActive;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				WorkingOrderRow workingOrderRow = this.workingOrder.workingOrderRow;
				ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
				ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
				return new FluidTrade.Core.DataTableCoordinate(consumerRow, DataModel.Consumer.SuffixColumn, workingOrderRow.WorkingOrderId);
			}
			set
			{
			}
		}

		/// <summary>
		/// Name
		/// </summary>
		public object Name
		{
			get
			{
				return this.name;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix.selectSelf;
			}
		}

		/// <summary>
		/// Indicates that one of the object's properties has changed.
		/// </summary>
		public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix suffix = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix)(iContent));
			if ((this.isActive != suffix.isActive))
			{
				this.isActive = suffix.isActive;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("IsActive"));
				}
			}
			if ((this.name != suffix.name))
			{
				this.name = suffix.name;
				if ((this.PropertyChanged != null))
				{
					this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs("Name"));
				}
			}
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix suffix)
		{
			return suffix;
		}
	}

	/// <summary>
	/// This class provides the WorkingOrder data for a report.
	/// </summary>
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("FluidTrade.PresentationGenerator.PresentationGenerator", "1.3.0.0")]
	[global::System.ComponentModel.DesignerCategoryAttribute("code")]
	[global::System.ComponentModel.ToolboxItemAttribute(true)]
	public class WorkingOrder : FluidTrade.Core.IContent
	{

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance accountBalance;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1 address1;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2 address2;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter blotter;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City city;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime createdDateTime;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth dateOfBirth;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName firstName;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed isEmployed;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName lastName;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation matchAggregation;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus matchStatus;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName middleName;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime modifiedDateTime;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode postalCode;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province province;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId ruleId;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation salutation;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance savingsBalance;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName securityName;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow selectRow;

		private static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder> selectSelf;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber socialSecurityNumber;

		internal FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix suffix;

		internal WorkingOrderRow workingOrderRow;

		/// <summary>
		/// Creates the static resources required for this class.
		/// </summary>
		static WorkingOrder()
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder.selectSelf = new System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder>(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder.SelectFromSelf);
		}

		/// <summary>
		/// Creates a FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder.
		/// </summary>
		public WorkingOrder()
		{
			this.accountBalance.workingOrder = this;
			this.address1.workingOrder = this;
			this.address2.workingOrder = this;
			this.blotter.workingOrder = this;
			this.city.workingOrder = this;
			this.createdDateTime.workingOrder = this;
			this.dateOfBirth.workingOrder = this;
			this.firstName.workingOrder = this;
			this.lastName.workingOrder = this;
			this.isEmployed.workingOrder = this;
			this.postalCode.workingOrder = this;
			this.matchAggregation.workingOrder = this;
			this.middleName.workingOrder = this;
			this.modifiedDateTime.workingOrder = this;
			this.province.workingOrder = this;
			this.ruleId.workingOrder = this;
			this.salutation.workingOrder = this;
			this.savingsBalance.workingOrder = this;
			this.securityName.workingOrder = this;
			this.selectRow.workingOrder = this;
			this.socialSecurityNumber.workingOrder = this;
			this.matchStatus.workingOrder = this;
			this.suffix.workingOrder = this;
		}

		/// <summary>
		/// AccountBalance
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.AccountBalance AccountBalance
		{
			get
			{
				return this.accountBalance;
			}
			set
			{

			}
		}

		/// <summary>
		/// Address1
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address1 Address1
		{
			get
			{
				return this.address1;
			}
			set
			{

			}
		}

		/// <summary>
		/// Address2
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Address2 Address2
		{
			get
			{
				return this.address2;
			}
			set
			{

			}
		}

		/// <summary>
		/// Blotter
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Blotter Blotter
		{
			get
			{
				return this.blotter;
			}
			set
			{

			}
		}

		/// <summary>
		/// City
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.City City
		{
			get
			{
				return this.city;
			}
			set
			{

			}
		}

		/// <summary>
		/// CreatedDateTime
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.CreatedDateTime CreatedDateTime
		{
			get
			{
				return this.createdDateTime;
			}
			set
			{

			}
		}

		/// <summary>
		/// DateOfBirth
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.DateOfBirth DateOfBirth
		{
			get
			{
				return this.dateOfBirth;
			}
			set
			{

			}
		}

		/// <summary>
		/// FirstName
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.FirstName FirstName
		{
			get
			{
				return this.firstName;
			}
			set
			{

			}
		}

		/// <summary>
		/// IsEmployed
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.IsEmployed IsEmployed
		{
			get
			{
				return this.isEmployed;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets or sets the unique identifier of this content.
		/// </summary>
		public object Key
		{
			get
			{
				return this.workingOrderRow;
			}
			set
			{
			}
		}

		/// <summary>
		/// LastName
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.LastName LastName
		{
			get
			{
				return this.lastName;
			}
			set
			{

			}
		}

		/// <summary>
		/// MatchAggregation
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchAggregation MatchAggregation
		{
			get
			{
				return this.matchAggregation;
			}
			set
			{

			}
		}

		/// <summary>
		/// MatchStatus
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MatchStatus MatchStatus
		{
			get
			{
				return this.matchStatus;
			}
			set
			{

			}
		}

		/// <summary>
		/// MiddleName
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.MiddleName MiddleName
		{
			get
			{
				return this.middleName;
			}
			set
			{

			}
		}

		/// <summary>
		/// ModifiedDateTime
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.ModifiedDateTime ModifiedDateTime
		{
			get
			{
				return this.modifiedDateTime;
			}
			set
			{

			}
		}

		/// <summary>
		/// PostalCode
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.PostalCode PostalCode
		{
			get
			{
				return this.postalCode;
			}
			set
			{

			}
		}

		/// <summary>
		/// Province
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Province Province
		{
			get
			{
				return this.province;
			}
			set
			{

			}
		}

		/// <summary>
		/// RuleId
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.RuleId RuleId
		{
			get
			{
				return this.ruleId;
			}
			set
			{

			}
		}

		/// <summary>
		/// Salutation
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Salutation Salutation
		{
			get
			{
				return this.salutation;
			}
			set
			{

			}
		}

		/// <summary>
		/// SavingsBalance
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SavingsBalance SavingsBalance
		{
			get
			{
				return this.savingsBalance;
			}
			set
			{

			}
		}

		/// <summary>
		/// SecurityName
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SecurityName SecurityName
		{
			get
			{
				return this.securityName;
			}
			set
			{

			}
		}

		/// <summary>
		/// SelectRow
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SelectRow SelectRow
		{
			get
			{
				return this.selectRow;
			}
			set
			{

			}
		}

		/// <summary>
		/// Gets the selector delegate for FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder records.
		/// </summary>
		public static System.Func<FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder, FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder> SelectSelf
		{
			get
			{
				return FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder.selectSelf;
			}
		}

		/// <summary>
		/// SocialSecurityNumber
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.SocialSecurityNumber SocialSecurityNumber
		{
			get
			{
				return this.socialSecurityNumber;
			}
			set
			{

			}
		}

		/// <summary>
		/// Suffix
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.Suffix Suffix
		{
			get
			{
				return this.suffix;
			}
			set
			{

			}
		}

		/// <summary>
		/// Copies one FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder to another.
		/// </summary>
		public void Copy(FluidTrade.Core.IContent iContent)
		{
			FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder workingOrder = ((FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder)(iContent));
			this.accountBalance.Copy(workingOrder.accountBalance);
			this.address1.Copy(workingOrder.address1);
			this.address2.Copy(workingOrder.address2);
			this.blotter.Copy(workingOrder.blotter);
			this.city.Copy(workingOrder.city);
			this.createdDateTime.Copy(workingOrder.createdDateTime);
			this.dateOfBirth.Copy(workingOrder.dateOfBirth);
			this.firstName.Copy(workingOrder.firstName);
			this.lastName.Copy(workingOrder.lastName);
			this.isEmployed.Copy(workingOrder.isEmployed);
			this.postalCode.Copy(workingOrder.postalCode);
			this.matchAggregation.Copy(workingOrder.matchAggregation);
			this.middleName.Copy(workingOrder.middleName);
			this.modifiedDateTime.Copy(workingOrder.modifiedDateTime);
			this.province.Copy(workingOrder.province);
			this.ruleId.Copy(workingOrder.ruleId);
			this.salutation.Copy(workingOrder.salutation);
			this.savingsBalance.Copy(workingOrder.savingsBalance);
			this.securityName.Copy(workingOrder.securityName);
			this.selectRow.Copy(workingOrder.selectRow);
			this.socialSecurityNumber.Copy(workingOrder.socialSecurityNumber);
			this.matchStatus.Copy(workingOrder.matchStatus);
			this.suffix.Copy(workingOrder.suffix);
		}

		/// <summary>
		/// Creates a FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder.
		/// </summary>
		public FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder Select(FluidTrade.Guardian.WorkingOrderRow workingOrderRow)
		{
			this.workingOrderRow = workingOrderRow;
			ConsumerTrustRow consumerTrustRow = DataModel.ConsumerTrust.ConsumerTrustKey.Find(workingOrderRow.SecurityId);
			ConsumerRow consumerRow = consumerTrustRow == null ? null : consumerTrustRow.ConsumerRow;
			this.accountBalance.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			decimal accountBalance = 0.0m;
			if (consumerRow != null)
				foreach (CreditCardRow creditCardRow in consumerRow.GetCreditCardRows())
					accountBalance += creditCardRow.AccountBalance;
			this.accountBalance.balance =
			  accountBalance
			;
			this.address1.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.address1.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.Address1Column];
			this.address2.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.address2.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.Address2Column];
			this.blotter.blotterId = workingOrderRow.BlotterId;
			this.blotter.name = workingOrderRow.BlotterRow.EntityRow.Name;
			this.blotter.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.city.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.city.text = consumerRow == null ? null : consumerRow[DataModel.Consumer.CityColumn];
			this.createdDateTime.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.createdDateTime.dateTime = workingOrderRow.CreatedTime.ToLocalTime();
			this.dateOfBirth.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.dateOfBirth.dateTime = consumerRow == null ? null : consumerRow.IsDateOfBirthNull() ? (System.DateTime?)null : consumerRow.DateOfBirth;
			this.firstName.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.firstName.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.FirstNameColumn];
			this.lastName.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.lastName.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.LastNameColumn];
			this.isEmployed.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.isEmployed.employed = consumerRow == null ? null : consumerRow[DataModel.Consumer.IsEmployedColumn];
			this.postalCode.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.postalCode.code = consumerRow == null ? null : consumerRow[DataModel.Consumer.PostalCodeColumn];
			this.matchAggregation.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			int matchSortOrder = 2;
			string matchAggregationString = "No Match";
			bool isMatch = false;
			bool isPartialMatch = false;
			foreach (MatchRow matchRow in workingOrderRow.GetMatchRows())
			{
				if (matchRow.HeatIndex == 1.0M)
				{
					isMatch = true;
					break;
				}
				if (matchRow.HeatIndex != 0.0M)
				{
					isPartialMatch = true;
				}
			}
			if (isMatch)
			{
				matchSortOrder = 0;
				matchAggregationString = "Match";
			}
			else
			{
				if (isPartialMatch)
				{
					matchSortOrder = 1;
					matchAggregationString = "Partial Match";
				}
			}
			this.matchAggregation.sortOrder = matchSortOrder;
			this.matchAggregation.label = matchAggregationString;
			this.middleName.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.middleName.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.MiddleNameColumn];
			this.modifiedDateTime.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.modifiedDateTime.dateTime = workingOrderRow.ModifiedTime.ToLocalTime();
			this.province.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;

			System.Guid provinceId = System.Guid.Empty;

			if (consumerRow != null && consumerRow.ProvinceRow != null)
			{
				provinceId = consumerRow.ProvinceRow.ProvinceId;

			};
			this.province.provinceId =
							provinceId
						;
			this.ruleId.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.ruleId.parentId = workingOrderRow.BlotterId;

			System.Guid debtRuleId = System.Guid.Empty;

			if (consumerTrustRow != null && consumerTrustRow.DebtRuleRow != null)
				debtRuleId = consumerTrustRow.DebtRuleRow.DebtRuleId;
			this.ruleId.debtRuleId =
			  debtRuleId
			;
			this.salutation.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.salutation.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.SalutationColumn];
			this.savingsBalance.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.savingsBalance.balance = consumerTrustRow == null ? null : consumerTrustRow[DataModel.ConsumerTrust.SavingsBalanceColumn];
			this.securityName.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.securityName.name = workingOrderRow.SecurityRowByFK_Security_WorkingOrder_SecurityId.EntityRow.Name;
			this.selectRow.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.socialSecurityNumber.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.socialSecurityNumber.number = consumerRow == null ? null : consumerRow[DataModel.Consumer.SocialSecurityNumberColumn];
			this.matchStatus.mnemonic = workingOrderRow.StatusRow.Mnemonic;
			this.matchStatus.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.matchStatus.text = workingOrderRow.StatusRow.StatusCode.ToString();
			this.suffix.isActive = workingOrderRow.StatusRow.StatusCode != FluidTrade.Guardian.Status.Filled;
			this.suffix.name = consumerRow == null ? null : consumerRow[DataModel.Consumer.SuffixColumn];
			return this;
		}

		/// <summary>
		/// Selects a record from itself.
		/// </summary>
		private static FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder SelectFromSelf(FluidTrade.Guardian.Schema.DebtNegotiatorWorkingOrder.WorkingOrder workingOrder)
		{
			return workingOrder;
		}
	}
}
